<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Melanchall.DryWetMidi</name>
    </assembly>
    <members>
        <member name="M:Melanchall.DryWetMidi.Common.MathUtilities.IsPowerOfTwo(System.Int32)">
            <summary>
            Ckecks if a number is a power of 2.
            </summary>
            <param name="value">Value to check.</param>
            <returns>true if the number is a power of 2, false - otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.MathUtilities.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Calculates least common multiple of two integer numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns>Least common multiple of <paramref name="a"/> and <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="a"/> is zero or negative. -or-
            <paramref name="b"/> is zero or negative.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Common.DataTypesUtilities">
            <summary>
            Internal utilities to manipulate MIDI data types.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.Combine(Melanchall.DryWetMidi.Common.FourBitNumber,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Merges two four-bit numbers into one byte.
            </summary>
            <param name="head"><see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> representing left part of resulting number.</param>
            <param name="tail"><see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> representing right part of resulting number.</param>
            <returns>Single byte made of four-bit halfs.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.Combine(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Merges two seven-bit numbers into one 16-bit unsigned integer number.
            </summary>
            <param name="head"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing left part of resulting number.</param>
            <param name="tail"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing right part of resulting number.</param>
            <returns>Single unsigned 16-bit integer number made of seven-bit halfs.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.Combine(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Merges three seven-bit numbers into one 32-bit unsigned integer number.
            </summary>
            <param name="head"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing left part of resulting number.</param>
            <param name="middle"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing middle part of resulting number.</param>
            <param name="tail"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing right part of resulting number.</param>
            <returns>Single unsigned 32-bit integer number made of seven-bit halfs.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.Combine(System.Byte,System.Byte)">
            <summary>
            Merges two signed bytes into one 16-bit signed integer number.
            </summary>
            <param name="head">Byte representing left part of resulting number.</param>
            <param name="tail">Byte representing right part of resulting number.</param>
            <returns>Single signed 16-bit integer number made of byte halfs.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.Combine(System.UInt16,System.UInt16)">
            <summary>
            Merges two unsigned 16-bit numbers into one 32-bit unsigned integer number.
            </summary>
            <param name="head">16-bit unsigned number representing left part of resulting number.</param>
            <param name="tail">16-bit unsigned number representing right part of resulting number.</param>
            <returns>Single 32-bit unsigned integer number made of 16-bit unsigned integer halfs.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetTail(System.Byte)">
            <summary>
            Extracts right four-bit part of a byte.
            </summary>
            <param name="number">Byte to extract right part of.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> representing the right part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetTail(System.UInt16)">
            <summary>
            Extracts right seven-bit part of an unsigned 16-bit integer number.
            </summary>
            <param name="number">Number to extract right part of.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing the right part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetTail(System.Int16)">
            <summary>
            Extracts right eight-bit part of an unsigned 16-bit integer number.
            </summary>
            <param name="number">Number to extract right part of.</param>
            <returns>Byte representing the right part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetTail(System.UInt32)">
            <summary>
            Extracts right 16-bit part of an unsigned 32-bit integer number.
            </summary>
            <param name="number">Number to extract right part of.</param>
            <returns>16-bit unsigned integer number representing the right part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetHead(System.Byte)">
            <summary>
            Extracts left four-bit part of a byte.
            </summary>
            <param name="number">Byte to extract left part of.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> representing the left part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetHead(System.UInt16)">
            <summary>
            Extracts left seven-bit part of an unsigned 16-bit integer number.
            </summary>
            <param name="number">Number to extract left part of.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing the left part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetHead(System.Int16)">
            <summary>
            Extracts left eight-bit part of an signed 16-bit integer number.
            </summary>
            <param name="number">Number to extract left part of.</param>
            <returns>Byte representing the left part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetHead(System.UInt32)">
            <summary>
            Extracts left 16-bit part of an unsigned 32-bit integer number.
            </summary>
            <param name="number">Number to extract left part of.</param>
            <returns>16-bit unsigned integer number representing the left part of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetVlqLength(System.Int32)">
            <summary>
            Gets length of variable-length quantity (VLQ) representation of an integer number.
            </summary>
            <param name="number">Number to calculate VLQ length for.</param>
            <returns>Bytes count required to represent the number in VLQ.</returns>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetVlqLength(System.Int64)">
            <summary>
            Gets length of variable-length quantity (VLQ) representation of an integer number.
            </summary>
            <param name="number">Number to calculate VLQ length for.</param>
            <returns>Bytes count required to represent the number in VLQ.</returns>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetVlqBytes(System.Int32)">
            <summary>
            Gets bytes of a number in variable-length quantity (VLQ) format.
            </summary>
            <param name="number">Number to get VLQ bytes for.</param>
            <returns>Bytes representing the number coded in VLQ.</returns>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetVlqBytes(System.Int64)">
            <summary>
            Gets bytes of a number in variable-length quantity (VLQ) format.
            </summary>
            <param name="number">Number to get VLQ bytes for.</param>
            <returns>Bytes representing the number coded in VLQ.</returns>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetFirstByte(System.Int32)">
            <summary>
            Extracts first byte (leftmost) of signed 32-bit integer number.
            </summary>
            <param name="number">Number to extract first byte of.</param>
            <returns>First byte of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetSecondByte(System.Int32)">
            <summary>
            Extracts second byte (starting from left) of signed 32-bit integer number.
            </summary>
            <param name="number">Number to extract second byte of.</param>
            <returns>Second byte of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetThirdByte(System.Int32)">
            <summary>
            Extracts third byte (starting from left) of signed 32-bit integer number.
            </summary>
            <param name="number">Number to extract third byte of.</param>
            <returns>Third byte of <paramref name="number"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.DataTypesUtilities.GetFourthByte(System.Int32)">
            <summary>
            Extracts fourth byte (rightmost) of signed 32-bit integer number.
            </summary>
            <param name="number">Number to extract fourth byte of.</param>
            <returns>Fourth byte of <paramref name="number"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Common.FourBitNumber">
            <summary>
            Type that is used to represent a four-bit number (0-15).
            </summary>
            <remarks>
            Four-bit numbers widely used by MIDI protocol as parameters of MIDI events.
            So instead of manipulating built-in C# numeric types (like byte or int) and checking for
            out-of-range errors all validation of numbers in the [0; 15] range happens on data type
            level via casting C# integer values to the <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.FourBitNumber.MinValue">
            <summary>
            The smallest possible value of a <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.FourBitNumber.MaxValue">
            <summary>
            The largest possible value of a <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.FourBitNumber.Values">
            <summary>
            All possible values of <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> with the specified value.
            </summary>
            <param name="value">Value representing four-bit number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is out of
            [<see cref="F:Melanchall.DryWetMidi.Common.FourBitNumber.MinValue"/>; <see cref="F:Melanchall.DryWetMidi.Common.FourBitNumber.MaxValue"/>] range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.TryParse(System.String,Melanchall.DryWetMidi.Common.FourBitNumber@)">
            <summary>
            Converts the string representation of a four-bit number to its <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a number to convert.</param>
            <param name="fourBitNumber">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>
            equivalent of the four-bit number contained in <paramref name="input"/>, if the conversion succeeded,
            or zero if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.Parse(System.String)">
            <summary>
            Converts the string representation of a four-bit number to its <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> equivalent.
            </summary>
            <param name="input">A string containing a number to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> equivalent to the four-bit number contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.op_Implicit(Melanchall.DryWetMidi.Common.FourBitNumber)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="number"><see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> object to convert to a byte value.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.op_Explicit(System.Byte)~Melanchall.DryWetMidi.Common.FourBitNumber">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> to a <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </summary>
            <param name="number">Byte value to convert to a <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/> object.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.CompareTo(Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings:
            - Less than zero: This instance precedes other in the sort order.
            - Zero: This instance occurs in the same position in the sort order as other.
            - Greater than zero: This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:Melanchall.DryWetMidi.Common.FourBitNumber"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Boolean"/> value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Boolean"/> value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point
            number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point
            number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an System.Object of the specified <see cref="T:System.Type"/>
            that has an equivalent value, using the specified culture-specific formatting
            information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object"/> instance of type conversionType whose value is equivalent to
            the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.FourBitNumber.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Common.SevenBitNumber">
            <summary>
            Type that is used to represent a seven-bit number (0-127).
            </summary>
            <remarks>
            Seven-bit numbers widely used by MIDI protocol as parameters of MIDI events.
            So instead of manipulating built-in C# numeric types (like byte or int) and checking for
            out-of-range errors all validation of numbers in the [0; 127] range happens on data type
            level via casting C# integer values to the <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SevenBitNumber.MinValue">
            <summary>
            The smallest possible value of a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SevenBitNumber.MaxValue">
            <summary>
            The largest possible value of a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SevenBitNumber.Values">
            <summary>
            All possible values of <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> with the specified value.
            </summary>
            <param name="value">Value representing seven-bit number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is out of
            [<see cref="F:Melanchall.DryWetMidi.Common.SevenBitNumber.MinValue"/>; <see cref="F:Melanchall.DryWetMidi.Common.SevenBitNumber.MaxValue"/>] range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.TryParse(System.String,Melanchall.DryWetMidi.Common.SevenBitNumber@)">
            <summary>
            Converts the string representation of a seven-bit number to its <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a number to convert.</param>
            <param name="sevenBitNumber">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>
            equivalent of the seven-bit number contained in <paramref name="input"/>, if the conversion succeeded,
            or zero if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.Parse(System.String)">
            <summary>
            Converts the string representation of a seven-bit number to its <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> equivalent.
            </summary>
            <param name="input">A string containing a number to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> equivalent to the seven-bit number contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.op_Implicit(Melanchall.DryWetMidi.Common.SevenBitNumber)~System.Byte">
            <summary>
            Converts the value of a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="number"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> object to convert to a byte value.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.op_Explicit(System.Byte)~Melanchall.DryWetMidi.Common.SevenBitNumber">
            <summary>
            Converts the value of a <see cref="T:System.Byte"/> to a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </summary>
            <param name="number">Byte value to convert to a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> object.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.CompareTo(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings:
            - Less than zero: This instance precedes other in the sort order.
            - Zero: This instance occurs in the same position in the sort order as other.
            - Greater than zero: This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Boolean"/> value using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Boolean"/> value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer
            using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point
            number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point
            number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using
            the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the
            specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an System.Object of the specified <see cref="T:System.Type"/>
            that has an equivalent value, using the specified culture-specific formatting
            information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object"/> instance of type conversionType whose value is equivalent to
            the value of this instance.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Common.SevenBitNumber.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Common.SmpteFormat">
            <summary>
            SMPTE format which represents the frame rate.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SmpteFormat.TwentyFour">
            <summary>
            24 frame/sec.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SmpteFormat.TwentyFive">
            <summary>
            25 frame/sec.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SmpteFormat.ThirtyDrop">
            <summary>
            29.97 frame/sec (dropped 30).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.SmpteFormat.Thirty">
            <summary>
            30 frame/sec.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Common.ControlName">
            <summary>
            Name and function of a MIDI controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.BankSelect">
            <summary>
            Bank Select.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Modulation">
            <summary>
            Modulation Wheel or Lever.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.BreathController">
            <summary>
            Breath Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.FootController">
            <summary>
            Foot Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.PortamentoTime">
            <summary>
            Portamento Time.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.DataEntryMsb">
            <summary>
            Data Entry MSB.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.ChannelVolume">
            <summary>
            Channel Volume (formerly Main Volume).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Balance">
            <summary>
            Balance.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Pan">
            <summary>
            Pan.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.ExpressionController">
            <summary>
            Expression Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.EffectControl1">
            <summary>
            Effect Control 1.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.EffectControl2">
            <summary>
            Effect Control 2.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController1">
            <summary>
            General Purpose Controller 1.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController2">
            <summary>
            General Purpose Controller 2.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController3">
            <summary>
            General Purpose Controller 3.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController4">
            <summary>
            General Purpose Controller 4.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForBankSelect">
            <summary>
            LSB for Bank Select.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForModulation">
            <summary>
            LSB for Modulation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForBreathController">
            <summary>
            LSB for Breath Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController3">
            <summary>
            LSB for Control 3 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForFootController">
            <summary>
            LSB for Foot Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForPortamentoTime">
            <summary>
            LSB for Portamento Time.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForDataEntry">
            <summary>
            LSB for Data Entry.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForChannelVolume">
            <summary>
            LSB for Channel Volume (formerly Main Volume).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForBalance">
            <summary>
            LSB for Balance.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController9">
            <summary>
            LSB for Control 9 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForPan">
            <summary>
            LSB for Pan.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForExpressionController">
            <summary>
            LSB for Expression Controller.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForEffectControl1">
            <summary>
            LSB for Effect Control 1.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForEffectControl2">
            <summary>
            LSB for Effect Control 2.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController14">
            <summary>
            LSB for Control 14 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController15">
            <summary>
            LSB for Control 15 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForGeneralPurposeController1">
            <summary>
            LSB for General Purpose Controller 1.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForGeneralPurposeController2">
            <summary>
            LSB for General Purpose Controller 2.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForGeneralPurposeController3">
            <summary>
            LSB for General Purpose Controller 3.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForGeneralPurposeController4">
            <summary>
            LSB for General Purpose Controller 4.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController20">
            <summary>
            LSB for Control 20 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController21">
            <summary>
            LSB for Control 21 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController22">
            <summary>
            LSB for Control 22 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController23">
            <summary>
            LSB for Control 23 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController24">
            <summary>
            LSB for Control 24 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController25">
            <summary>
            LSB for Control 25 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController26">
            <summary>
            LSB for Control 26 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController27">
            <summary>
            LSB for Control 27 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController28">
            <summary>
            LSB for Control 28 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController29">
            <summary>
            LSB for Control 29 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController30">
            <summary>
            LSB for Control 30 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LsbForController31">
            <summary>
            LSB for Control 31 (Undefined).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.DamperPedal">
            <summary>
            Damper Pedal On/Off (Sustain).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Portamento">
            <summary>
            Portamento On/Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Sostenuto">
            <summary>
            Sostenuto On/Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoftPedal">
            <summary>
            Soft Pedal On/Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LegatoFootswitch">
            <summary>
            Legato Footswitch.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Hold2">
            <summary>
            Hold 2.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController1">
            <summary>
            Sound Controller 1 (default: Sound Variation).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController2">
            <summary>
            Sound Controller 2 (default: Timbre/Harmonic Intens.).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController3">
            <summary>
            Sound Controller 3 (default: Release Time).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController4">
            <summary>
            Sound Controller 4 (default: Attack Time).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController5">
            <summary>
            Sound Controller 5 (default: Brightness).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController6">
            <summary>
            Sound Controller 6 (default: Decay Time - see MMA RP-021).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController7">
            <summary>
            Sound Controller 7 (default: Vibrato Rate - see MMA RP-021).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController8">
            <summary>
            Sound Controller 8 (default: Vibrato Depth - see MMA RP-021).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController9">
            <summary>
            Sound Controller 9 (default: Vibrato Delay - see MMA RP-021).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.SoundController10">
            <summary>
            Sound Controller 10 (default undefined - see MMA RP-021).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController5">
            <summary>
            General Purpose Controller 5.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController6">
            <summary>
            General Purpose Controller 6.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController7">
            <summary>
            General Purpose Controller 7.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.GeneralPurposeController8">
            <summary>
            General Purpose Controller 8.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.PortamentoControl">
            <summary>
            Portamento Control.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.HighResolutionVelocityPrefix">
            <summary>
            High Resolution Velocity Prefix.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Effects1Depth">
            <summary>
            Effects 1 Depth (default: Reverb Send Level - see MMA RP-023; formerly External Effects Depth).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Effects2Depth">
            <summary>
            Effects 2 Depth (formerly Tremolo Depth).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Effects3Depth">
            <summary>
            Effects 3 Depth (default: Chorus Send Level - see MMA RP-023; formerly Chorus Depth).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Effects4Depth">
            <summary>
            Effects 4 Depth (formerly Celeste [Detune] Depth).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Effects5Depth">
            <summary>
            Effects 5 Depth (formerly Phaser Depth).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.DataIncrement">
            <summary>
            Data Increment (Data Entry +1; see MMA RP-018).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.DataDecrement">
            <summary>
            Data Decrement (Data Entry -1; see MMA RP-018).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.NonRegisteredParameterNumberLsb">
            <summary>
            Non-Registered Parameter Number (NRPN) - LSB.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.NonRegisteredParameterNumberMsb">
            <summary>
            Non-Registered Parameter Number (NRPN) - MSB.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.RegisteredParameterNumberLsb">
            <summary>
            Registered Parameter Number (RPN) - LSB.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.RegisteredParameterNumberMsb">
            <summary>
            Registered Parameter Number (RPN) - MSB.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.AllSoundOff">
            <summary>
            Channel Mode Message: All Sound Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.ResetAllControllers">
            <summary>
            Channel Mode Message: Reset All Controllers (See MMA RP-015).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.LocalControl">
            <summary>
            Channel Mode Message: Local Control On/Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.AllNotesOff">
            <summary>
            Channel Mode Message: All Notes Off.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.OmniModeOff">
            <summary>
            Channel Mode Message: Omni Mode Off (+ all notes off).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.OmniModeOn">
            <summary>
            Channel Mode Message: Omni Mode On (+ all notes off).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.MonoModeOn">
            <summary>
            Channel Mode Message: Mono Mode On (+ poly off, + all notes off).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.PolyModeOn">
            <summary>
            Channel Mode Message: Poly Mode On (+ mono off, +all notes off).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Common.ControlName.Undefined">
            <summary>
            Undefined Controller.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.DevicesConnector">
            <summary>
            Provides a way to connect an input MIDI device to an output MIDI device.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnector.#ctor(Melanchall.DryWetMidi.Devices.InputDevice,Melanchall.DryWetMidi.Devices.OutputDevice[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.DevicesConnector"/> with the specified
            input and output MIDI devices.
            </summary>
            <remarks>
            <paramref name="inputDevice"/> will not be actually connected to <paramref name="outputDevices"/> after
            an instance of <see cref="T:Melanchall.DryWetMidi.Devices.DevicesConnector"/> is created. You must call <see cref="M:Melanchall.DryWetMidi.Devices.DevicesConnector.Connect"/> method
            to establish connection between devices.
            </remarks>
            <param name="inputDevice">Input MIDI device to connect to <paramref name="outputDevices"/>.</param>
            <param name="outputDevices">Output MIDI devices to connect <paramref name="inputDevice"/> to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputDevice"/> is null. -or-
            <paramref name="outputDevices"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="outputDevices"/> contains null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnector.Finalize">
            <summary>
            Finalizes the current instance of the <see cref="T:Melanchall.DryWetMidi.Devices.DevicesConnector"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.DevicesConnector.InputDevice">
            <summary>
            Gets an input MIDI device to connect to <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.DevicesConnector.OutputDevices">
            <summary>
            Gets output MIDI devices to connect <see cref="P:Melanchall.DryWetMidi.Devices.DevicesConnector.InputDevice"/> to.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnector.Connect">
            <summary>
            Connects <see cref="P:Melanchall.DryWetMidi.Devices.DevicesConnector.InputDevice"/> to <see cref="P:Melanchall.DryWetMidi.Devices.DevicesConnector.OutputDevices"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnector.Disconnect">
            <summary>
            Disconnects <see cref="P:Melanchall.DryWetMidi.Devices.DevicesConnector.InputDevice"/> from <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnector.Dispose">
            <summary>
            Releases all resources used by the current instance of <see cref="T:Melanchall.DryWetMidi.Devices.DevicesConnector"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.DevicesConnectorUtilities">
            <summary>
            Provides methods to connect MIDI devices.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.DevicesConnectorUtilities.Connect(Melanchall.DryWetMidi.Devices.InputDevice,Melanchall.DryWetMidi.Devices.OutputDevice[])">
            <summary>
            Connects an input device to the specified output device.
            </summary>
            <param name="inputDevice">Input MIDI device to connect to <paramref name="outputDevices"/>.</param>
            <param name="outputDevices">Output MIDI devices to connect <paramref name="inputDevice"/> to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputDevice"/> is null. -or-
            <paramref name="outputDevices"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="outputDevices"/> contains null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.ErrorOccurredEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.MidiDevice.ErrorOccurred"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.ErrorOccurredEventArgs.Exception">
            <summary>
            Gets the exception caused an error.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.InputDevice.InvalidShortEventReceived"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs.StatusByte">
            <summary>
            Gets the status byte of an invalid MIDI event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs.FirstDataByte">
            <summary>
            Gets the first data byte of an invalid MIDI event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs.SecondDataByte">
            <summary>
            Gets the second data byte of an invalid MIDI event.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.InvalidSysExEventReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.InputDevice.InvalidSysExEventReceived"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InvalidSysExEventReceivedEventArgs.Data">
            <summary>
            Gets the data of invalid system exclusive event received by <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.MidiEventReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.InputDevice.EventReceived"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiEventReceivedEventArgs.Event">
            <summary>
            Gets MIDI event received by <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.InputDevice">
            <summary>
            Represents an input MIDI device.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.InputDevice.EventReceived">
            <summary>
            Occurs when a MIDI event is received.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.InputDevice.MidiTimeCodeReceived">
            <summary>
            Occurs when MIDI time code received, i.e. all MIDI events to complete MIDI time code are received.
            </summary>
            <remarks>
            This event will be raised only if <see cref="P:Melanchall.DryWetMidi.Devices.InputDevice.RaiseMidiTimeCodeReceived"/> is set to true.
            </remarks>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.InputDevice.InvalidSysExEventReceived">
            <summary>
            Occurs when invalid system exclusive event is received.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.InputDevice.InvalidShortEventReceived">
            <summary>
            Occurs when invalid channel, system common or system real-time event received.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.Finalize">
            <summary>
            Finalizes the current instance of the <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InputDevice.RaiseMidiTimeCodeReceived">
            <summary>
            Gets or sets a value indicating if <see cref="E:Melanchall.DryWetMidi.Devices.InputDevice.MidiTimeCodeReceived"/> event should be raised or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.InputDevice.IsListeningForEvents">
            <summary>
            Gets a value that indicates whether <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/> is currently listening for
            incoming MIDI events.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.StartEventsListening">
            <summary>
            Starts listening for incoming MIDI events on the current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.StopEventsListening">
            <summary>
            Stops listening for incoming MIDI events on the current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.Reset">
            <summary>
            Stops listening for incoming MIDI events on the current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/> and flushes
            all pending data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.InputDevice"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.GetDevicesCount">
            <summary>
            Retrieves the number of input MIDI devices presented in the system.
            </summary>
            <returns>Number of input MIDI devices presented in the system.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.GetAll">
            <summary>
            Retrieves all input MIDI devices presented in the system.
            </summary>
            <returns>All input MIDI devices presented in the system.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.GetByName(System.String)">
            <summary>
            Retrieves a first input MIDI device with the specified name.
            </summary>
            <param name="name">The name of an input MIDI device to retrieve.</param>
            <returns>Input MIDI device with the specified name.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or contains white-spaces only. -or-
            <paramref name="name"/> specifies an input MIDI device which is not presented in the system.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.GetById(System.Int32)">
            <summary>
            Retrieves input MIDI device with the specified ID.
            </summary>
            <param name="id">Device ID which is number from 0 to <see cref="M:Melanchall.DryWetMidi.Devices.InputDevice.GetDevicesCount"/> minus 1.</param>
            <returns>Input MIDI device with the specified ID.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.GetErrorText(System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Gets error description for the specified MMRESULT which is return value of winmm function.
            </summary>
            <param name="mmrError">MMRESULT which is return value of winmm function.</param>
            <param name="pszText"><see cref="T:System.Text.StringBuilder"/> to write error description to.</param>
            <param name="cchText">Size of <paramref name="pszText"/> buffer.</param>
            <returns>Return value of winmm function which gets error description.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.InputDevice.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MIDI device class and optionally releases
            the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to
            release only unmanaged resources.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.InputDevice.MidiTimeCodeReceived"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.Format">
            <summary>
            Gets format of MIDI time code.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.Hours">
            <summary>
            Gets the hours component of MIDI time code.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.Minutes">
            <summary>
            Gets the minutes component of MIDI time code.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.Seconds">
            <summary>
            Gets the seconds component of MIDI time code.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.Frames">
            <summary>
            Gets the frames component of MIDI time code.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.Manufacturer">
            <summary>
            Manufacturer of MIDI device driver.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Unknown">
            <summary>
            Unknown manufacturer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Antex">
            <summary>
            Antex Electronics Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Apps">
            <summary>
            APPS Software.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Apt">
            <summary>
            Audio Processing Technology.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Artisoft">
            <summary>
            Artisoft, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ast">
            <summary>
            AST Research, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ati">
            <summary>
            ATI Technologies, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Audiofile">
            <summary>
            Audio, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Audiopt">
            <summary>
            Audio Processing Technology.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Auravision">
            <summary>
            Auravision Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Aztech">
            <summary>
            Aztech Labs, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Canopus">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Cat">
            <summary>
            Computer Aided Technology, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Compusic">
            <summary>
            Compusic.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.ComputerFriends">
            <summary>
            Computer Friends, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Controlres">
            <summary>
            Control Resources Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Creative">
            <summary>
            Creative Labs, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Dialogic">
            <summary>
            Dialogic Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Dolby">
            <summary>
            Dolby Laboratories, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.DspGroup">
            <summary>
            DSP Group, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.DspSolutions">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Echo">
            <summary>
            Echo Speech Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Epson">
            <summary>
            Seiko Epson Corporation, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ess">
            <summary>
            ESS Technology, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Everex">
            <summary>
            Everex Systems, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Exan">
            <summary>
            EXAN, Ltd.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Fujitsu">
            <summary>
            Fujitsu, Ltd.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Gravis">
            <summary>
            Advanced Gravis Computer Technology, Ltd.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ibm">
            <summary>
            International Business Machines.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.IclPs">
            <summary>
            ICL Personal Systems.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ics">
            <summary>
            Integrated Circuit Systems, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Intel">
            <summary>
            Intel Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Interactive">
            <summary>
            InterActive, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Iomagic">
            <summary>
            I/O Magic Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Iteratedsys">
            <summary>
            Iterated Systems, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Korg">
            <summary>
            Toshihiko Okuhura, Korg, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Logitech">
            <summary>
            Logitech, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Lyrrus">
            <summary>
            Lyrrus, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Matsushita">
            <summary>
            Matsushita Electric Corporation of America.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Mediavision">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Melabs">
            <summary>
            microEngineering Labs.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Metheus">
            <summary>
            Metheus Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Microsoft">
            <summary>
            Microsoft Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Moscom">
            <summary>
            MOSCOM Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Motorola">
            <summary>
            Motorola, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Ncr">
            <summary>
            NCR Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Nec">
            <summary>
            NEC Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Newmedia">
            <summary>
            New Media Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Nms">
            <summary>
            Natural MicroSystems Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Oki">
            <summary>
            OKI.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Olivetti">
            <summary>
            Ing. C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Opti">
            <summary>
            OPTi, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Roland">
            <summary>
            Roland Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Scalacs">
            <summary>
            SCALACS.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Sierra">
            <summary>
            Sierra Semiconductor Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Siliconsoft">
            <summary>
            Silicon Software, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Sonicfoundry">
            <summary>
            Sonic Foundry.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Speechcomp">
            <summary>
            Speech Compression.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Supermac">
            <summary>
            Supermac Technology, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Tandy">
            <summary>
            Tandy Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Truevision">
            <summary>
            Truevision, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.TurtleBeach">
            <summary>
            Turtle Beach Systems.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Val">
            <summary>
            Video Associates Labs, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Videologic">
            <summary>
            VideoLogic, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Vitec">
            <summary>
            Visual Information Technologies, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Vocaltec">
            <summary>
            VocalTec, Inc.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Voyetra">
            <summary>
            Voyetra Technologies.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Wanglabs">
            <summary>
            Wang Laboratories.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Willowpond">
            <summary>
            Willow Pond Corporation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Winnov">
            <summary>
            Winnov, LP.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Yamaha">
            <summary>
            Yamaha Corporation of America.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Manufacturer.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.MidiDevice">
            <summary>
            Represents a MIDI device.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.MidiDevice.ErrorOccurred">
            <summary>
            Occurs when an error occurred on device (for example, during MIDI events parsing).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.MidiDevice._handle">
            <summary>
            Device handle.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.MidiDevice._disposed">
            <summary>
            Flag to detect redundant disposing.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.Finalize">
            <summary>
            Finalizes the current instance of the MIDI device class.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiDevice.Id">
            <summary>
            Gets the ID of a MIDI device.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiDevice.Name">
            <summary>
            Gets the name of MIDI device.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiDevice.DriverManufacturer">
            <summary>
            Gets the manufacturer of MIDI device driver.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiDevice.ProductIdentifier">
            <summary>
            Gets the product identifier of MIDI device.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiDevice.DriverVersion">
            <summary>
            Gets the version of MIDI device driver.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.SetBasicDeviceInformation(System.UInt16,System.UInt16,System.UInt32,System.String)">
            <summary>
            Sets the basic information about MIDI device, such as name and driver details.
            </summary>
            <param name="manufacturerIdentifier">Identifier of the manufacturer of MIDI device driver.</param>
            <param name="productIdentifier">Product identifier of MIDI device.</param>
            <param name="driverVersion">Version of MIDI device driver.</param>
            <param name="name">Name of MIDI device</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.EnsureDeviceIsNotDisposed">
            <summary>
            Checks that current instance of MIDI device class is not disposed and throws
            <see cref="T:System.ObjectDisposedException"/> if not.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Current instance of MIDI device class is disposed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.ProcessMmResult(System.UInt32)">
            <summary>
            Processes MMRESULT which is return value of winmm functions.
            </summary>
            <param name="mmResult">MMRESULT which is return value of winmm function.</param>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException"><paramref name="mmResult"/> represents error code.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.OnError(System.Exception)">
            <summary>
            Raises <see cref="E:Melanchall.DryWetMidi.Devices.MidiDevice.ErrorOccurred"/> event.
            </summary>
            <param name="exception">An exception that represents error occurred.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.GetErrorText(System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Gets error description for the specified MMRESULT which is return value of winmm function.
            </summary>
            <param name="mmrError">MMRESULT which is return value of winmm function.</param>
            <param name="pszText"><see cref="T:System.Text.StringBuilder"/> to write error description to.</param>
            <param name="cchText">Size of <paramref name="pszText"/> buffer.</param>
            <returns>Return value of winmm function which gets error description.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.WriteBytesToStream(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Writes bytes to <see cref="T:System.IO.MemoryStream"/> and returns position of the stream to its beginning.
            </summary>
            <param name="memoryStream"><see cref="T:System.IO.MemoryStream"/> to write bytes to.</param>
            <param name="bytes">Bytes to write to <paramref name="memoryStream"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.Dispose">
            <summary>
            Releases all resources used by the MIDI device class instance.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDevice.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MIDI device class and optionally releases
            the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to
            release only unmanaged resources.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">
            <summary>
            The exception that is thrown when an error occurred on a MIDI device.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.MidiDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException"/> class with the
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.MidiEventSentEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Devices.OutputDevice.EventSent"/> event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.MidiEventSentEventArgs.Event">
            <summary>
            Gets MIDI event sent to <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.OutputDevice">
            <summary>
            Represents an output MIDI device.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.OutputDevice.EventSent">
            <summary>
            Occurs when a MIDI event is sent.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.Finalize">
            <summary>
            Finalizes the current instance of the <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.DeviceType">
            <summary>
            Gets the type of the current <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.VoicesNumber">
            <summary>
            Gets the number of voices supported by an internal synthesizer device. If the device is a port,
            this member is not meaningful and will be 0.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.NotesNumber">
            <summary>
            Gets the maximum number of simultaneous notes that can be played by an internal synthesizer device.
            If the device is a port, this member is not meaningful and will be 0.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.Channels">
            <summary>
            Gets the channels that an internal synthesizer device responds to.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.SupportsPatchCaching">
            <summary>
            Gets a value indicating whether device supports patch caching.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.SupportsLeftRightVolumeControl">
            <summary>
            Gets a value indicating whether device supports separate left and right volume control or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.SupportsVolumeControl">
            <summary>
            Gets a value indicating whether device supports volume control.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.OutputDevice.Volume">
            <summary>
            Gets or sets the volume of the output MIDI device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/> is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Device doesn't support volume control.</exception>
            <exception cref="T:System.ArgumentException">Device doesn't support separate volume control for each channel.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.SendEvent(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Send a MIDI event to the current <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/>.
            </summary>
            <param name="midiEvent">MIDI event to send.</param>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/> is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvent"/> is null.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.TurnAllNotesOff">
            <summary>
            Turns off all notes that were turned on by sending Note On events, and which haven't
            yet been turned off by respective Note Off events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.OutputDevice"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.PrepareForEventsSending">
            <summary>
            Prepares output MIDI device for sending events to it allocating necessary
            resources.
            </summary>
            <remarks>It is not needed to call this method before actual MIDI data
            sending since first call of <see cref="M:Melanchall.DryWetMidi.Devices.OutputDevice.SendEvent(Melanchall.DryWetMidi.Smf.MidiEvent)"/> will prepare
            the device automatically. But it can take some time so you may decide
            to call <see cref="M:Melanchall.DryWetMidi.Devices.OutputDevice.PrepareForEventsSending"/> before working with device.</remarks>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetDevicesCount">
            <summary>
            Retrieves the number of output MIDI devices presented in the system.
            </summary>
            <returns>Number of output MIDI devices presented in the system.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetAll">
            <summary>
            Retrieves all output MIDI devices presented in the system.
            </summary>
            <returns>All output MIDI devices presented in the system.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetByName(System.String)">
            <summary>
            Retrieves a first output MIDI device with the specified name.
            </summary>
            <param name="name">The name of an output MIDI device to retrieve.</param>
            <returns>Output MIDI device with the specified name.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or contains white-spaces only. -or-
            <paramref name="name"/> specifies an output MIDI device which is not presented in the system.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetById(System.Int32)">
            <summary>
            Retrieves output MIDI device with the specified ID.
            </summary>
            <param name="id">Device ID which is number from 0 to <see cref="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetDevicesCount"/> minus 1.</param>
            <returns>Output MIDI device with the specified ID.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.GetErrorText(System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Gets error description for the specified MMRESULT which is return value of winmm function.
            </summary>
            <param name="mmrError">MMRESULT which is return value of winmm function.</param>
            <param name="pszText"><see cref="T:System.Text.StringBuilder"/> to write error description to.</param>
            <param name="cchText">Size of <paramref name="pszText"/> buffer.</param>
            <returns>Return value of winmm function which gets error description.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.OutputDevice.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MIDI device class and optionally releases
            the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to
            release only unmanaged resources.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.OutputDeviceType">
            <summary>
            Type of an output MIDI device.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.MidiPort">
            <summary>
            MIDI hardware port.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.Synth">
            <summary>
            Synthesizer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.SquareWaveSynth">
            <summary>
            Square wave synthesizer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.FmSynth">
            <summary>
            FM synthesizer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.MidiMapper">
            <summary>
            Microsoft MIDI mapper.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.WavetableSynth">
            <summary>
            Hardware wavetable synthesizer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.OutputDeviceType.SoftwareSynth">
            <summary>
            Software synthesizer.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.Volume">
            <summary>
            Holds volume value for an output MIDI device.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Volume.Zero">
            <summary>
            Zero volume.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Volume.FullLeft">
            <summary>
            Maximum volume on left channel and muted right one.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Devices.Volume.FullRight">
            <summary>
            Maximum volume on right channel and muted left one.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> with specified value which
            will be applied to both left and right channels.
            </summary>
            <param name="volume">Value of the volume.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> with specified separate
            values for left and right channels.
            </summary>
            <param name="leftVolume">Value of the volume for the left channel.</param>
            <param name="rightVolume">Value of the volume for the right channel.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Volume.LeftVolume">
            <summary>
            Gets value of the volume for the left channel.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Volume.RightVolume">
            <summary>
            Gets value of the volume for the right channel.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.Right(System.UInt16)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> which mutes the left channel
            and sets specified volume for the right one.
            </summary>
            <param name="volume">Value of the volume for the right channel.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> which mutes the left channel
            and sets <paramref name="volume"/> for the right one.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.Left(System.UInt16)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> which mutes the right channel
            and sets specified volume for the left one.
            </summary>
            <param name="volume">Value of the volume for the left channel.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Volume"/> which mutes the right channel
            and sets <paramref name="volume"/> for the left one.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Volume.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.NotesEventArgs">
            <summary>
            Holds notes collection for <see cref="E:Melanchall.DryWetMidi.Devices.Playback.NotesPlaybackStarted"/> and
            <see cref="E:Melanchall.DryWetMidi.Devices.Playback.NotesPlaybackFinished"/>
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.NotesEventArgs.Notes">
            <summary>
            Gets notes collection that started or finished to play by a <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.Playback">
            <summary>
            Provides a way to play MIDI data through the specified output MIDI device.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Playback.Started">
            <summary>
            Occurs when playback started via <see cref="M:Melanchall.DryWetMidi.Devices.Playback.Start"/> or <see cref="M:Melanchall.DryWetMidi.Devices.Playback.Play"/> methods.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Playback.Stopped">
            <summary>
            Occurs when playback stopped via <see cref="M:Melanchall.DryWetMidi.Devices.Playback.Stop"/> method.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Playback.Finished">
            <summary>
            Occurs when playback finished, i.e. last event has been played and no
            need to restart playback due to value of the <see cref="P:Melanchall.DryWetMidi.Devices.Playback.Loop"/>.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Playback.NotesPlaybackStarted">
            <summary>
            Occurs when notes started to play. It will raised if playback's cursor
            gets in to notes.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Playback.NotesPlaybackFinished">
            <summary>
            Occurs when notes finished to play. It will raised if playback's cursor
            gets out from notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of MIDI events and tempo map.
            </summary>
            <param name="events">Collection of MIDI events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of MIDI events, tempo map and output MIDI device to play events through.
            </summary>
            <param name="events">Collection of MIDI events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="events"/> through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent}},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of MIDI events collections and tempo map.
            </summary>
            <param name="events">Collection of MIDI events collections to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent}},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of MIDI events collections, tempo map and output MIDI device to play events through.
            </summary>
            <param name="events">Collection of MIDI events collections to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="events"/> through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.ITimedObject},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of timed objects and tempo map.
            </summary>
            <param name="timedObjects">Collection of timed objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="timedObjects"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.ITimedObject},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with the specified
            collection of timed objects, tempo map and output MIDI device to play events through.
            </summary>
            <param name="timedObjects">Collection of timed objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="timedObjects"/> through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="timedObjects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.Finalize">
            <summary>
            Finalizes the current instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.TempoMap">
            <summary>
            Gets the tempo map used to calculate events times.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.OutputDevice">
            <summary>
            Gets or sets the output MIDI device to play MIDI data through.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.IsRunning">
            <summary>
            Gets a value indicating whether playing is currently running or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.Loop">
            <summary>
            Gets or sets a value indicating whether playing should automatically start
            from the first event after the last one played.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.InterruptNotesOnStop">
            <summary>
            Gets or sets a value indicating whether currently playing notes must be stopped
            on playback stop or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.TrackNotes">
            <summary>
            Gets or sets a value indicating whether notes must be tracked or not. If false, notes
            will be treated as just Note On/Note Off events.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.Speed">
            <summary>
            Gets or sets the speed of events playing. 1 means normal speed. For example, to play
            events twice slower this property should be set to 0.5.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is zero or negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Playback.Snapping">
            <summary>
            Gets an object to manage playback's snap points.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.GetDuration(Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Retrieves the duration of the playback in the specified format.
            </summary>
            <param name="durationType">Type that will represent the duration.</param>
            <returns>The duration of the playback as an instance of time span defined by
            <paramref name="durationType"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="durationType"/>
            specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.GetDuration``1">
            <summary>
            Retrieves the duration of the playback in the specified format.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the duration.</typeparam>
            <returns>The duration of the playback as an instance of
            <typeparamref name="TTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.GetCurrentTime(Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Retrieves the current time of the playback in the specified format.
            </summary>
            <param name="timeType">Type that will represent the current time.</param>
            <returns>The current time of the playback as an instance of time span defined by
            <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.GetCurrentTime``1">
            <summary>
            Retrieves the current time of the playback in the specified format.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the current time.</typeparam>
            <returns>The current time of the playback as an instance of
            <typeparamref name="TTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.Start">
            <summary>
            Starts playing of the MIDI data. This method is non-blocking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.Stop">
            <summary>
            Stops playing of the MIDI data. Note that this method doesn't reset playback position. If you
            call <see cref="M:Melanchall.DryWetMidi.Devices.Playback.Start"/>, playing will be resumed from the point where <see cref="M:Melanchall.DryWetMidi.Devices.Playback.Stop"/> was called.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.Play">
            <summary>
            Starts playing of the MIDI data. This method will block execution of a program until all
            MIDI data is played.
            </summary>
            <remarks>
            If <see cref="P:Melanchall.DryWetMidi.Devices.Playback.Loop"/> is set to true, this method will execute forever.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToSnapPoint(Melanchall.DryWetMidi.Devices.SnapPoint)">
            <summary>
            Sets playback position to the time of the specified snap point.
            </summary>
            <param name="snapPoint">Snap point to move to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapPoint"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToPreviousSnapPoint(Melanchall.DryWetMidi.Devices.SnapPointsGroup)">
            <summary>
            Sets playback position to the time of the previous snap point (relative to the current
            time of playback) that belongs to the specified <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/>.
            </summary>
            <param name="snapPointsGroup"><see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/> that defines snap points to
            select the one from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapPointsGroup"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToPreviousSnapPoint">
            <summary>
            Sets playback position to the time of the previous snap point (relative to the current
            time of playback).
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToNextSnapPoint(Melanchall.DryWetMidi.Devices.SnapPointsGroup)">
            <summary>
            Sets playback position to the time of the next snap point (relative to the current
            time of playback) that belongs to the specified <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/>.
            </summary>
            <param name="snapPointsGroup"><see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/> that defines snap points to
            select the one from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapPointsGroup"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToNextSnapPoint">
            <summary>
            Sets playback position to the time of the next snap point (relative to the current
            time of playback).
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToStart">
            <summary>
            Sets playback position to the beginning of the MIDI data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveToTime(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Sets playback position to the specified time from the beginning of the MIDI data.
            </summary>
            <param name="time">Time from the beginning of the MIDI data to set playback position to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveForward(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Shifts playback position forward by the specified step.
            </summary>
            <param name="step">Amount of time to shift playback position by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.MoveBack(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Shifts playback position back by the specified step.
            </summary>
            <param name="step">Amount of time to shift playback position by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Devices.MidiDeviceException">An error occurred on device.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Playback.Dispose">
            <summary>
            Releases all resources used by the current <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.PlaybackEventCallback">
            <summary>
            Callback used to modify MIDI event before playing.
            </summary>
            <param name="midiEvent">MIDI event to modify.</param>
            <param name="time">Absolute metric time of the event.</param>
            <param name="rawTime">Absolute time of the event in MIDI ticks.</param>
            <returns>MIDI event that should be played. It can be modified original event or a new one.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.PlaybackUtilities">
            <summary>
            Contains methods to play MIDI data and retrieving an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>
            which provides advanced features for MIDI data playing.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="trackChunks"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="trackChunks"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing events to play.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing events to play.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events contained in
            the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.Interaction.Pattern,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Common.FourBitNumber,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events that will be
            produced by specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.
            </summary>
            <param name="pattern"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> producing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="channel">MIDI channel to play channel events on.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events that will be
            produced by the <paramref name="pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback(Melanchall.DryWetMidi.Smf.Interaction.Pattern,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events that will be
            produced by specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.
            </summary>
            <param name="pattern"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> producing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="channel">MIDI channel to play channel events on.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing MIDI events that will be
            produced by the <paramref name="pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing musical objects using
            the specified program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="programNumber">Program that should be used to play <paramref name="objects"/>.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Standards.GeneralMidiProgram)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing musical objects using
            the specified General MIDI 1 program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="generalMidiProgram">Program that should be used to play <paramref name="objects"/>.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="generalMidiProgram"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.GetPlayback``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Standards.GeneralMidi2Program)">
            <summary>
            Retrieves an instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing musical objects using
            the specified General MIDI 2 program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="generalMidi2Program">Program that should be used to play <paramref name="objects"/>.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> for playing <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="generalMidi2Program"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Plays MIDI events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Plays MIDI events contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Plays MIDI events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing events to play.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play(Melanchall.DryWetMidi.Smf.Interaction.Pattern,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Common.FourBitNumber,Melanchall.DryWetMidi.Devices.OutputDevice)">
            <summary>
            Plays MIDI events that will be produced by specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.
            </summary>
            <param name="pattern"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> producing events to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="channel">MIDI channel to play channel events on.</param>
            <param name="outputDevice">Output MIDI device to play events through.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Plays musical objects using the specified program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="programNumber">Program that should be used to play <paramref name="objects"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Standards.GeneralMidiProgram)">
            <summary>
            Plays musical objects using the specified General MIDI 1 program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="generalMidiProgram">Program that should be used to play <paramref name="objects"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="generalMidiProgram"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackUtilities.Play``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.OutputDevice,Melanchall.DryWetMidi.Standards.GeneralMidi2Program)">
            <summary>
            Plays musical objects using the specified General MIDI 2 program.
            </summary>
            <typeparam name="TObject">The type of objects to play.</typeparam>
            <param name="objects">Objects to play.</param>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="outputDevice">Output MIDI device to play <paramref name="objects"/> through.</param>
            <param name="generalMidi2Program">Program that should be used to play <paramref name="objects"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- <paramref name="outputDevice"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="generalMidi2Program"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.PlaybackSnapping">
            <summary>
            Provides a way to manage snap points for <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.PlaybackSnapping.SnapPoints">
            <summary>
            Gets all snap points.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.AddSnapPoint``1(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,``0)">
            <summary>
            Adds a snap point with the specified data at given time.
            </summary>
            <typeparam name="TData">Type of data that will be attached to a snap point.</typeparam>
            <param name="time">Time to add snap point at.</param>
            <param name="data">Data to attach to snap point.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint`1"/> representing a snap point
            with <paramref name="data"/> at <paramref name="time"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.AddSnapPoint(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a snap point at the specified time.
            </summary>
            <param name="time">Time to add snap point at.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint`1"/> representing a snap point
            at <paramref name="time"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.RemoveSnapPoint``1(Melanchall.DryWetMidi.Devices.SnapPoint{``0})">
            <summary>
            Removes a snap point.
            </summary>
            <typeparam name="TData">Type of data attached to <paramref name="snapPoint"/>.</typeparam>
            <param name="snapPoint">Snap point to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="snapPoint"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.RemoveSnapPointsByData``1(System.Predicate{``0})">
            <summary>
            Removes all snap points that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="TData">Type of data attached to snap points to remove.</typeparam>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions
            of snap points to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.SnapToGrid(Melanchall.DryWetMidi.Smf.Interaction.IGrid)">
            <summary>
            Adds snap points at times defined by the specified grid.
            </summary>
            <param name="grid">The grid that defines times to add snap points to.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/> added snap points belong to.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="grid"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.SnapToNotesStarts">
            <summary>
            Adds snap points at start times of notes.
            </summary>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/> added snap points belong to.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.PlaybackSnapping.SnapToNotesEnds">
            <summary>
            Adds snap points at end times of notes.
            </summary>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/> added snap points belong to.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.SnapPoint">
            <summary>
            Snap point for <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.SnapPoint.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the current <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint"/>
            is enabled or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.SnapPoint.Time">
            <summary>
            Gets the time of the current <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.SnapPoint.SnapPointsGroup">
            <summary>
            Gets an instance of the <see cref="P:Melanchall.DryWetMidi.Devices.SnapPoint.SnapPointsGroup"/> the current <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint"/>
            belongs to.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.SnapPoint`1">
            <summary>
            Snap point for <see cref="T:Melanchall.DryWetMidi.Devices.Playback"/> with attached data.
            </summary>
            <typeparam name="TData">The type of data attached to snap point.</typeparam>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.SnapPoint`1.Data">
            <summary>
            Gets the data attached to the current <see cref="T:Melanchall.DryWetMidi.Devices.SnapPoint`1"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup">
            <summary>
            Represents a group of snap points.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.SnapPointsGroup.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the current <see cref="T:Melanchall.DryWetMidi.Devices.SnapPointsGroup"/>
            is enabled or not.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.Recording">
            <summary>
            Provides a way to record MIDI data received by an input MIDI device.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Recording.Started">
            <summary>
            Occurs when recording started via <see cref="M:Melanchall.DryWetMidi.Devices.Recording.Start"/> method.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Devices.Recording.Stopped">
            <summary>
            Occurs when recording stopped via <see cref="M:Melanchall.DryWetMidi.Devices.Recording.Stop"/> method.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.#ctor(Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Devices.InputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/> with the specified
            tempo map and input MIDI device to capture MIDI data from.
            </summary>
            <param name="tempoMap">Tempo map used to calculate events times.</param>
            <param name="inputDevice">Input MIDI device to capture MIDI data from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null. -or-
            <paramref name="inputDevice"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Recording.TempoMap">
            <summary>
            Gets the tempo map used to calculate recorded events times.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Recording.InputDevice">
            <summary>
            Gets the input MIDI device to record MIDI data from.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Devices.Recording.IsRunning">
            <summary>
            Gets a value indicating whether recording is currently running or not.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.GetDuration(Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Retrieves the duration of the recording in the specified format.
            </summary>
            <param name="durationType">Type that will represent the duration.</param>
            <returns>The duration of the recording as an instance of time span defined by
            <paramref name="durationType"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="durationType"/>
            specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.GetDuration``1">
            <summary>
            Retrieves the duration of the recording in the specified format.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the duration.</typeparam>
            <returns>The duration of the recording as an instance of
            <typeparamref name="TTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.GetEvents">
            <summary>
            Gets MIDI events recorded by the current <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/>.
            </summary>
            <returns>MIDI events recorded by the current <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.Start">
            <summary>
            Starts MIDI data recording.
            </summary>
            <exception cref="T:System.InvalidOperationException">Input device is not listening for MIDI events.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.Stop">
            <summary>
            Stops MIDI data recording. Note that this method doesn't reset the recording time. If you
            call <see cref="M:Melanchall.DryWetMidi.Devices.Recording.Start"/>, recording will be resumed from the point where <see cref="M:Melanchall.DryWetMidi.Devices.Recording.Stop"/> was called.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.Recording.Dispose">
            <summary>
            Releases all resources used by the current <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Devices.RecordingUtilities">
            <summary>
            Contains methods to manipulate by recording of MIDI data.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.RecordingUtilities.ToTrackChunk(Melanchall.DryWetMidi.Devices.Recording)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> and places recorded events to it.
            </summary>
            <param name="recording"><see cref="T:Melanchall.DryWetMidi.Devices.Recording"/> to place events to <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> from.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> with events recorded with <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="recording"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recording"/> is in progress.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Devices.RecordingUtilities.ToFile(Melanchall.DryWetMidi.Devices.Recording)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> and places recorded events to it.
            </summary>
            <param name="recording"><see cref="T:Melanchall.DryWetMidi.Devices.Recording"/> to place events to <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> from.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> with events recorded with <see cref="T:Melanchall.DryWetMidi.Devices.Recording"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="recording"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recording"/> is in progress.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.Notes">
            <summary>
            Contains all available MIDI notes.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CMinus1">
            <summary>
            C-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharpMinus1">
            <summary>
            C#-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DMinus1">
            <summary>
            D-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharpMinus1">
            <summary>
            D#-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.EMinus1">
            <summary>
            E-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FMinus1">
            <summary>
            F-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharpMinus1">
            <summary>
            F#-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GMinus1">
            <summary>
            G-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharpMinus1">
            <summary>
            G#-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.AMinus1">
            <summary>
            A-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharpMinus1">
            <summary>
            A#-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.BMinus1">
            <summary>
            B-1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C0">
            <summary>
            C0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp0">
            <summary>
            C#0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D0">
            <summary>
            D0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp0">
            <summary>
            D#0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E0">
            <summary>
            E0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F0">
            <summary>
            F0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp0">
            <summary>
            F#0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G0">
            <summary>
            G0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp0">
            <summary>
            G#0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A0">
            <summary>
            A0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp0">
            <summary>
            A#0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B0">
            <summary>
            B0 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C1">
            <summary>
            C1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp1">
            <summary>
            C#1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D1">
            <summary>
            D1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp1">
            <summary>
            D#1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E1">
            <summary>
            E1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F1">
            <summary>
            F1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp1">
            <summary>
            F#1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G1">
            <summary>
            G1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp1">
            <summary>
            G#1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A1">
            <summary>
            A1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp1">
            <summary>
            A#1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B1">
            <summary>
            B1 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C2">
            <summary>
            C2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp2">
            <summary>
            C#2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D2">
            <summary>
            D2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp2">
            <summary>
            D#2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E2">
            <summary>
            E2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F2">
            <summary>
            F2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp2">
            <summary>
            F#2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G2">
            <summary>
            G2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp2">
            <summary>
            G#2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A2">
            <summary>
            A2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp2">
            <summary>
            A#2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B2">
            <summary>
            B2 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C3">
            <summary>
            C3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp3">
            <summary>
            C#3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D3">
            <summary>
            D3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp3">
            <summary>
            D#3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E3">
            <summary>
            E3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F3">
            <summary>
            F3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp3">
            <summary>
            F#3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G3">
            <summary>
            G3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp3">
            <summary>
            G#3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A3">
            <summary>
            A3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp3">
            <summary>
            A#3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B3">
            <summary>
            B3 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C4">
            <summary>
            C4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp4">
            <summary>
            C#4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D4">
            <summary>
            D4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp4">
            <summary>
            D#4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E4">
            <summary>
            E4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F4">
            <summary>
            F4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp4">
            <summary>
            F#4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G4">
            <summary>
            G4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp4">
            <summary>
            G#4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A4">
            <summary>
            A4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp4">
            <summary>
            A#4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B4">
            <summary>
            B4 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C5">
            <summary>
            C5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp5">
            <summary>
            C#5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D5">
            <summary>
            D5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp5">
            <summary>
            D#5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E5">
            <summary>
            E5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F5">
            <summary>
            F5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp5">
            <summary>
            F#5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G5">
            <summary>
            G5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp5">
            <summary>
            G#5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A5">
            <summary>
            A5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp5">
            <summary>
            A#5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B5">
            <summary>
            B5 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C6">
            <summary>
            C6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp6">
            <summary>
            C#6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D6">
            <summary>
            D6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp6">
            <summary>
            D#6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E6">
            <summary>
            E6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F6">
            <summary>
            F6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp6">
            <summary>
            F#6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G6">
            <summary>
            G6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp6">
            <summary>
            G#6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A6">
            <summary>
            A6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp6">
            <summary>
            A#6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B6">
            <summary>
            B6 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C7">
            <summary>
            C7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp7">
            <summary>
            C#7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D7">
            <summary>
            D7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp7">
            <summary>
            D#7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E7">
            <summary>
            E7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F7">
            <summary>
            F7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp7">
            <summary>
            F#7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G7">
            <summary>
            G7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp7">
            <summary>
            G#7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A7">
            <summary>
            A7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp7">
            <summary>
            A#7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B7">
            <summary>
            B7 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C8">
            <summary>
            C8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp8">
            <summary>
            C#8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D8">
            <summary>
            D8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp8">
            <summary>
            D#8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E8">
            <summary>
            E8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F8">
            <summary>
            F8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp8">
            <summary>
            F#8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G8">
            <summary>
            G8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.GSharp8">
            <summary>
            G#8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.A8">
            <summary>
            A8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.ASharp8">
            <summary>
            A#8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.B8">
            <summary>
            B8 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.C9">
            <summary>
            C9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.CSharp9">
            <summary>
            C#9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.D9">
            <summary>
            D9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.DSharp9">
            <summary>
            D#9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.E9">
            <summary>
            E9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.F9">
            <summary>
            F9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.FSharp9">
            <summary>
            F#9 note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Notes.G9">
            <summary>
            G9 note.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.NoteUtilities">
            <summary>
            Provides utilities for working with the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.NoteUtilities.GetNoteName(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Gets name of the note presented by note number.
            </summary>
            <param name="noteNumber">Note number to get note name of.</param>
            <returns>Name of the note presented by <paramref name="noteNumber"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.NoteUtilities.GetNoteOctave(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Gets octave number of the note presented by note number in scientific pitch notation.
            </summary>
            <param name="noteNumber">Note number to get octave of.</param>
            <returns>Octave of the note presented by <paramref name="noteNumber"/>.</returns>
            <remarks>
            Octave number will be returned in scientific pitch notation which means
            that 4 will be returned for 60 note number.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.NoteUtilities.GetNoteNumber(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32)">
            <summary>
            Gets the note number for the specified note name and octave.
            </summary>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave in scientific pitch notation.</param>
            <returns>Number of the note represented by specified name and octave.</returns>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the number of the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.Scale">
            <summary>
            Represents a musical scale.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.NoteName)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> with the
            specified intervals and root note.
            </summary>
            <param name="intervals">Intervals between adjacent notes of the scale.</param>
            <param name="rootNote">Root note (tonic) of the scale.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rootNote"/> specified an
            invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Scale.Intervals">
            <summary>
            Gets inetrvals between adjacent notes of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Scale.RootNote">
            <summary>
            Gets root note (tonic) of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.TryParse(System.String,Melanchall.DryWetMidi.MusicTheory.Scale@)">
            <summary>
            Converts the string representation of a musical scale to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a scale to convert.</param>
            <param name="scale">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/>
            equivalent of the musical scale contained in <paramref name="input"/>, if the conversion succeeded,
            or null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.Parse(System.String)">
            <summary>
            Converts the string representation of a musical scale to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent.
            </summary>
            <param name="input">A string containing a scale to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent to the musical scale contained in <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.op_Equality(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Scale)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> objects are equal.
            </summary>
            <param name="scale1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to compare.</param>
            <param name="scale2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to compare.</param>
            <returns>true if the scales are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.op_Inequality(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Scale)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> objects are not equal.
            </summary>
            <param name="scale1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to compare.</param>
            <param name="scale2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to compare.</param>
            <returns>false if the scales are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Scale.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.ScaleDegree">
            <summary>
            Represents specific note (degree) of a musical scale.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Tonic">
            <summary>
            Tonic of a musical scale (1st degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Supertonic">
            <summary>
            Supertonic of a musical scale (2nd degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Mediant">
            <summary>
            Mediant of a musical scale (3rd degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Subdominant">
            <summary>
            Subdominant of a musical scale (4th degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Dominant">
            <summary>
            Dominant of a musical scale (5th degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.Submediant">
            <summary>
            Submediant of a musical scale (6th degree).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleDegree.LeadingTone">
            <summary>
            Leading tone of a musical scale (7th degree).
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals">
            <summary>
            Provides intervals sequences for known musical scales.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Aeolian">
            <summary>
            'Aeolian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Altered">
            <summary>
            'Altered' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Arabian">
            <summary>
            'Arabian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Augmented">
            <summary>
            'Augmented' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.AugmentedHeptatonic">
            <summary>
            'Augmented Heptatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Balinese">
            <summary>
            'Balinese' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Bebop">
            <summary>
            'Bebop' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.BebopDominant">
            <summary>
            'Bebop Dominant' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.BebopLocrian">
            <summary>
            'Bebop Locrian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.BebopMajor">
            <summary>
            'Bebop Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.BebopMinor">
            <summary>
            'Bebop Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Blues">
            <summary>
            'Blues' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Chinese">
            <summary>
            'Chinese' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Chromatic">
            <summary>
            'Chromatic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.CompositeBlues">
            <summary>
            'Composite Blues' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Diminished">
            <summary>
            'Diminished' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.DiminishedWholeTone">
            <summary>
            'Diminished Whole Tone' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Dominant">
            <summary>
            'Dominant' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Dorian">
            <summary>
            'Dorian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Dorian4">
            <summary>
            'Dorian #4' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.DorianB2">
            <summary>
            'Dorian b2' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.DoubleHarmonicLydian">
            <summary>
            'Double Harmonic Lydian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.DoubleHarmonicMajor">
            <summary>
            'Double Harmonic Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Egyptian">
            <summary>
            'Egyptian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Enigmatic">
            <summary>
            'Enigmatic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Flamenco">
            <summary>
            'Flamenco' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.FlatSixPentatonic">
            <summary>
            'Flat Six Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.FlatThreePentatonic">
            <summary>
            'Flat Three Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Gypsy">
            <summary>
            'Gypsy' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.HarmonicMajor">
            <summary>
            'Harmonic Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.HarmonicMinor">
            <summary>
            'Harmonic Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Hindu">
            <summary>
            'Hindu' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Hirajoshi">
            <summary>
            'Hirajoshi' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.HungarianMajor">
            <summary>
            'Hungarian Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.HungarianMinor">
            <summary>
            'Hungarian Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Ichikosucho">
            <summary>
            'Ichikosucho' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.InSen">
            <summary>
            'In-Sen' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Indian">
            <summary>
            'Indian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Ionian">
            <summary>
            'Ionian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.IonianAugmented">
            <summary>
            'Ionian Augmented' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.IonianPentatonic">
            <summary>
            'Ionian Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Iwato">
            <summary>
            'Iwato' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.KafiRaga">
            <summary>
            'Kafi Raga' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Kumoi">
            <summary>
            'Kumoi' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Kumoijoshi">
            <summary>
            'Kumoijoshi' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LeadingWholeTone">
            <summary>
            'Leading Whole Tone' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Locrian">
            <summary>
            'Locrian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Locrian2">
            <summary>
            'Locrian #2' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LocrianMajor">
            <summary>
            'Locrian Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LocrianPentatonic">
            <summary>
            'Locrian Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Lydian">
            <summary>
            'Lydian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Lydian5PPentatonic">
            <summary>
            'Lydian #5P Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Lydian9">
            <summary>
            'Lydian #9' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianAugmented">
            <summary>
            'Lydian Augmented' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianB7">
            <summary>
            'Lydian b7' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianDiminished">
            <summary>
            'Lydian Diminished' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianDominant">
            <summary>
            'Lydian Dominant' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianDominantPentatonic">
            <summary>
            'Lydian Dominant Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianMinor">
            <summary>
            'Lydian Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.LydianPentatonic">
            <summary>
            'Lydian Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Major">
            <summary>
            'Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MajorBlues">
            <summary>
            'Major Blues' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MajorFlatTwoPentatonic">
            <summary>
            'Major Flat Two Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MajorPentatonic">
            <summary>
            'Major Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MalkosRaga">
            <summary>
            'Malkos Raga' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MelodicMinor">
            <summary>
            'Melodic Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MelodicMinorFifthMode">
            <summary>
            'Melodic Minor Fifth Mode' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MelodicMinorSecondMode">
            <summary>
            'Melodic Minor Second Mode' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Minor">
            <summary>
            'Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Minor7MPentatonic">
            <summary>
            'Minor #7M Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorBebop">
            <summary>
            'Minor Bebop' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorBlues">
            <summary>
            'Minor Blues' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorHexatonic">
            <summary>
            'Minor Hexatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorPentatonic">
            <summary>
            'Minor Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorSevenFlatFivePentatonic">
            <summary>
            'Minor Seven Flat Five Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorSixDiminished">
            <summary>
            'Minor Six Diminished' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MinorSixPentatonic">
            <summary>
            'Minor Six Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Mixolydian">
            <summary>
            'Mixolydian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MixolydianB6M">
            <summary>
            'Mixolydian b6M' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.MixolydianPentatonic">
            <summary>
            'Mixolydian Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Mystery1">
            <summary>
            'Mystery #1' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Neopolitan">
            <summary>
            'Neopolitan' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.NeopolitanMajor">
            <summary>
            'Neopolitan Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.NeopolitanMajorPentatonic">
            <summary>
            'Neopolitan Major Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.NeopolitanMinor">
            <summary>
            'Neopolitan Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Oriental">
            <summary>
            'Oriental' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Pelog">
            <summary>
            'Pelog' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Pentatonic">
            <summary>
            'Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Persian">
            <summary>
            'Persian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Phrygian">
            <summary>
            'Phrygian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.PhrygianMajor">
            <summary>
            'Phrygian Major' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Piongio">
            <summary>
            'Piongio' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Pomeroy">
            <summary>
            'Pomeroy' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Prometheus">
            <summary>
            'Prometheus' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.PrometheusNeopolitan">
            <summary>
            'Prometheus Neopolitan' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.PurviRaga">
            <summary>
            'Purvi Raga' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Ritusen">
            <summary>
            'Ritusen' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.RomanianMinor">
            <summary>
            'Romanian Minor' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Scriabin">
            <summary>
            'Scriabin' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.SixToneSymmetric">
            <summary>
            'Six Tone Symmetric' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Spanish">
            <summary>
            'Spanish' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.SpanishHeptatonic">
            <summary>
            'Spanish Heptatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.SuperLocrian">
            <summary>
            'Super Locrian' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.SuperLocrianPentatonic">
            <summary>
            'Super Locrian Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.TodiRaga">
            <summary>
            'Todi Raga' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Vietnamese1">
            <summary>
            'Vietnamese 1' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.Vietnamese2">
            <summary>
            'Vietnamese 2' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.WholeTone">
            <summary>
            'Whole Tone' scale's intervals sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.WholeTonePentatonic">
            <summary>
            'Whole Tone Pentatonic' scale's intervals sequence.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.GetByName(System.String)">
            <summary>
            Gets musical scale's intervals sequence by the scale's name.
            </summary>
            <param name="name">The name of a scale.</param>
            <returns>Intervals sequence for the scale with the name <paramref name="name"/>; or null if
            there is no a scale with this name.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or contains white-spaces only.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities">
            <summary>
            Provides useful utilities for working with <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetDegree(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.ScaleDegree)">
            <summary>
            Gets <see cref="T:Melanchall.DryWetMidi.MusicTheory.NoteName"/> corresponding to the specified degree of a musical scale.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get degree of.</param>
            <param name="degree"><see cref="T:Melanchall.DryWetMidi.MusicTheory.ScaleDegree"/> representing a degree of the
            <paramref name="scale"/>.</param>
            <returns>The degree of the scale.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="degree"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="degree"/> is out of
            range for the <paramref name="scale"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetNotes(Melanchall.DryWetMidi.MusicTheory.Scale)">
            <summary>
            Gets all notes that belong to a musical scale.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get notes of.</param>
            <returns>Notes that belong to the <paramref name="scale"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetAscendingNotes(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Gets notes that belong to a musical scale in ascending order starting with the specified
            root note.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get notes of.</param>
            <param name="rootNote"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to start a sequence of scale's notes with.</param>
            <returns>Notes that belong to the <paramref name="scale"/> in ascending order starting with
            the <paramref name="rootNote"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null. -or-
            <paramref name="rootNote"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetDescendingNotes(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Gets notes that belong to a musical scale in descending order starting with the specified
            root note.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get notes of.</param>
            <param name="rootNote"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to start a sequence of scale's notes with.</param>
            <returns>Notes that belong to the <paramref name="scale"/> in descending order starting with
            the <paramref name="rootNote"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null. -or-
            <paramref name="rootNote"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.IsNoteInScale(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Checks if the specified note belongs to a scale or not.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to check the note.</param>
            <param name="note"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to check if it belongs to the <paramref name="scale"/>
            or not.</param>
            <returns>true if <paramref name="note"/> belongs to the <paramref name="scale"/>;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null. -or-
            <paramref name="note"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetNextNote(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Gets a note that belongs to a musical scale next to the specified note.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get the next note of.</param>
            <param name="note"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to get a note next to.</param>
            <returns>A note next to the <paramref name="note"/> that belongs to the
            <paramref name="scale"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null. -or-
            <paramref name="note"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.GetPreviousNote(Melanchall.DryWetMidi.MusicTheory.Scale,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Gets a note that belongs to a musical scale previous to the specified note.
            </summary>
            <param name="scale"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> to get the previous note of.</param>
            <param name="note"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to get a note previous to.</param>
            <returns>A note previous to the <paramref name="note"/> that belongs to the
            <paramref name="scale"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scale"/> is null. -or-
            <paramref name="note"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.Interval">
            <summary>
            Represents a musical interval in terms of half steps number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Zero">
            <summary>
            Interval of zero half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.One">
            <summary>
            Interval of one half step up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Two">
            <summary>
            Interval of two half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Three">
            <summary>
            Interval of three half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Four">
            <summary>
            Interval of four half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Five">
            <summary>
            Interval of five half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Six">
            <summary>
            Interval of six half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Seven">
            <summary>
            Interval of seven half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Eight">
            <summary>
            Interval of eight half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Nine">
            <summary>
            Interval of nine half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Ten">
            <summary>
            Interval of ten half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Eleven">
            <summary>
            Interval of eleven half steps up.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Interval.Twelve">
            <summary>
            Interval of twelve half steps up (one octave up).
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.MusicTheory.IntervalDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> with the
            specified interval and its direction.
            </summary>
            <param name="size">The size of interval as a number of half steps away.</param>
            <param name="direction">The direction of an interval (up or down).</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Interval.Size">
            <summary>
            Gets the size of interval represented by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> as a
            number of half steps away.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Interval.Direction">
            <summary>
            Gets the direction of the interval represented by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Interval.HalfSteps">
            <summary>
            Gets signed half steps number which represents an interval of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.Up">
            <summary>
            Returns upward version of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <returns>An upward version of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.Down">
            <summary>
            Returns downward version of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <returns>A downward version of the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.Get(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.MusicTheory.IntervalDirection)">
            <summary>
            Returns an <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by the specified half steps number and
            interval's direction.
            </summary>
            <param name="intervalSize">The size of an interval as a number of half steps away.</param>
            <param name="direction">The direction of an interval (up or down).</param>
            <returns>An <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> with the specified interval and direction.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.GetUp(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Returns an upward <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by the specified half steps number.
            </summary>
            <param name="intervalSize">The size of an interval as a number of half steps away.</param>
            <returns>An upward <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> with the specified interval.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.GetDown(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Returns a downward <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by the specified half steps number.
            </summary>
            <param name="intervalSize">The size of an interval as a number of half steps away.</param>
            <returns>A downward <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> with the specified interval.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.FromHalfSteps(System.Int32)">
            <summary>
            Returns an <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by the specified signed number of
            half steps where negative one means downward interval.
            </summary>
            <param name="halfSteps">The number of half steps.</param>
            <returns>An <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> represented by the <paramref name="halfSteps"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="halfSteps"/> is out of range
            (result interval is out of the [-127,127] range).</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.TryParse(System.String,Melanchall.DryWetMidi.MusicTheory.Interval@)">
            <summary>
            Converts the string representation of a musical interval to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing an interval to convert.</param>
            <param name="interval">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>
            equivalent of the musical interval contained in <paramref name="input"/>, if the conversion succeeded,
            or null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.Parse(System.String)">
            <summary>
            Converts the string representation of a musical interval to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent.
            </summary>
            <param name="input">A string containing an interval to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent to the musical interval contained in <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Implicit(Melanchall.DryWetMidi.MusicTheory.Interval)~System.Int32">
            <summary>
            Converts the value of a <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="interval"><see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> object to convert to an <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Implicit(Melanchall.DryWetMidi.Common.SevenBitNumber)~Melanchall.DryWetMidi.MusicTheory.Interval">
            <summary>
            Converts the value of a <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> to a <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval"><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> object to convert to an <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Equality(Melanchall.DryWetMidi.MusicTheory.Interval,Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects are equal.
            </summary>
            <param name="interval1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to compare.</param>
            <param name="interval2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to compare.</param>
            <returns>true if the intervals are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Inequality(Melanchall.DryWetMidi.MusicTheory.Interval,Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects are not equal.
            </summary>
            <param name="interval1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to compare.</param>
            <param name="interval2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to compare.</param>
            <returns>false if the intervals are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Addition(Melanchall.DryWetMidi.MusicTheory.Interval,System.Int32)">
            <summary>
            Adds the specified number of half steps to an <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval">The interval to add half steps to.</param>
            <param name="halfSteps">The number of half steps to add to the <paramref name="interval"/>.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which is the <paramref name="interval"/>
            shifted by the <paramref name="halfSteps"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="halfSteps"/> is out of range
            (result interval is out of the [-127,127] range).</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Subtraction(Melanchall.DryWetMidi.MusicTheory.Interval,System.Int32)">
            <summary>
            Subtracts the specified number of half steps from an <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval">The interval to subtract half steps from.</param>
            <param name="halfSteps">The number of half steps to subtract from the <paramref name="interval"/>.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which is the <paramref name="interval"/>
            shifted by the <paramref name="halfSteps"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="halfSteps"/> is out of range
            (result interval is out of the [-127,127] range).</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Multiply(Melanchall.DryWetMidi.MusicTheory.Interval,System.Int32)">
            <summary>
            Stretches the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by multiplying it by an integer number.
            </summary>
            <param name="interval">The interval to stretch.</param>
            <param name="multiplier">The number to multiply the <paramref name="interval"/> by.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which is the <paramref name="interval"/>
            stretched by the <paramref name="multiplier"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="multiplier"/> is out of range
            (result interval is out of the [-127,127] range).</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_Division(Melanchall.DryWetMidi.MusicTheory.Interval,System.Int32)">
            <summary>
            Shrinks the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> by dividing it by an integer number.
            </summary>
            <param name="interval">The interval to shrink.</param>
            <param name="divisor">The number to divide the <paramref name="interval"/> by.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which is the <paramref name="interval"/>
            shrinked by the <paramref name="divisor"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="divisor"/> is zero.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_UnaryPlus(Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Returns upward version of the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to get upward version of.</param>
            <returns>An upward version of the <paramref name="interval"/>.</returns>
            <remarks>
            This operator produces the same result as the <see cref="M:Melanchall.DryWetMidi.MusicTheory.Interval.Up"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.op_UnaryNegation(Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Returns downward version of the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to get downward version of.</param>
            <returns>A downward version of the <paramref name="interval"/>.</returns>
            <remarks>
            This operator produces the same result as the <see cref="M:Melanchall.DryWetMidi.MusicTheory.Interval.Down"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Interval.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.IntervalDirection">
            <summary>
            Direction of a musical interval represented by the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            The default is <see cref="F:Melanchall.DryWetMidi.MusicTheory.IntervalDirection.Up"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.IntervalDirection.Up">
            <summary>
            Upward interval (for example, 5 half steps up).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.IntervalDirection.Down">
            <summary>
            Downward interval (for example, 5 half steps down).
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.Octave">
            <summary>
            Represents an octave defined by its number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Octave.MinOctaveNumber">
            <summary>
            The smalles possible value of an octave's number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Octave.MaxOctaveNumber">
            <summary>
            The largest possible value of an octave's number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.Octave.Middle">
            <summary>
            The octave which contains the middle C note (C4).
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> with the
            specified octave number.
            </summary>
            <param name="octave">The number of an octave.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="octave"/> is out of valid range.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.Number">
            <summary>
            Gets the number of an octave represented by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.C">
            <summary>
            Gets the C note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.CSharp">
            <summary>
            Gets the C# note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.D">
            <summary>
            Gets the D note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.DSharp">
            <summary>
            Gets the D# note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.E">
            <summary>
            Gets the E note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.F">
            <summary>
            Gets the F note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.FSharp">
            <summary>
            Gets the F# note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.G">
            <summary>
            Gets the G note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.GSharp">
            <summary>
            Gets the G# note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.A">
            <summary>
            Gets the A note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.ASharp">
            <summary>
            Gets the A# note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Octave.B">
            <summary>
            Gets the B note of an octave defined by the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a note.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.GetNote(Melanchall.DryWetMidi.MusicTheory.NoteName)">
            <summary>
            Gets a note by the specified note name using current octave.
            </summary>
            <param name="noteName">The name of a note.</param>
            <returns>Note with the specified note name and current octave.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to get a note for the <paramref name="noteName"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.Get(System.Int32)">
            <summary>
            Gets an octave by the specified octave number.
            </summary>
            <param name="octaveNumber">The number of an octave.</param>
            <returns>An octave with the specified number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="octaveNumber"/> is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.op_Equality(Melanchall.DryWetMidi.MusicTheory.Octave,Melanchall.DryWetMidi.MusicTheory.Octave)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> objects are equal.
            </summary>
            <param name="octave1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> to compare.</param>
            <param name="octave2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> to compare.</param>
            <returns>true if the octaves are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.op_Inequality(Melanchall.DryWetMidi.MusicTheory.Octave,Melanchall.DryWetMidi.MusicTheory.Octave)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> objects are not equal.
            </summary>
            <param name="octave1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> to compare.</param>
            <param name="octave2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Octave"/> to compare.</param>
            <returns>false if the octaves are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Octave.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.Note">
            <summary>
            Represents a note, i.e. note name and octave.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> with the
            specified note number.
            </summary>
            <param name="noteNumber">The number of a note (60 is middle C).</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Note.NoteNumber">
            <summary>
            Gets the note number.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Note.NoteName">
            <summary>
            Gets the note name.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.MusicTheory.Note.Octave">
            <summary>
            Gets the octave number of a note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.Transpose(Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Returns the current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> transposed by the specified
            <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/>.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> to transpose the current
            <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> by.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> transposed by the <paramref name="interval"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Result note's number is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.Get(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Returns a <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> for the specified note number.
            </summary>
            <param name="noteNumber">The number of a note (60 is middle C).</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> for the <paramref name="noteNumber"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.Get(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32)">
            <summary>
            Returns a <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> for the specified note name and octave number.
            </summary>
            <param name="noteName">The name of a note.</param>
            <param name="octave">The octave number.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> for the <paramref name="noteName"/> and <paramref name="octave"/>.</returns>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.TryParse(System.String,Melanchall.DryWetMidi.MusicTheory.Note@)">
            <summary>
            Converts the string representation of a musical note to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a note to convert.</param>
            <param name="note">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/>
            equivalent of the musical note contained in <paramref name="input"/>, if the conversion succeeded,
            or null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.Parse(System.String)">
            <summary>
            Converts the string representation of a musical note to its <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent.
            </summary>
            <param name="input">A string containing a note to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.MusicTheory.Scale"/> equivalent to the musical note contained in <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.op_Equality(Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> objects are equal.
            </summary>
            <param name="note1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to compare.</param>
            <param name="note2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to compare.</param>
            <returns>true if the notes are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.op_Inequality(Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> objects are not equal.
            </summary>
            <param name="note1">The first <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to compare.</param>
            <param name="note2">The second <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to compare.</param>
            <returns>false if the notes are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.op_Addition(Melanchall.DryWetMidi.MusicTheory.Note,System.Int32)">
            <summary>
            Transposes the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/>.
            </summary>
            <param name="note">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to transpose.</param>
            <param name="halfSteps">The number of half steps to transpose the <paramref name="note"/> by.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> which is the <paramref name="note"/>
            transposed by the <paramref name="halfSteps"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Result note's number is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.op_Subtraction(Melanchall.DryWetMidi.MusicTheory.Note,System.Int32)">
            <summary>
            Transposes the specified <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/>.
            </summary>
            <param name="note">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> to transpose.</param>
            <param name="halfSteps">The number of half steps to transpose the <paramref name="note"/> by.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Note"/> which is the <paramref name="note"/>
            transposed by the <paramref name="halfSteps"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Result note's number is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.MusicTheory.Note.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.MusicTheory.NoteName">
            <summary>
            Name of a note of the 12-tone chromatic scale.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.C">
            <summary>
            C (Do) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.CSharp">
            <summary>
            Half-stepped C (Do) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.D">
            <summary>
            D (Re) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.DSharp">
            <summary>
            Half-stepped D (Re) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.E">
            <summary>
            E (Mi) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.F">
            <summary>
            F (Fa) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.FSharp">
            <summary>
            Half-stepped F (Fa) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.G">
            <summary>
            G (Sol) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.GSharp">
            <summary>
            Half-stepped G (Sol) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.A">
            <summary>
            A (La) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.ASharp">
            <summary>
            Half-stepped A (La) note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.MusicTheory.NoteName.B">
            <summary>
            B (Si) note.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.IMusicalObject">
            <summary>
            Musical objects that can be played.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.IMusicalObject.Channel">
            <summary>
            Gets the channel which should be used to play an object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.SplittedLengthedObject`1">
            <summary>
            Container for left and right parts of splitted lengthed object.
            </summary>
            <typeparam name="TObject">The type of splitted object.</typeparam>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.SplittedLengthedObject`1.LeftPart">
            <summary>
            The left part of a splitted object.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.SplittedLengthedObject`1.RightPart">
            <summary>
            The right part of a splitted object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.GetNotesAndRestsUtilities">
            <summary>
            Provides methods for getting single collection of notes and rests by the specified
            collection of notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetNotesAndRestsUtilities.GetNotesAndRests(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy)">
            <summary>
            Iterates through the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> returning instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            and <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> where rests calculated using the specified policy.
            </summary>
            <param name="notes">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to iterate over.</param>
            <param name="restSeparationPolicy">Policy which determines when rests should be returned.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="restSeparationPolicy"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetNotesAndRestsUtilities.GetNotesAndRests(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy)">
            <summary>
            Iterates through the notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> returning
            instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> and <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> where rests calculated using the specified policy.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing notes to iterate over.</param>
            <param name="restSeparationPolicy">Policy which determines when rests should be returned.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="restSeparationPolicy"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetNotesAndRestsUtilities.GetNotesAndRests(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy)">
            <summary>
            Iterates through the notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>
            returning instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> and <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> where rests calculated
            using the specified policy.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing notes to iterate over.</param>
            <param name="restSeparationPolicy">Policy which determines when rests should be returned.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="restSeparationPolicy"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetNotesAndRestsUtilities.GetNotesAndRests(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy)">
            <summary>
            Iterates through the collection of notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>
            returning instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> and <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> where rests calculated
            using the specified policy.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing notes to iterate over.</param>
            <param name="restSeparationPolicy">Policy which determines when rests should be returned.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="restSeparationPolicy"/> specified an
            invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.Rest">
            <summary>
            Represents a musical rest.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Rest.Time">
            <summary>
            Gets start time of an object.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Rest.Length">
            <summary>
            Gets length of an object.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Rest.Channel">
            <summary>
            Gets a channel the rest was constructed for.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Rest.NoteNumber">
            <summary>
            Gets a note number the rest was constructed for.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Rest.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.Rest,Melanchall.DryWetMidi.Smf.Interaction.Rest)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> objects are equal.
            </summary>
            <param name="rest1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> to compare.</param>
            <param name="rest2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> to compare.</param>
            <returns>true if the rests are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Rest.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.Rest,Melanchall.DryWetMidi.Smf.Interaction.Rest)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> objects are not equal.
            </summary>
            <param name="rest1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> to compare.</param>
            <param name="rest2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Rest"/> to compare.</param>
            <returns>false if the rests are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Rest.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Rest.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Rest.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy">
            <summary>
            Determines a rule for creating rests. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy.NoSeparation"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy.NoSeparation">
            <summary>
            Rests should be constructed only when there are no notes at all on any channel.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy.SeparateByChannel">
            <summary>
            Rests should be constructed individually for each channel ignoring note number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy.SeparateByNoteNumber">
            <summary>
            Rests should be constructed individually for each note number ignoring channel.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.RestSeparationPolicy.SeparateByChannelAndNoteNumber">
            <summary>
            Rests should be constructed individually for each channel and note number.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.GetTimedEventsAndNotesUtilities">
            <summary>
            Provides a way to iterate through a collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> returning
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> for Note On/Note Off event pairs and original <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            for all other events.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Iterates through the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> returning
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> for Note On/Note Off event pairs and original <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            for all other events.
            </summary>
            <remarks>
            If there is no corresponding Note Off event for Note On (or if there is no correspinding
            Note On event for Note Off) the event will be returned as is.
            </remarks>
            <param name="timedEvents">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to iterate over.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timedEvents"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(Melanchall.DryWetMidi.Smf.TrackChunk)">
            <summary>
            Iterates through the events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> returning
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> for Note On/Note Off event pairs and original <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            for all other events.
            </summary>
            <remarks>
            If there is no corresponding Note Off event for Note On (or if there is no correspinding
            Note On event for Note Off) the event will be returned as is.
            </remarks>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to iterate over.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk})">
            <summary>
            Iterates through the events contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> returning
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> for Note On/Note Off event pairs and original <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            for all other events.
            </summary>
            <remarks>
            If there is no corresponding Note Off event for Note On (or if there is no correspinding
            Note On event for Note Off) the event will be returned as is.
            </remarks>
            <param name="trackChunks"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to iterate over.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Iterates through the events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> returning
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> for Note On/Note Off event pairs and original <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            for all other events.
            </summary>
            <remarks>
            If there is no corresponding Note Off event for Note On (or if there is no correspinding
            Note On event for Note Off) the event will be returned as is.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing events to iterate over.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> where an element either <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>
            or <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ResizeNotesUtilities">
            <summary>
            Provides ways to resize collection of notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ResizeNotesUtilities.ResizeNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Resizes group of notes to the specified length treating all notes as single object.
            </summary>
            <param name="notes">Notes to resize.</param>
            <param name="length">New length of the notes collection.</param>
            <param name="distanceCalculationType">Type of distance calculations.</param>
            <param name="tempoMap"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="length"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.BarBeat"/> is used for
            <paramref name="distanceCalculationType"/> which is unsupported.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="distanceCalculationType"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ResizeNotesUtilities.ResizeNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Resizes group of notes by the specified ratio treating all notes as single object. For example,
            resizing by ratio of 0.5 shrinks group of notes by two times.
            </summary>
            <param name="notes">Notes to resize.</param>
            <param name="ratio">Ratio to resize notes by.</param>
            <param name="distanceCalculationType">Type of distance calculations.</param>
            <param name="tempoMap"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.BarBeat"/> is used for
            <paramref name="distanceCalculationType"/> which is unsupported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="distanceCalculationType"/> specified an
            invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern">
            <summary>
            Represents a musical pattern - set of notes with the specified times and lengths.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Pattern.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.IPatternAction})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> with the specified actions.
            </summary>
            <param name="actions">Actions that pattern have to invoke on export to MIDI.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Pattern.Actions">
            <summary>
            Gets the collection of actions that pattern have to invoke on export to MIDI.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Pattern.ToTrackChunk(Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Exports the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> to track chunk.
            </summary>
            <param name="tempoMap">Tempo map to process pattern data according with.</param>
            <param name="channel">Channel of notes that will be generated by pattern.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing notes events generated by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Pattern.ToTrackChunk(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Exports the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> to track chunk using zero channel.
            </summary>
            <param name="tempoMap">Tempo map to process pattern data according with.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing notes events generated by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Pattern.ToFile(Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Exports the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> to MIDI file.
            </summary>
            <param name="tempoMap">Tempo map to process pattern data according with.</param>
            <param name="channel">Channel of notes that will be generated by pattern.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing notes events generated by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Pattern.ToFile(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Exports the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> to MIDI file using zero channel.
            </summary>
            <param name="tempoMap">Tempo map to process pattern data according with.</param>
            <returns>The <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing notes events generated by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder">
            <summary>
            Provides a fluent interface to build an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Interval)">
            <summary>
            Adds a note by the specified interval relative to the current root note using
            default length and velocity.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which defines
            a number of half steps from the current root note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set root note use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetRootNote(Melanchall.DryWetMidi.MusicTheory.Note)"/> method. By default the root note is C4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Interval,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a note by the specified interval relative to the current root note using
            specified length and default velocity.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which defines
            a number of half steps from the current root note.</param>
            <param name="length">The length of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set root note use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetRootNote(Melanchall.DryWetMidi.MusicTheory.Note)"/> method. By default the root note is C4.
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null. -or-
            <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Interval,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note by the specified interval relative to the current root note using
            default length and specified velocity.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which defines
            a number of half steps from the current root note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set root note use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetRootNote(Melanchall.DryWetMidi.MusicTheory.Note)"/> method. By default the root note is C4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Interval,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note by the specified interval relative to the current root note using
            specified length and velocity.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> which defines
            a number of half steps from the current root note.</param>
            <param name="length">The length of a note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set root note use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetRootNote(Melanchall.DryWetMidi.MusicTheory.Note)"/> method. By default the root note is C4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null. -or-
            <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.NoteName)">
            <summary>
            Adds a note by the specified note name using default velocity, length and octave.
            </summary>
            <param name="noteName">The name of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a note by the specified note name using specified length and default velocity and octave.
            </summary>
            <param name="noteName">The name of a note.</param>
            <param name="length">The length of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note by the specified note name using specified velocity and default length and octave.
            </summary>
            <param name="noteName">The name of a note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note by the specified note name using specified velocity and length, and default octave.
            </summary>
            <param name="noteName">The name of a note.</param>
            <param name="length">The length of a note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Adds a note using default length and velocity.
            </summary>
            <param name="note">A note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a note using specified length and default velocity.
            </summary>
            <param name="note">A note.</param>
            <param name="length">The length of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note using specified velocity and default length.
            </summary>
            <param name="note">A note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a note using specified velocity and length.
            </summary>
            <param name="note">The note.</param>
            <param name="length">The length of the note.</param>
            <param name="velocity">The velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.NoteName)">
            <summary>
            Adds a chord by the specified intervals and root note's name.
            </summary>
            <param name="intervals">Intervals that represent the chord.</param>
            <param name="rootNoteName">The root note's name of the chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rootNoteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a chord by the specified intervals, root note's name and length.
            </summary>
            <param name="intervals">Intervals that represent the chord.</param>
            <param name="rootNoteName">The root note's name of the chord.</param>
            <param name="length">The length of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null. -or-
            <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rootNoteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified intervals, root note's name and velocity.
            </summary>
            <param name="intervals">Intervals that represent the chord.</param>
            <param name="rootNoteName">The root note's name of the chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rootNoteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.NoteName,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified intervals, root note's name, length and velocity.
            </summary>
            <param name="intervals">Intervals that represent the chord.</param>
            <param name="rootNoteName">The root note's name of the chord.</param>
            <param name="length">The length of a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null. -or-
            <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rootNoteName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Adds a chord by the specified intervals relative to the root note using default
            length and velocity.
            </summary>
            <param name="intervals">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects which define
            a numbers of half steps from the <paramref name="rootNote"/>.</param>
            <param name="rootNote">The chord's root note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            The result chord will contain the specified root note and notes produced by transposing
            the <paramref name="rootNote"/> by the <paramref name="intervals"/>.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null. -or-
            <paramref name="rootNote"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result chord's note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a chord by the specified intervals relative to the root note using specified
            length and default velocity.
            </summary>
            <param name="interval">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects which define
            a numbers of half steps from the <paramref name="rootNote"/>.</param>
            <param name="rootNote">The chord's root note.</param>
            <param name="length">The length of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            The result chord will contain the specified root note and notes produced by transposing
            the <paramref name="rootNote"/> by the <paramref name="interval"/>.
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="interval"/> is null. -or-
            <paramref name="rootNote"/> is null. -or- <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result chord's note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified intervals relative to the root note using default
            length and specified velocity.
            </summary>
            <param name="intervals">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects which define
            a numbers of half steps from the <paramref name="rootNote"/>.</param>
            <param name="rootNote">The chord's root note.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            The result chord will contain the specified root note and notes produced by transposing
            the <paramref name="rootNote"/> by the <paramref name="intervals"/>.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null. -or-
            <paramref name="rootNote"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result chord's note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Interval},Melanchall.DryWetMidi.MusicTheory.Note,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified intervals relative to the root note using specified
            length and velocity.
            </summary>
            <param name="intervals">The <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects which define
            a numbers of half steps from the <paramref name="rootNote"/>.</param>
            <param name="rootNote">The chord's root note.</param>
            <param name="length">The length of a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            The result chord will contain the specified root note and notes produced by transposing
            the <paramref name="rootNote"/> by the <paramref name="intervals"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="intervals"/> is null. -or-
            <paramref name="rootNote"/> is null. -or- <paramref name="length"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of result chord's note is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.NoteName})">
            <summary>
            Adds a chord by the specified notes names using default velocity, length and octave.
            </summary>
            <param name="noteNames">Names of notes that represent a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteNames"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.NoteName},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a chord by the specified notes names using specified length and default velocity, and default octave.
            </summary>
            <param name="noteNames">Names of notes that represent a chord.</param>
            <param name="length">The length of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteNames"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.NoteName},Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified notes names using specified velocity and default length, and default octave.
            </summary>
            <param name="noteNames">Names of notes that represent a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteNames"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.NoteName},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified notes names using specified velocity and length, and default octave.
            </summary>
            <param name="noteNames">Names of notes that represent a chord.</param>
            <param name="length">The length of a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default octave use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/> method. By default the octave number is 4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteNames"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Note})">
            <summary>
            Adds a chord by the specified notes using default velocity and length.
            </summary>
            <param name="notes">Notes that represent a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4. To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Note},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Adds a chord by the specified notes using specified length and default velocity.
            </summary>
            <param name="notes">Notes that represent a chord.</param>
            <param name="length">The length of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default velocity use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> method. By default the
            velocity is 100.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Note},Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified notes using specified velocity and default length.
            </summary>
            <param name="notes">Notes that represent a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default note length use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the length
            is 1/4.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Chord(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.MusicTheory.Note},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Adds a chord by the specified notes using specified velocity and length.
            </summary>
            <param name="notes">Notes that represent a chord.</param>
            <param name="length">The length of a chord.</param>
            <param name="velocity">The velocity of a chord.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Pattern(Melanchall.DryWetMidi.Smf.Interaction.Pattern)">
            <summary>
            Adds a pattern.
            </summary>
            <param name="pattern">Pattern to add.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Anchor(System.Object)">
            <summary>
            Places the specified anchor at the current time.
            </summary>
            <param name="anchor">Anchor to place.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchor"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Anchor">
            <summary>
            Places an anchor at the current time.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToFirstAnchor(System.Object)">
            <summary>
            Moves to the first specified anchor.
            </summary>
            <param name="anchor">Anchor to move to.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">There are no anchors with the <paramref name="anchor"/> key.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToFirstAnchor">
            <summary>
            Move to the first anchor.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There are no anchors.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToLastAnchor(System.Object)">
            <summary>
            Moves to the last specified anchor.
            </summary>
            <param name="anchor">Anchor to move to.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">There are no anchors with the <paramref name="anchor"/> key.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToLastAnchor">
            <summary>
            Moves to the last anchor.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The are no anchors.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToNthAnchor(System.Object,System.Int32)">
            <summary>
            Moves to the nth specified anchor.
            </summary>
            <param name="anchor">Anchor to move to.</param>
            <param name="index">Index of an anchor to move to.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchor"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToNthAnchor(System.Int32)">
            <summary>
            Moves to the nth anchor.
            </summary>
            <param name="index">Index of an anchor to move to.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.StepForward(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Moves the current time by the specified step forward.
            </summary>
            <param name="step">Step to move by.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.StepForward">
            <summary>
            Moves the current time by the default step forward.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default step use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the step is 1/4.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.StepBack(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Moves the current time by the specified step back.
            </summary>
            <param name="step">Step to move by.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.StepBack">
            <summary>
            Moves the current time by the default step back.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            To set default step use <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> method. By default the step is 1/4.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToTime(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Moves the current time to the specified one.
            </summary>
            <param name="time">Time to move to.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToPreviousTime">
            <summary>
            Moves the current time to the previous one.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            On every action current time is stored in the time history. To return to the last saved time
            you can call the <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.MoveToPreviousTime"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Repeat(System.Int32,System.Int32)">
            <summary>
            Repeats the specified number of previous actions.
            </summary>
            <param name="actionsCount">Number of previous actions to repeat.</param>
            <param name="repetitionsCount">Count of repetitions.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Note that <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/>, <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/>,
            <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> and <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> are not
            actions and will not be repeated since default values applies immidiately on next actions.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="actionsCount"/> is
            negative. -or- <paramref name="actionsCount"/> is greater than count of existing actions. -or-
            <paramref name="repetitionsCount"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Repeat(System.Int32)">
            <summary>
            Repeats the previous action the specified number of times.
            </summary>
            <param name="repetitionsCount">Count of repetitions.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Note that <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/>, <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/>,
            <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> and <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> are not
            actions and will not be repeated since default values applies immidiately on next actions.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="repetitionsCount"/> is negative.</exception>
            <exception cref="T:System.InvalidOperationException">There are no actions to repeat.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Repeat">
            <summary>
            Repeats the previous action one time.
            </summary>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Note that <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/>, <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)"/>,
            <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)"/> and <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)"/> are not
            actions and will not be repeated since default values applies immidiately on next actions.
            </remarks>
            <exception cref="T:System.InvalidOperationException">There are no actions to repeat.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Lyrics(System.String)">
            <summary>
            Adds lyrics.
            </summary>
            <param name="text">Text of lyrics.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Marker(System.String)">
            <summary>
            Adds a marker.
            </summary>
            <param name="marker">The text of marker.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="marker"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetRootNote(Melanchall.DryWetMidi.MusicTheory.Note)">
            <summary>
            Sets a root note that will be used by next actions of the builder using
            <see cref="T:Melanchall.DryWetMidi.MusicTheory.Interval"/> objects.
            </summary>
            <param name="rootNote">The root note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Setting a root note is not an action and thus will not be stored in a pattern.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootNote"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetVelocity(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Sets default velocity that will be used by next actions of the builder.
            </summary>
            <param name="velocity">New default velocity of a note.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Setting default velocity is not an action and thus will not be stored in a pattern.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetNoteLength(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Sets default note length that will be used by next actions of the builder.
            </summary>
            <param name="length">New default note length.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Setting default note length is not an action and thus will not be stored in a pattern.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetStep(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Sets default step for step back and step forward actions of the builder.
            </summary>
            <param name="step">New default step.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Setting default step is not an action and thus will not be stored in a pattern.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetOctave(System.Int32)">
            <summary>
            Sets default note octave that will be used by next actions of the builder.
            </summary>
            <param name="octave">New default octave.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <remarks>
            Setting default octave is not an action and thus will not be stored in a pattern.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="octave"/> is out of valid range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetProgram(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Sets MIDI program to specify an instrument that will be used by all following notes.
            </summary>
            <param name="programNumber">The number of a MIDI program.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetProgram(Melanchall.DryWetMidi.Standards.GeneralMidiProgram)">
            <summary>
            Sets General MIDI Level 1 program to specify an instrument that will be used by all following notes.
            </summary>
            <param name="program">The General MIDI Level 1 program.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="program"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.SetProgram(Melanchall.DryWetMidi.Standards.GeneralMidi2Program)">
            <summary>
            Sets General MIDI Level 2 program to specify an instrument that will be used by all following notes.
            </summary>
            <param name="program">The General MIDI Level 2 program.</param>
            <returns>The current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="program"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder.Build">
            <summary>
            Build an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> holding all actions
            defined via builder.
            </summary>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Pattern"/> that holds all actions
            defined by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.PatternBuilder"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1">
            <summary>
            Represents a basic collection of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/>.
            </summary>
            <typeparam name="TObject">The type of elements in the collection.</typeparam>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1._objects">
            <summary>
            Internal list of timed objects.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1"/> with
            the specified timed objects.
            </summary>
            <param name="objects">Collection of timed objects to populate the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1"/>.</param>
            <remarks>
            Note that null objects will be automatically filtered out so the collection will not
            contain them.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds objects to this collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.Add(`0[])">
            <summary>
            Adds objects to this collection.
            </summary>
            <param name="objects">Objects to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes objects from this collection.
            </summary>
            <param name="objects">Objects to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.Remove(`0[])">
            <summary>
            Removes objects from this collection.
            </summary>
            <param name="objects">Objects to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the objects that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of
            the objects to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.Clear">
            <summary>
            Removes all objects from this collection.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.OnObjectsAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs an action when objects are added to the collection.
            </summary>
            <param name="addedObjects">Collection of added objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.OnObjectsRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs an action when objects are removed from the collection.
            </summary>
            <param name="removedObjects">Collection of removed objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectsCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter">
            <summary>
            Provides a way to convert the length of an object from one representation to another.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo``1(System.Int64,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from <see cref="T:System.Int64"/> to the specified length type.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the length of an object.</typeparam>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative. -or-
            <paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from <see cref="T:System.Int64"/> to the specified length type.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type that will represent the length of an object.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of time span defined by <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative. -or-
            <paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo``1(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from <see cref="T:System.Int64"/> to the specified length type.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the length of an object.</typeparam>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from <see cref="T:System.Int64"/> to the specified length type.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type that will represent the length of an object.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of time span defined by <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo``1(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the length of an object.</typeparam>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type that will represent the length of an object.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of time span defined by <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo``1(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the length of an object.</typeparam>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type that will represent the length of an object.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of time span defined by <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Type,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type to convert <paramref name="length"/> to.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="lengthType"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="lengthType"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Type,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from one length type to another one.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="lengthType">Type to convert <paramref name="length"/> to.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as an instance of <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="lengthType"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="lengthType"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertFrom(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from the specified length type to <see cref="T:System.Int64"/>.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as <see cref="T:System.Int64"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthConverter.ConvertFrom(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts length from the specified length type to <see cref="T:System.Int64"/>.
            </summary>
            <param name="length">Length to convert.</param>
            <param name="time">Start time of an object to convert length of.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="length"/>.</param>
            <returns>Length as <see cref="T:System.Int64"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="length"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter">
            <summary>
            Provides a way to convert the time of an object from one representation to another.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertTo``1(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from <see cref="T:System.Int64"/> to the specified time type.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the time of an object.</typeparam>
            <param name="time">Time to convert.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertTo(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from <see cref="T:System.Int64"/> to the specified time type.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="timeType">Type that will represent the time of an object.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as an instance of time span defined by <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertTo``1(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from one time type to another one.
            </summary>
            <typeparam name="TTimeSpan">Type that will represent the time of an object.</typeparam>
            <param name="time">Time to convert.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as an instance of <typeparamref name="TTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from one time type to another one.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="timeType">Type that will represent the time of an object.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as an instance of time span defined by <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertTo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Type,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from one time type to another one.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="timeType">Type to convert time to.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as an instance of <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="timeType"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="timeType"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeConverter.ConvertFrom(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Converts time from the specified time type to <see cref="T:System.Int64"/>.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="time"/>.</param>
            <returns>Time as <see cref="T:System.Int64"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan">
            <summary>
            Time span that represents time or length.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanComparer">
            <summary>
            Compares two time spans determining relation between them.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanComparer.Compare(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and
            <paramref name="y"/>, as shown in the following table.
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <term>Meaning</term>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <term><paramref name="x"/> is less than <paramref name="y"/></term>
                </item>
                <item>
                    <term>Zero</term>
                    <term><paramref name="x"/> equals <paramref name="y"/></term>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <term><paramref name="x"/> is greater than <paramref name="y"/></term>
                </item>
            </list>
            </returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode">
            <summary>
            Mode of the arithmetic operation between two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode.TimeTime">
            <summary>
            Both time spans represent time.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode.TimeLength">
            <summary>
            First time span represents time and second one represents length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode.LengthLength">
            <summary>
            Both time spans represent length.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan">
            <summary>
            Represents bar/beat time span which represents bars, beats and ticks.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> with the specified
            number of bars.
            </summary>
            <param name="bars">The number of bars.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bars"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> with the specified
            number of bars and beats.
            </summary>
            <param name="bars">The number of bars.</param>
            <param name="beats">The number of beats.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bars"/> is negative. -or-
            <paramref name="beats"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> with the specified
            number of bars, beats and ticks.
            </summary>
            <param name="bars">The number of bars.</param>
            <param name="beats">The number of beats.</param>
            <param name="ticks">The number of ticks.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bars"/> is negative. -or-
            <paramref name="beats"/> is negative. -or- <paramref name="ticks"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Bars">
            <summary>
            Gets the bars component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Beats">
            <summary>
            Gets the beats component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Ticks">
            <summary>
            Gets the ticks component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan@)">
            <summary>
            Converts the string representation of a bar/beat time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Parse(System.String)">
            <summary>
            Converts the string representation of a bar/beat time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/>
            equivalent.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> equivalent to the time span contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> objects are equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>true if time spans are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> objects are not equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>false if time spans are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_Addition(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Adds two specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> instances.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to add.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to add.</param>
            <returns>An object whose value is the sum of the values of <paramref name="timeSpan1"/> and
            <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_Subtraction(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> from another one.
            </summary>
            <param name="timeSpan1">The minuend.</param>
            <param name="timeSpan2">The subtrahend.</param>
            <returns>An object whose value is the result of the value of <paramref name="timeSpan1"/> minus
            the value of <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeSpan1"/> is less than <paramref name="timeSpan2"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_LessThan(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> is less than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_GreaterThan(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> is greater than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_LessThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> is less than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.op_GreaterThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> is greater than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes obj
            in the sort order. Zero This instance occurs in the same position in the sort order as obj.
            Greater than zero This instance follows obj in the sort order.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.CompareTo(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes other
            in the sort order. Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan.Equals(Melanchall.DryWetMidi.Smf.Interaction.BarBeatTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan">
            <summary>
            Represents a result of summation or subtraction of two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.TimeSpan1">
            <summary>
            Gets the first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.TimeSpan2">
            <summary>
            Gets the second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Operation">
            <summary>
            Gets the mathematical operation between <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.TimeSpan1"/> and <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.TimeSpan2"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Mode">
            <summary>
            Get the mode of the mathematical operation represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> objects are equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> to compare.</param>
            <returns>true if time spans are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> objects are not equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/> to compare.</param>
            <returns>false if time spans are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes obj
            in the sort order. Zero This instance occurs in the same position in the sort order as obj.
            Greater than zero This instance follows obj in the sort order.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan">
            <summary>
            Represents metric time span which represents hours, minutes and seconds.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> with the specified
            number of microseconds.
            </summary>
            <param name="totalMicroseconds">Number of microseconds which represents metric time span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalMicroseconds"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> with the specified
            <see cref="T:System.TimeSpan"/> object.
            </summary>
            <param name="timeSpan">Time interval to initialize the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> with the specified
            numbers of hours, minutes and seconds.
            </summary>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hours"/> is negative. -or-
            <paramref name="minutes"/> is negative. -or- <paramref name="seconds"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> with the specified
            numbers of hours, minutes, seconds and milliseconds.
            </summary>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hours"/> is negative. -or-
            <paramref name="minutes"/> is negative. -or- <paramref name="seconds"/> is negative. -or-
            <paramref name="milliseconds"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.TotalMicroseconds">
            <summary>
            Gets the value of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> expressed in microseconds.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Hours">
            <summary>
            Gets the hours component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Minutes">
            <summary>
            Gets the minutes component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Seconds">
            <summary>
            Gets the seconds component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Milliseconds">
            <summary>
            Gets the milliseconds component of the time represented by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Divide(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Divides the current time span by the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> returning ration
            between them.
            </summary>
            <param name="timeSpan"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to divide the current time span by.</param>
            <returns>Rayion between the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> and <paramref name="timeSpan"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.DivideByZeroException"><paramref name="timeSpan"/> represents a time span of zero length.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan@)">
            <summary>
            Converts the string representation of a metric time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Parse(System.String)">
            <summary>
            Converts the string representation of a metric time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>
            equivalent.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> equivalent to the time span contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Implicit(System.TimeSpan)~Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan">
            <summary>
            Converts <see cref="T:System.TimeSpan"/> to <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.
            </summary>
            <param name="timeSpan"><see cref="T:System.TimeSpan"/> to convert to <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Implicit(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)~System.TimeSpan">
            <summary>
            Converts <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="timeSpan"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to convert to <see cref="T:System.TimeSpan"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> objects are equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>true if time spans are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> objects are not equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>false if time spans are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Addition(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Adds two specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> instances.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to add.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to add.</param>
            <returns>An object whose value is the sum of the values of <paramref name="timeSpan1"/> and
            <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_Subtraction(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> from another one.
            </summary>
            <param name="timeSpan1">The minuend.</param>
            <param name="timeSpan2">The subtrahend.</param>
            <returns>An object whose value is the result of the value of <paramref name="timeSpan1"/> minus
            the value of <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeSpan1"/> is less than <paramref name="timeSpan2"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_LessThan(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> is less than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_GreaterThan(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> is greater than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_LessThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> is less than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.op_GreaterThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> is greater than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes obj
            in the sort order. Zero This instance occurs in the same position in the sort order as obj.
            Greater than zero This instance follows obj in the sort order.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.CompareTo(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes other
            in the sort order. Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan.Equals(Melanchall.DryWetMidi.Smf.Interaction.MetricTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan">
            <summary>
            Represents a time span as an amount of time measured in units of the time division
            of a MIDI file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> with the specified
            time span.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.TimeSpan">
            <summary>
            Gets the time span of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Divide(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Divides the current time span by the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> returning ration
            between them.
            </summary>
            <param name="timeSpan"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to divide the current time span by.</param>
            <returns>Rayion between the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> and <paramref name="timeSpan"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.DivideByZeroException"><paramref name="timeSpan"/> represents a time span of zero length.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan@)">
            <summary>
            Converts the string representation of a MIDI time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Parse(System.String)">
            <summary>
            Converts the string representation of a MIDI time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>
            equivalent.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> equivalent to the time span contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Explicit(System.Int64)~Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan">
            <summary>
            Converts <see cref="T:System.Int64"/> to <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>.
            </summary>
            <param name="timeSpan"><see cref="T:System.Int64"/> to convert to <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Implicit(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)~System.Int64">
            <summary>
            Converts <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="timeSpan"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to convert to <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> objects are equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>true if time spans are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> objects are not equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>false if time spans are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Addition(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Adds two specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> instances.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to add.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to add.</param>
            <returns>An object whose value is the sum of the values of <paramref name="timeSpan1"/> and
            <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_Subtraction(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> from another one.
            </summary>
            <param name="timeSpan1">The minuend.</param>
            <param name="timeSpan2">The subtrahend.</param>
            <returns>An object whose value is the result of the value of <paramref name="timeSpan1"/> minus
            the value of <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeSpan1"/> is less than <paramref name="timeSpan2"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_LessThan(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> is less than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_GreaterThan(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> is greater than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_LessThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> is less than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.op_GreaterThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> is greater than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes obj
            in the sort order. Zero This instance occurs in the same position in the sort order as obj.
            Greater than zero This instance follows obj in the sort order.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.CompareTo(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes other
            in the sort order. Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan.Equals(Melanchall.DryWetMidi.Smf.Interaction.MidiTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan">
            <summary>
            Represents a time span as a fraction of the whole note's length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Whole">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the whole length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Half">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the half length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Quarter">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the quarter length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Eighth">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the eighth length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Sixteenth">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the sixteenth length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.ThirtySecond">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the thirty-second length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.SixtyFourth">
            <summary>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> that corresponds to the sixty-fourth length.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> with the specified
            fraction of the whole note's length.
            </summary>
            <param name="fraction">The fraction of the whole note's length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fraction"/> is zero or negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> with the specified
            numerator and denominator of the fraction of the whole note's length.
            </summary>
            <param name="numerator">The numerator of fraction of the whole note's length.</param>
            <param name="denominator">The denominator of fraction of the whole note's length.</param>
            <param name="simplify">true if the time span should be simplified, false otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numerator"/> is negative. -or-
            <paramref name="denominator"/> is zero or negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Numerator">
            <summary>
            Gets the numerator of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Denominator">
            <summary>
            Gets the denominator of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Dotted(System.Int32)">
            <summary>
            Returns the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> modified by the specified number
            of dots.
            </summary>
            <param name="dotsCount">The number of dots to modify the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</param>
            <returns>The dotted version of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dotsCount"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.SingleDotted">
            <summary>
            Returns the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> modified by one dot.
            </summary>
            <returns>The single dotted version of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.DoubleDotted">
            <summary>
            Returns the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> modified by two dots.
            </summary>
            <returns>The double dotted version of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Tuplet(System.Int32,System.Int32)">
            <summary>
            Returns a tuplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
            <param name="tupletNotesCount">Notes count of a tuplet to construct.</param>
            <param name="tupletSpaceSize">Space of a tuplet to construct.</param>
            <returns>A tuplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tupletNotesCount"/> is zero
            or negative. -or- <paramref name="tupletSpaceSize"/> is zero or negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Triplet">
            <summary>
            Returns a triplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
            <returns>A triplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Duplet">
            <summary>
            Returns a duplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
            <returns>A duplet based on the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Divide(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Divides the current time span by the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> returning ration
            between them.
            </summary>
            <param name="timeSpan"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to divide the current time span by.</param>
            <returns>Rayion between the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> and <paramref name="timeSpan"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.DivideByZeroException"><paramref name="timeSpan"/> represents a time span of zero length.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.ChangeDenominator(System.Int64)">
            <summary>
            Changes denominator of the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>.
            </summary>
            <param name="denominator">New denominator.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> which represents the same time span as
            the original one but with the specified denominator.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="denominator"/> is zero or negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan@)">
            <summary>
            Converts the string representation of a whole note's fraction to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Parse(System.String)">
            <summary>
            Converts the string representation of a whole note's fraction to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/>
            equivalent.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> equivalent to the time span contained in
            <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.ReduceToCommonDenominator(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Reduces the specified musical time spans to the common denominator.
            </summary>
            <param name="fraction1">First time span.</param>
            <param name="fraction2">Second time span.</param>
            <param name="numerator1">Numerator of the reduced first time span.</param>
            <param name="numerator2">Numerator of the reduced second time span.</param>
            <param name="denominator">Common denominator of reduced time spans.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> objects are equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>true if time spans are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> objects are not equal.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>false if time spans are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Multiply(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,System.Int64)">
            <summary>
            Multiplies the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> by a number.
            </summary>
            <param name="timeSpan">The <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to multiply by <paramref name="number"/>.</param>
            <param name="number">The multiplier.</param>
            <returns>An object whose value is the result of multiplication of <paramref name="timeSpan"/> by
            <paramref name="number"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="number"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Multiply(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Multiplies the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> by a number.
            </summary>
            <param name="number">The multiplier.</param>
            <param name="timeSpan">The <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to multiply by <paramref name="number"/>.</param>
            <returns>An object whose value is the result of multiplication of <paramref name="timeSpan"/> by
            <paramref name="number"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="number"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Division(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,System.Int64)">
            <summary>
            Divides the specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> by a number.
            </summary>
            <param name="timeSpan">The <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to divide by <paramref name="number"/>.</param>
            <param name="number">The multiplier.</param>
            <returns>An object whose value is the result of division of <paramref name="timeSpan"/> by
            <paramref name="number"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="number"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Addition(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Adds two specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> instances.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to add.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to add.</param>
            <returns>An object whose value is the sum of the values of <paramref name="timeSpan1"/> and
            <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_Subtraction(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> from another one.
            </summary>
            <param name="timeSpan1">The minuend.</param>
            <param name="timeSpan2">The subtrahend.</param>
            <returns>An object whose value is the result of the value of <paramref name="timeSpan1"/> minus
            the value of <paramref name="timeSpan2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeSpan1"/> is less than <paramref name="timeSpan2"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_LessThan(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> is less than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_GreaterThan(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> is greater than another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_LessThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> is less than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is less than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.op_GreaterThanOrEqual(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan,Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> is greater than or equal to
            another one.
            </summary>
            <param name="timeSpan1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <param name="timeSpan2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan"/> to compare.</param>
            <returns>true if the value of <paramref name="timeSpan1"/> is greater than or equal to the value of
            <paramref name="timeSpan2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSpan1"/> is null. -or-
            <paramref name="timeSpan2"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Add(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Adds a time span to the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to add to the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a sum of the <paramref name="timeSpan"/> and the
            current time span.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Subtract(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanMode)">
            <summary>
            Subtracts a time span from the current one.
            </summary>
            <remarks>
            If <paramref name="timeSpan"/> and the current time span have the same type,
            the result time span will be of this type too; otherwise - of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            </remarks>
            <param name="timeSpan">Time span to subtract from the current one.</param>
            <param name="mode">Mode of the operation that defines meaning of time spans the
            operation will be performed on.</param>
            <returns>Time span that is a difference between the <paramref name="timeSpan"/> and the
            current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Multiply(System.Double)">
            <summary>
            Stretches the current time span by multiplying its length by the specified multiplier.
            </summary>
            <param name="multiplier">Multiplier to stretch the time span by.</param>
            <returns>Time span that is the current time span stretched by the <paramref name="multiplier"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Divide(System.Double)">
            <summary>
            Shrinks the current time span by dividing its length by the specified divisor.
            </summary>
            <param name="divisor">Divisor to shrink the time span by.</param>
            <returns>Time span that is the current time span shrinked by the <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Clone">
            <summary>
            Clones the current time span.
            </summary>
            <returns>Copy of the current time span.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes obj
            in the sort order. Zero This instance occurs in the same position in the sort order as obj.
            Greater than zero This instance follows obj in the sort order.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.CompareTo(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same
            position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes other
            in the sort order. Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan.Equals(Melanchall.DryWetMidi.Smf.Interaction.MusicalTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType">
            <summary>
            The type of a time span.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Metric">
            <summary>
            Metric time span which represents hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Musical">
            <summary>
            Musical time span which represents a fraction of the whole note's length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.BarBeat">
            <summary>
            Bar/beat time span which represents bars, beats and ticks.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi">
            <summary>
            MIDI time span which represnts an amount of time measured in units of the time division
            of a MIDI file.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities">
            <summary>
            Provides useful utilities for working with <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan@)">
            <summary>
            Converts the string representation of a time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.TryParse(System.String,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan@)">
            <summary>
            Converts the string representation of a time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> equivalent using
            the specified type of time span. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <param name="timeSpanType">the type of time span to convert <paramref name="input"/> to.</param>
            <param name="timeSpan">When this method returns, contains the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/>
            equivalent of the time span contained in <paramref name="input"/>, if the conversion succeeded, or
            null if the conversion failed. The conversion fails if the <paramref name="input"/> is null or
            <see cref="F:System.String.Empty"/>, or is not of the correct format. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.</param>
            <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.Parse(System.String)">
            <summary>
            Converts the string representation of a time span to its <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> equivalent.
            </summary>
            <param name="input">A string containing a time span to convert.</param>
            <returns>A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> equivalent to the time span contained in <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is null or contains white-spaces only.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> has invalid format.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.GetMaxTimeSpan(Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Gets an object that represents maximum value of time span defined by the specified
            time span type.
            </summary>
            <param name="timeSpanType">The type of time span to get maximum value.</param>
            <returns>An object that represents maximum value of time span defined by <paramref name="timeSpanType"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeSpanType"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.GetZeroTimeSpan(Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Gets an object that represents zero value of time span defined by the specified
            time span type.
            </summary>
            <param name="timeSpanType">The type of time span to get zero value.</param>
            <returns>An object that represents zero value of time span defined by <paramref name="timeSpanType"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeSpanType"/> specified an
            invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanUtilities.GetZeroTimeSpan``1">
            <summary>
            Gets an object that represents zero value of time span defined by the specified
            time span type.
            </summary>
            <typeparam name="TTimeSpan">The type of time span to get zero value.</typeparam>
            <returns>An object that represents zero value of time span defined by <typeparamref name="TTimeSpan"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MathOperation">
            <summary>
            Represents a simple math operation used by the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.MathTimeSpan"/>.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.MathOperation.Add"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MathOperation.Add">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.MathOperation.Subtract">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities">
            <summary>
            Utility methods for <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.GetDuration``1(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets the duration of the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>. Duration is
            defined by the time of last MIDI event of the file.
            </summary>
            <typeparam name="TTimeSpan">The type of time span representing the duration of <paramref name="midiFile"/>.</typeparam>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to get duration of.</param>
            <returns>An instance of <typeparamref name="TTimeSpan"/> representing
            duration of <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTimeSpan"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.GetDuration(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Gets the duration of the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>. Duration is
            defined by the time of last MIDI event of the file.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to get duration of.</param>
            <param name="durationType">The type of time span representing the duration of <paramref name="midiFile"/>.</param>
            <returns>An implementation of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> representing
            duration of <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="durationType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.IsEmpty(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Checks whether the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> is empty or not. <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>
            is empty when it doesn't contain MIDI events.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to check emptiness of.</param>
            <returns>A value indicating whether <paramref name="midiFile"/> is empty or not.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.ShiftEvents(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Shifts events forward inside <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified distance.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing events to shift.</param>
            <param name="distance">Distance to shift events by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="distance"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.Resize(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Resizes <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to the specified length.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to resize.</param>
            <param name="length">New length of the <paramref name="midiFile"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="length"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.MidiFileUtilities.Resize(Melanchall.DryWetMidi.Smf.MidiFile,System.Double)">
            <summary>
            Resizes <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified ratio.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to resize.</param>
            <param name="ratio">Ratio to resize <paramref name="midiFile"/> by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is negative.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TrackChunkUtilities">
            <summary>
            Utility methods for <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TrackChunkUtilities.ShiftEvents(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Shifts events forward inside <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified distance.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to shift.</param>
            <param name="distance">Distance to shift events by.</param>
            <param name="tempoMap">Tempo map used for internal distance conversions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TrackChunkUtilities.ShiftEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Shifts events forward inside collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified distance.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing events to shift.</param>
            <param name="distance">Distance to shift events by.</param>
            <param name="tempoMap">Tempo map used for internal distance conversions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.Chord">
            <summary>
            Represents a musical chord.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Smf.Interaction.Chord.NotesCollectionChanged">
            <summary>
            Occurs when notes collection changes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> with the specified
            collection of notes.
            </summary>
            <param name="notes">Notes to combine into a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.#ctor(Melanchall.DryWetMidi.Smf.Interaction.Note[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> with the specified
            collection of notes.
            </summary>
            <param name="notes">Notes to combine into a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> with the specified
            collection of notes and chord time.
            </summary>
            <param name="notes">Notes to combine into a chord.</param>
            <param name="time">Time of the chord which is time of the earliest note of the <paramref name="notes"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.Notes">
            <summary>
            Gets a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/> that represents notes of this chord.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.Time">
            <summary>
            Gets absolute time of the chord in units defined by the time division of a MIDI file.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Time is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.Length">
            <summary>
            Gets length of the chord in units defined by the time division of a MIDI file.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.Channel">
            <summary>
            Gets or sets channel to play the chord on.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get channel since a chord doesn't contain notes.
            -or- Unable to get channel since chord's notes have different <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Velocity"/>.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.Velocity">
            <summary>
            Gets or sets velocity of the underlying <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> events of a chord's notes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get velocity since a chord doesn't contain notes.
            -or- Unable to get velocity since chord's notes have different <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Velocity"/>.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Chord.OffVelocity">
            <summary>
            Gets or sets velocity of the underlying <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> events of a chord's notes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get off velocity since a chord doesn't contain notes.
            -or- Unable to get off velocity since chord's notes have different <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.OffVelocity"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.Clone">
            <summary>
            Clones chord by creating a copy of it.
            </summary>
            <returns>Copy of the chord.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.Split(System.Int64)">
            <summary>
            Splits the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> by the specified time.
            </summary>
            <remarks>
            If <paramref name="time"/> is less than time of the chord, the left part will be null.
            If <paramref name="time"/> is greater than end time of the chord, the right part
            will be null.
            </remarks>
            <param name="time">Time to split the chord by.</param>
            <returns>An object containing left and right parts of the splitted <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/>.
            Both parts are instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> too.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.GetNotesProperty``1(System.Linq.Expressions.Expression{System.Func{Melanchall.DryWetMidi.Smf.Interaction.Note,``0}})">
            <summary>
            Gets value of the specified note's property.
            </summary>
            <typeparam name="TValue">Type of a note's property.</typeparam>
            <param name="propertySelector">Expression that represent a note's property.</param>
            <returns>Value of the specified note's property.</returns>
            <exception cref="T:System.InvalidOperationException">Chord doesn't contain notes. -or-
            Chord's notes have different values of the specified property.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Chord.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> objects.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.CollectionChanged">
            <summary>
            Occurs when chords collection changes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.OnObjectsAdded(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Performs an action when objects are added to the collection.
            </summary>
            <param name="addedObjects">Collection of added objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.OnObjectsRemoved(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Performs an action when objects are removed from the collection.
            </summary>
            <param name="removedObjects">Collection of removed objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.OnCollectionChanged(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Fires the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.CollectionChanged"/> event.
            </summary>
            <param name="addedChords">Chords added to the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.</param>
            <param name="removedChords">Chords removed from the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs"/> class with the
            specified added chords and removed ones.
            </summary>
            <param name="addedChords">Chords that were added to a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.</param>
            <param name="removedChords">Chords that were removed from a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs.AddedChords">
            <summary>
            Gets chords that were added to a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs.RemovedChords">
            <summary>
            Gets chords that were removed from a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection.CollectionChanged"/> event raised when
            a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/> changed.
            </summary>
            <param name="collection"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/> that has fired the event.</param>
            <param name="args">A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager">
            <summary>
            Provides a way to manage chords of a MIDI file.
            </summary>
            <remarks>
            This manager is wrapper for the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> that provides easy manipulation
            of sets of <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> and <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> events through the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/>
            objects. To start manage chords you need to get an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/>. To
            finish managing you need to call the <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.SaveChanges"/> or <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.Dispose"/> method.
            Since the manager implements <see cref="T:System.IDisposable"/> it is recommended to manage chords within
            using block.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.#ctor(Melanchall.DryWetMidi.Smf.EventsCollection,System.Int64,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> with the specified events
            collection, notes tolerance and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds chord events to manage.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.Chords">
            <summary>
            Gets the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsCollection"/> with all chords managed by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.SaveChanges">
            <summary>
            Saves all chords that were managed with the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> updating
            underlying events collection.
            </summary>
            <remarks>
            This method will rewrite content of the events collection was used to construct the current
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> with events were managed by this manager. Also all delta-times
            of wrapped events will be recalculated according to the <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Time"/> and
            <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Length"/> of chords notes.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities">
            <summary>
            Extension methods for chords managing.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.SetTimeAndLength(Melanchall.DryWetMidi.Smf.Interaction.Chord,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Sets time and length of the specified chord.
            </summary>
            <param name="chord">Chord to set time and length to.</param>
            <param name="time">Time to set to <paramref name="chord"/>.</param>
            <param name="length">Length to set to <paramref name="chord"/>.</param>
            <param name="tempoMap">Tempo map that will be used for time and length conversion.</param>
            <returns>An input <paramref name="chord"/> with new time and length.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chord"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="length"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ManageChords(Melanchall.DryWetMidi.Smf.EventsCollection,System.Int64,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> initializing it with the
            specified events collection, notes tolerance and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds chords to manage.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> that can be used to manage chords
            represented by the <paramref name="eventsCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ManageChords(Melanchall.DryWetMidi.Smf.TrackChunk,System.Int64,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> initializing it with the
            events collection of the specified track chunk, notes tolerance and comparison delegate for events
            that have same time.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> that holds chords to manage.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ChordsManager"/> that can be used to manage
            chords represented by the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent},System.Int64)">
            <summary>
            Gets chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/>.
            </summary>
            <param name="events">Collection of<see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for chords.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords contained in <paramref name="events"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(Melanchall.DryWetMidi.Smf.EventsCollection,System.Int64)">
            <summary>
            Gets chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for chords.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords contained in <paramref name="eventsCollection"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(Melanchall.DryWetMidi.Smf.TrackChunk,System.Int64)">
            <summary>
            Gets chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for chords.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords contained in <paramref name="trackChunk"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Int64)">
            <summary>
            Gets chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Track chunks to search for chords.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords contained in <paramref name="trackChunks"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(Melanchall.DryWetMidi.Smf.MidiFile,System.Int64)">
            <summary>
            Gets chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for chords.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords contained in <paramref name="file"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.GetChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Int64)">
            <summary>
            Creates chords from notes.
            </summary>
            <param name="notes">Notes to create chords from.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <returns>Collection of chords made up from <paramref name="notes"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ProcessChords(Melanchall.DryWetMidi.Smf.EventsCollection,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for chords to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the
            <paramref name="eventsCollection"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to process.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="action"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ProcessChords(Melanchall.DryWetMidi.Smf.TrackChunk,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for chords to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the
            <paramref name="trackChunk"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to process.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="action"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ProcessChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Action{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the collection of
            <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for chords to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the
            <paramref name="trackChunks"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to process.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="action"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ProcessChords(Melanchall.DryWetMidi.Smf.MidiFile,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for chords to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> contained in the
            <paramref name="file"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to process.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null. -or-
            <paramref name="action"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.RemoveChords(Melanchall.DryWetMidi.Smf.EventsCollection,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for chords to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to remove.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.RemoveChords(Melanchall.DryWetMidi.Smf.TrackChunk,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for chords to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to remove.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.RemoveChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for chords to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to remove.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.RemoveChords(Melanchall.DryWetMidi.Smf.MidiFile,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Chord},System.Int64)">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for chords to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Chord"/> to remove.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.AddChords(Melanchall.DryWetMidi.Smf.EventsCollection,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Adds collection of chords to the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to add chords to.</param>
            <param name="chords">Chords to add to the <paramref name="eventsCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="chords"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.AddChords(Melanchall.DryWetMidi.Smf.TrackChunk,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Adds collection of chords to the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to add chords to.</param>
            <param name="chords">Chords to add to the <paramref name="trackChunk"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="chords"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ToTrackChunk(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Creates a track chunk with the specified chords.
            </summary>
            <param name="chords">Collection of chords to create a track chunk.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing the specified chords.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chords"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ChordsManagingUtilities.ToFile(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Chord})">
            <summary>
            Creates a MIDI file with the specified chords.
            </summary>
            <param name="chords">Collection of chords to create a MIDI file.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing the specified chords.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chords"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject">
            <summary>
            Represents an object that has length.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject.Length">
            <summary>
            Gets length of an object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject">
            <summary>
            Represents an object that has start time.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject.Time">
            <summary>
            Gets start time of an object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart">
            <summary>
            Part of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart.Start">
            <summary>
            Start of an object.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart.End">
            <summary>
            End of an object.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart.Entire">
            <summary>
            Entire object from its start to its end.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities">
            <summary>
            Extension methods for objects that implement the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> interface.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.LengthAs``1(Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets length of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> as an instance of type that
            implements the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> interface.
            </summary>
            <typeparam name="TLength">Type that will represent the length of the <paramref name="obj"/>.</typeparam>
            <param name="obj">Object to get length of.</param>
            <param name="tempoMap">Tempo map to calculate length of the <paramref name="obj"/>.</param>
            <returns>Length of the specified object as an instance of <typeparamref name="TLength"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TLength"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.LengthAs(Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets length of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> as an instance of type defined by the
            specified time span type.
            </summary>
            <param name="obj">Object to get length of.</param>
            <param name="lengthType">The type of time span to convert the length of <paramref name="obj"/> to.</param>
            <param name="tempoMap">Tempo map to calculate length of the <paramref name="obj"/>.</param>
            <returns>Time of the specified object as an instance of time span defined by the
            <paramref name="lengthType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.EndTimeAs``1(Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets end time of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> as an instance of type that implements the
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> interface.
            </summary>
            <typeparam name="TTime">Type that will represent the end time of the <paramref name="obj"/>.</typeparam>
            <param name="obj">Object to get end time of.</param>
            <param name="tempoMap">Tempo map to calculate end time of the <paramref name="obj"/>.</param>
            <returns>End time of the specified object as an instance of <typeparamref name="TTime"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTime"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.EndTimeAs(Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets end time of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> as an instance of time span defined by the
            specified time span type.
            </summary>
            <param name="obj">Object to get end time of.</param>
            <param name="timeType">The type of time span to convert the end time of <paramref name="obj"/> to.</param>
            <param name="tempoMap">Tempo map to calculate end time of the <paramref name="obj"/>.</param>
            <returns>End time of the specified object as an instance of time span defined by the
            <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.StartAtTime``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects that start at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Start time to filter objects by.</param>
            <returns>A collection that contains objects from the input sequence that start at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- One of the objects is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.EndAtTime``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects that end at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">End time to filter objects by.</param>
            <returns>A collection that contains objects from the input sequence that end at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- One of the objects is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.StartAtTime``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects that start at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Start time to filter objects by.</param>
            <param name="tempoMap">Tempo map to filter <paramref name="objects"/> by <paramref name="time"/>.</param>
            <returns>A collection that contains objects from the input sequence that start at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- One of the objects is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.EndAtTime``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects that end at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">End time to filter objects by.</param>
            <param name="tempoMap">Tempo map to filter <paramref name="objects"/> by <paramref name="time"/>.</param>
            <returns>A collection that contains objects from the input sequence that end at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- One of the objects is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.AtTime``1(System.Collections.Generic.IEnumerable{``0},System.Int64,Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Time to filter objects by.</param>
            <param name="matchBy">Part of an object which have to be at <paramref name="time"/>.</param>
            <returns>A collection that contains objects from the input sequence that are at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- One of the objects is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="matchBy"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.AtTime``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to return objects at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Time to filter objects by.</param>
            <param name="tempoMap">Tempo map to filter <paramref name="objects"/> by <paramref name="time"/>.</param>
            <param name="matchBy">Part of an object which have to be at <paramref name="time"/>.</param>
            <returns>A collection that contains objects from the input sequence that are at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of lengthed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null. -or- One of the objects is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="matchBy"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectUtilities.IsObjectAtTime``1(``0,System.Int64,Melanchall.DryWetMidi.Smf.Interaction.LengthedObjectPart)">
            <summary>
            Checks if an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> is at the specified time.
            </summary>
            <typeparam name="TObject">Type of an object.</typeparam>
            <param name="obj"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ILengthedObject"/> to check.</param>
            <param name="time">Time to check the <paramref name="obj"/>.</param>
            <param name="matchBy">Part of the <paramref name="obj"/> which have to be at <paramref name="time"/>.</param>
            <returns>true if <paramref name="obj"/> is at <paramref name="time"/>; false - otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> objects.
            </summary>
        </member>
        <member name="E:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.CollectionChanged">
            <summary>
            Occurs when notes collection changes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.OnObjectsAdded(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs an action when objects are added to the collection.
            </summary>
            <param name="addedObjects">Collection of added objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.OnObjectsRemoved(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs an action when objects are removed from the collection.
            </summary>
            <param name="removedObjects">Collection of removed objects.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.OnCollectionChanged(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Fires the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.CollectionChanged"/> event.
            </summary>
            <param name="addedNotes">Notes added to the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.</param>
            <param name="removedNotes">Notes removed from the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs"/> class with the
            specified added notes and removed ones.
            </summary>
            <param name="addedNotes">Notes that were added to a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.</param>
            <param name="removedNotes">Notes that were removed from a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs.AddedNotes">
            <summary>
            Gets notes that were added to a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs.RemovedNotes">
            <summary>
            Gets notes that were removed from a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection.CollectionChanged"/> event raised when
            a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/> changed.
            </summary>
            <param name="collection"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/> that has fired the event.</param>
            <param name="args">A <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities">
            <summary>
            Extension methods for notes managing.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.SetTimeAndLength(Melanchall.DryWetMidi.Smf.Interaction.Note,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Sets time and length of the specified note.
            </summary>
            <param name="note">Note to set time and length to.</param>
            <param name="time">Time to set to <paramref name="note"/>.</param>
            <param name="length">Length to set to <paramref name="note"/>.</param>
            <param name="tempoMap">Tempo map that will be used for time and length conversion.</param>
            <returns>An input <paramref name="note"/> with new time and length.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="note"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="length"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ManageNotes(Melanchall.DryWetMidi.Smf.EventsCollection,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> initializing it with the
            specified events collection and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds notes to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> that can be used to manage
            notes represented by the <paramref name="eventsCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ManageNotes(Melanchall.DryWetMidi.Smf.TrackChunk,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> initializing it with the
            events collection of the specified track chunk and comparison delegate for events
            that have same time.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> that holds notes to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> that can be used to manage
            notes represented by the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.GetNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Gets notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/>.
            </summary>
            <param name="events">Collection of<see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for notes.</param>
            <returns>Collection of notes contained in <paramref name="events"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.GetNotes(Melanchall.DryWetMidi.Smf.EventsCollection)">
            <summary>
            Gets notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for notes.</param>
            <returns>Collection of notes contained in <paramref name="eventsCollection"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.GetNotes(Melanchall.DryWetMidi.Smf.TrackChunk)">
            <summary>
            Gets notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for notes.</param>
            <returns>Collection of notes contained in <paramref name="trackChunk"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.GetNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk})">
            <summary>
            Gets notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Track chunks to search for notes.</param>
            <returns>Collection of notes contained in <paramref name="trackChunks"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.GetNotes(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for notes.</param>
            <returns>Collection of notes contained in <paramref name="file"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ProcessNotes(Melanchall.DryWetMidi.Smf.EventsCollection,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for notes to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the
            <paramref name="eventsCollection"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ProcessNotes(Melanchall.DryWetMidi.Smf.TrackChunk,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for notes to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the
            <paramref name="trackChunk"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ProcessNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Action{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the collection of
            <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for notes to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the
            <paramref name="trackChunks"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ProcessNotes(Melanchall.DryWetMidi.Smf.MidiFile,System.Action{Melanchall.DryWetMidi.Smf.Interaction.Note},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for notes to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> contained in the
            <paramref name="file"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.RemoveNotes(Melanchall.DryWetMidi.Smf.EventsCollection,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for notes to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.RemoveNotes(Melanchall.DryWetMidi.Smf.TrackChunk,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for notes to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.RemoveNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for notes to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.RemoveNotes(Melanchall.DryWetMidi.Smf.MidiFile,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for notes to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.AddNotes(Melanchall.DryWetMidi.Smf.EventsCollection,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Adds collection of notes to the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to add notes to.</param>
            <param name="notes">Notes to add to the <paramref name="eventsCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.AddNotes(Melanchall.DryWetMidi.Smf.TrackChunk,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Adds collection of notes to the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to add notes to.</param>
            <param name="notes">Notes to add to the <paramref name="trackChunk"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ToTrackChunk(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Creates a track chunk with the specified notes.
            </summary>
            <param name="notes">Collection of notes to create a track chunk.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing the specified notes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManagingUtilities.ToFile(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Creates a MIDI file with the specified notes.
            </summary>
            <param name="notes">Collection of notes to create a MIDI file.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing the specified notes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo">
            <summary>
            Represents tempo expressed in microseconds per quarter note or beats per minute.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.Tempo.Default">
            <summary>
            Default tempo which is 500,000 microseconds per quarter note or 120 beats per minute.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> with the specified number of
            microseconds per quarter note.
            </summary>
            <param name="microsecondsPerQuarterNote">Number of microseconds per quarter note.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="microsecondsPerQuarterNote"/>
            is zero or negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Tempo.MicrosecondsPerQuarterNote">
            <summary>
            Gets number of microseconds per quarter note.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Tempo.BeatsPerMinute">
            <summary>
            Gets number of beats per minute.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.FromMillisecondsPerQuarterNote(System.Int64)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> with the specified number of
            milliseconds per quarter note.
            </summary>
            <param name="millisecondsPerQuarterNote">Number of milliseconds per quarter note.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> which represents tempo as specified
            number of milliseconds per quarter note.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsPerQuarterNote"/>
            is zero or negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.FromBeatsPerMinute(System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> with the specified number of
            beats per minute.
            </summary>
            <param name="beatsPerMinute">Number of beats per minute.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> which represents tempo as specified
            number of beats per minute.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beatsPerMinute"/>
            is zero or negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.Tempo,Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> objects are equal.
            </summary>
            <param name="tempo1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> to compare.</param>
            <param name="tempo2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> to compare.</param>
            <returns>true if the tempos are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.Tempo,Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> objects are not equal.
            </summary>
            <param name="tempo1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> to compare.</param>
            <param name="tempo2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Tempo"/> to compare.</param>
            <returns>false if the tempos are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Tempo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap">
            <summary>
            Represents a tempo map of a MIDI file.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Default">
            <summary>
            The default tempo map which uses 4/4 time signature and tempo of 500,000 microseconds per quarter note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.#ctor(Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division
            of a MIDI file.
            </summary>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.TimeDivision">
            <summary>
            Gets the time division used by a tempo map.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.TimeSignature">
            <summary>
            Gets an object that holds changes of the time signature through the time.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Tempo">
            <summary>
            Gets an object that holds changes of the tempo through the time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Clone">
            <summary>
            Clones the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/>.
            </summary>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> which is a clone of the current one.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.Interaction.Tempo,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified tempo and
            time signature using default time division (96 ticks per quarter note).
            </summary>
            <param name="tempo">Tempo of the tempo map.</param>
            <param name="timeSignature">Time signature of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified tempo and time signature.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempo"/> is null. -or-
            <paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified tempo using
            default time division (96 ticks per quarter note).
            </summary>
            <param name="tempo">Tempo of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified tempo.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempo"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time signature using
            default time division (96 ticks per quarter note).
            </summary>
            <param name="timeSignature">Time signature of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time signature.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division using
            default tempo (120 BPM) and default time signature (4/4).
            </summary>
            <param name="timeDivision">Time division of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.TimeDivision,Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division and
            tempo using default time signature (4/4).
            </summary>
            <param name="timeDivision">Time division of the tempo map.</param>
            <param name="tempo">Tempo of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division and tempo.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null. -or-
            <paramref name="tempo"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.TimeDivision,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division and
            time signature using default tempo (120 BPM).
            </summary>
            <param name="timeDivision">Time division of the tempo map.</param>
            <param name="timeSignature">Time signature of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division and time signature.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null. -or-
            <paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Create(Melanchall.DryWetMidi.Smf.TimeDivision,Melanchall.DryWetMidi.Smf.Interaction.Tempo,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division,
            tempo and time signature.
            </summary>
            <param name="timeDivision">Time division of the tempo map.</param>
            <param name="tempo">Tempo of the tempo map.</param>
            <param name="timeSignature">Time signature of the tempo map.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMap"/> with the specified time division, tempoand time signature.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null. -or-
            <paramref name="tempo"/> is null. -or- <paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMap.Flip(System.Int64)">
            <summary>
            Flips the tempo map relative to the specified time.
            </summary>
            <param name="centerTime">The time the tempo map should be flipped relative to.</param>
            <returns>The tempo mup flipped relative to the <paramref name="centerTime"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager">
            <summary>
            Provides a way to manage tempo map of a MIDI file.
            </summary>
            <remarks>
            This manager is wrapper for the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> that provides easy manipulation
            of specific MIDI events: <see cref="T:Melanchall.DryWetMidi.Smf.SetTempoEvent"/> and <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/>. Also it
            provides <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.TempoMap"/> that can be used to calculate custom representations of time
            and length of an object. To start manage tempo map you need to get an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/>. To finish managing you need to call the <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SaveChanges"/>
            or <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.Dispose"/> method. Since the manager implements <see cref="T:System.IDisposable"/> it is
            recommended to manage tempo map within using block.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> that can be used
            to manage new tempo map with the default time division (96 ticks per quarter note).
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.#ctor(Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> with the
            specified time division.
            </summary>
            <param name="timeDivision">Time division of a new tempo that will be managed by this manager.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.#ctor(Melanchall.DryWetMidi.Smf.TimeDivision,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.EventsCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> with the specified time division
            and events collections.
            </summary>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <param name="eventsCollections">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> which hold events that
            represent tempo map of a MIDI file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeDivision"/> is null. -or-
            <paramref name="eventsCollections"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="eventsCollections"/> is empty.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.TempoMap">
            <summary>
            Gets current tempo map built by the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SetTimeSignature(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Sets new time signature that will last from the specified time until next change of
            time signature.
            </summary>
            <param name="time">Time to set the new time signature at.</param>
            <param name="timeSignature">New time signature that will last from the specified
            time until next change of time signature.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SetTimeSignature(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Sets new time signature that will last from the specified time until next change of
            time signature.
            </summary>
            <param name="time">Time to set the new time signature at.</param>
            <param name="timeSignature">New time signature that will last from the specified
            time until next change of time signature.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="timeSignature"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTimeSignature(System.Int64)">
            <summary>
            Removes all changes of time signature that occured since the specified time.
            </summary>
            <param name="startTime">Time to remove changes of time signature since.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTimeSignature(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Removes all changes of time signature that occured since the specified time.
            </summary>
            <param name="startTime">Time to remove changes of time signature since.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startTime"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTimeSignature(System.Int64,System.Int64)">
            <summary>
            Removes all changes of time signature that occured between the specified times.
            </summary>
            <param name="startTime">Start of time range to remove changes of time signature in.</param>
            <param name="endTime">End of time range to remove changes of time signature in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative. -or-
            <paramref name="endTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTimeSignature(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Removes all changes of time signature that occured between the specified times.
            </summary>
            <param name="startTime">Start of time range to remove changes of time signature in.</param>
            <param name="endTime">End of time range to remove changes of time signature in.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startTime"/> is null. -or-
            <paramref name="endTime"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SetTempo(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Sets new tempo that will last from the specified time until next change of tempo.
            </summary>
            <param name="time">Time to set the new tempo at.</param>
            <param name="tempo">New tempo that will last from the specified time until next change
            of tempo.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempo"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SetTempo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.Tempo)">
            <summary>
            Sets new tempo that will last from the specified time until next change of tempo.
            </summary>
            <param name="time">Time to set the new tempo at.</param>
            <param name="tempo">New tempo that will last from the specified time until next change
            of tempo.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="time"/> is null. -or-
            <paramref name="tempo"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTempo(System.Int64)">
            <summary>
            Removes all changes of tempo that occured since the specified time.
            </summary>
            <param name="startTime">Time to remove changes of tempo since.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTempo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Removes all changes of tempo that occured since the specified time.
            </summary>
            <param name="startTime">Time to remove changes of tempo since.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startTime"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTempo(System.Int64,System.Int64)">
            <summary>
            Removes all changes of tempo that occured between the specified times.
            </summary>
            <param name="startTime">Start of time range to remove changes of tempo in.</param>
            <param name="endTime">End of time range to remove changes of tempo in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative. -or-
            <paramref name="endTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTempo(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Removes all changes of tempo that occured between the specified times.
            </summary>
            <param name="startTime">Start of time range to remove changes of tempo in.</param>
            <param name="endTime">End of time range to remove changes of tempo in.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startTime"/> is null. -or-
            <paramref name="endTime"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ClearTempoMap">
            <summary>
            Clears current tempo map removing all changes of tempo and time signature.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.ReplaceTempoMap(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Replaces current tempo map with the specified one.
            </summary>
            <param name="tempoMap">Tempo map to replace the current one.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.SaveChanges">
            <summary>
            Saves tempo map changes that were made with the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> updating
            underlying events collections.
            </summary>
            <remarks>
            This method will rewrite content of all events collections were used to construct the current
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> with events were managed by underlying <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/>
            objects of this manager. Also all delta-times of wrapped events will be recalculated according to
            the <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Time"/> of event wrappers.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities">
            <summary>
            Extension methods for managing tempo map.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ManageTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.EventsCollection},Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> initializing it with the
            specified events collections and time division.
            </summary>
            <param name="eventsCollections">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> which hold events
            that represent tempo map of a MIDI file.</param>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> that can be used to manage
            tempo map represented by the <paramref name="eventsCollections"/> and <paramref name="timeDivision"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollections"/> is null. -or-
            <paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ManageTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> initializing it with the
            specified time division and events collections of the specified track chunks.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> which hold events
            that represent tempo map of a MIDI file.</param>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> that can be used to manage
            tempo map represented by the <paramref name="trackChunks"/> and <paramref name="timeDivision"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ManageTempoMap(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> initializing it with the
            events collections of the specified MIDI file.
            </summary>
            <param name="file">MIDI file to manage tempo map of.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> that can be used to manage
            tempo map of the <paramref name="file"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.GetTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.EventsCollection},Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Gets tempo map represented by the specified events collections and time division.
            </summary>
            <param name="eventsCollections">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> which hold events
            that represent tempo map of a MIDI file.</param>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <returns>Tempo map represented by the <paramref name="eventsCollections"/> and
            <paramref name="timeDivision"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollections"/> is null. -or-
            <paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.GetTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.TimeDivision)">
            <summary>
            Gets tempo map represented by the specified time division and events collections of
            the specified track chunks.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> which hold events
            that represent tempo map of a MIDI file.</param>
            <param name="timeDivision">MIDI file time division which specifies the meaning of the time
            used by events of the file.</param>
            <returns>Tempo map represented by the <paramref name="trackChunks"/> and <paramref name="timeDivision"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="timeDivision"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.GetTempoMap(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets tempo map of the specified MIDI file.
            </summary>
            <param name="file">MIDI file to get tempo map of.</param>
            <returns>Tempo map of the <paramref name="file"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ReplaceTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.EventsCollection},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Replaces tempo map contained in the specified collection of the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> with
            another one.
            </summary>
            <param name="eventsCollections">Collection of the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> holding a tempo map to replace.</param>
            <param name="tempoMap">Tempo map to replace the one contained in the <paramref name="eventsCollections"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollections"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="eventsCollections"/> is empty.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ReplaceTempoMap(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Replaces tempo map contained in the specified collection of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> with
            another one.
            </summary>
            <param name="trackChunks">Collection of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> holding a tempo map to replace.</param>
            <param name="tempoMap">Tempo map to replace the one contained in the <paramref name="trackChunks"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="trackChunks"/> is empty.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManagingUtilities.ReplaceTempoMap(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Replaces tempo map contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> with another one.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> holding a tempo map to replace.</param>
            <param name="tempoMap">Tempo map to replace the one contained in the <paramref name="file"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="file"/> is empty.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature">
            <summary>
            Represents time signature which is number of beats of specified length.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.Default">
            <summary>
            Default time signature which is 4/4.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> with the specified
            numerator and denominator.
            </summary>
            <param name="numerator">Numerator of the time signature which defines number of beats.</param>
            <param name="denominator">Denominator of the time signature which defines beat length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numerator"/> is zero or negative. -or-
            <paramref name="denominator"/> is zero or negative. -or- <paramref name="denominator"/> is not a
            power of two.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.Numerator">
            <summary>
            Gets numerator of the time signature which defines number of beats.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.Denominator">
            <summary>
            Gets denominator of the time signature which defines beat length.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.TimeSignature,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> objects are equal.
            </summary>
            <param name="timeSignature1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> to compare.</param>
            <param name="timeSignature2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> to compare.</param>
            <returns>true if the time signatures are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.TimeSignature,Melanchall.DryWetMidi.Smf.Interaction.TimeSignature)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> objects are not equal.
            </summary>
            <param name="timeSignature1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> to compare.</param>
            <param name="timeSignature2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature"/> to compare.</param>
            <returns>false if the time signatures are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimeSignature.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1">
            <summary>
            Represents a change of a parameter's value at some time.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.#ctor(System.Int64,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> with the specified
            time of change and new value.
            </summary>
            <param name="time">MIDI time when value is changed.</param>
            <param name="value">New value that will last until next value change.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.Time">
            <summary>
            Gets the MIDI time when value is changed.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.Value">
            <summary>
            Gets the new value that will last until next value change.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.op_Equality(Melanchall.DryWetMidi.Smf.Interaction.ValueChange{`0},Melanchall.DryWetMidi.Smf.Interaction.ValueChange{`0})">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> objects are equal.
            </summary>
            <param name="change1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> to compare.</param>
            <param name="change2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> to compare.</param>
            <returns>true if the value changes are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.op_Inequality(Melanchall.DryWetMidi.Smf.Interaction.ValueChange{`0},Melanchall.DryWetMidi.Smf.Interaction.ValueChange{`0})">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> objects are not equal.
            </summary>
            <param name="change1">The first <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> to compare.</param>
            <param name="change2">The second <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1"/> to compare.</param>
            <returns>false if the value changes are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueChange`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1">
            <summary>
            Represents timeline of a parameter's value.
            </summary>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1"/> with the specified
            default value.
            </summary>
            <param name="defaultValue">Default value of a parameter.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.AtTime(System.Int64)">
            <summary>
            Gets value at specified time.
            </summary>
            <param name="time">Time to get a value at.</param>
            <returns>Parameter's value at the <paramref name="time"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.SetValue(System.Int64,`0)">
            <summary>
            Sets new value at specified time that will last until next value change.
            </summary>
            <param name="time">Time parameter's value should be changed at.</param>
            <param name="value">New parameter's value that will last until next value change.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.DeleteValues(System.Int64)">
            <summary>
            Deletes all parameter's value changes after the specified time.
            </summary>
            <param name="startTime">Time value changes should be deleted after.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.DeleteValues(System.Int64,System.Int64)">
            <summary>
            Deletes all parameter's value changes in the specified time range.
            </summary>
            <param name="startTime">Start time of the time range where value changes should be deleted.</param>
            <param name="endTime">End time of the time range where value changes should be deleted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startTime"/> is negative. -or-
            <paramref name="endTime"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ValueLine`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection">
            <summary>
            Collection of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> objects that wrap MIDI events providing
            a way to manage their absolute time.
            </summary>
            <remarks>
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/> can be enumerated returning timed events in order
            of increasing <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Time"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TempoMapManager"/> with the specified
            collection of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> and comparison delegate for events that have same time.
            </summary>
            <param name="events">Events to put into this <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/>.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <remarks>
            If the <paramref name="sameTimeEventsComparison"/> is not specified events with the same time
            will be placed into the underlying events collection in order of adding them through the manager.
            If you want to specify custom order of such events you need to specify appropriate comparison delegate.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities">
            <summary>
            Extension methods for managing MIDI events by their absolute time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.SetTime(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Sets time of the specified timed event.
            </summary>
            <param name="timedEvent">Timed event to set time to.</param>
            <param name="time">Time to set to <paramref name="timedEvent"/>.</param>
            <param name="tempoMap">Tempo map that will be used for time conversion.</param>
            <returns>An input <paramref name="timedEvent"/> with new time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="timedEvent"/> is null. -or-
            <paramref name="time"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ManageTimedEvents(Melanchall.DryWetMidi.Smf.EventsCollection,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> initializing it with the
            specified events collection and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds events to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> that can be used to manage
            events represented by the <paramref name="eventsCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ManageTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Creates an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> initializing it with the
            events collection of the specified track chunk and comparison delegate for events
            that have same time.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> that holds events to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> that can be used to manage
            events represented by the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.GetTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Gets collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> as a collection of timed events.
            </summary>
            <param name="events">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> to get timed events for.</param>
            <returns>Collection of timed events contained in <paramref name="events"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.GetTimedEvents(Melanchall.DryWetMidi.Smf.EventsCollection)">
            <summary>
            Gets timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for events.</param>
            <returns>Collection of timed events contained in <paramref name="eventsCollection"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.GetTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk)">
            <summary>
            Gets timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for events.</param>
            <returns>Collection of timed events contained in <paramref name="trackChunk"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.GetTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk})">
            <summary>
            Gets timed events contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Track chunks to search for events.</param>
            <returns>Collection of timed events contained in <paramref name="trackChunks"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.GetTimedEvents(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for events.</param>
            <returns>Collection of timed events contained in <paramref name="file"/> ordered by time.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.AddEvent(Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection,Melanchall.DryWetMidi.Smf.MidiEvent,System.Int64)">
            <summary>
            Adds a <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> into a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/> with the specified
            absolute time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/> to add an event into.</param>
            <param name="midiEvent">Event to add into the <paramref name="eventsCollection"/>.</param>
            <param name="time">Absolute time that will be assigned to the <paramref name="midiEvent"/>
            when it will be placed into the <paramref name="eventsCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="midiEvent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.AddEvent(Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection,Melanchall.DryWetMidi.Smf.MidiEvent,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Adds a <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> into a <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/> with the specified
            absolute time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsCollection"/> to add an event into.</param>
            <param name="midiEvent">Event to add into the <paramref name="eventsCollection"/>.</param>
            <param name="time">Absolute time that will be assigned to the <paramref name="midiEvent"/>
            when it will be placed into the <paramref name="eventsCollection"/>.</param>
            <param name="tempoMap">Tempo map used to place <paramref name="midiEvent"/> into the
            <paramref name="eventsCollection"/> with the specified time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="midiEvent"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ProcessTimedEvents(Melanchall.DryWetMidi.Smf.EventsCollection,System.Action{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for events to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the
            <paramref name="eventsCollection"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ProcessTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,System.Action{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for events to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the
            <paramref name="trackChunk"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ProcessTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Action{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the collection of
            <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for events to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the
            <paramref name="trackChunks"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ProcessTimedEvents(Melanchall.DryWetMidi.Smf.MidiFile,System.Action{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Performs the specified action on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for events to process.</param>
            <param name="action">The action to perform on each <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> contained in the
            <paramref name="file"/>.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null. -or-
            <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.RemoveTimedEvents(Melanchall.DryWetMidi.Smf.EventsCollection,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to search for events to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.RemoveTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for events to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.RemoveTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to search for events to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.RemoveTimedEvents(Melanchall.DryWetMidi.Smf.MidiFile,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Removes all the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> that match the conditions defined by the specified predicate.
            </summary>
            <param name="file"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to search for events to remove.</param>
            <param name="match">The predicate that defines the conditions of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.AddTimedEvents(Melanchall.DryWetMidi.Smf.EventsCollection,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Adds collection of timed events to the specified <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> to add timed events to.</param>
            <param name="events">Timed events to add to the <paramref name="eventsCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null. -or-
            <paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.AddTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Adds collection of timed events to the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to add timed events to.</param>
            <param name="events">Timed events to add to the <paramref name="trackChunk"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ToTrackChunk(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Creates a track chunk with the specified timed events.
            </summary>
            <param name="events">Collection of timed events to create a track chunk.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> containing the specified timed events.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManagingUtilities.ToFile(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent})">
            <summary>
            Creates a MIDI file with the specified timed events.
            </summary>
            <param name="events">Collection of timed events to create a MIDI file.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> containing the specified timed events.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.Note">
            <summary>
            Represents a musical note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.Interaction.Note.DefaultVelocity">
            <summary>
            Default velocity.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            note name and octave.
            </summary>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave in scientific pitch notation.</param>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            note name, octave and length.
            </summary>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave in scientific pitch notation.</param>
            <param name="length">Length of the note in units defined by time division of a MIDI file.</param>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            note name, octave, length and absolute time.
            </summary>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave in scientific pitch notation.</param>
            <param name="length">Length of the note in units defined by time division of a MIDI file.</param>
            <param name="time">Absolute time of the note in units defined by the time division of a MIDI file.</param>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified note number.
            </summary>
            <param name="noteNumber">Number of the note (60 is middle C).</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            note number and length.
            </summary>
            <param name="noteNumber">Number of the note (60 is middle C).</param>
            <param name="length">Length of the note in units defined by time division of a MIDI file.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            note number, length and absolute time.
            </summary>
            <param name="noteNumber">Number of the note (60 is middle C).</param>
            <param name="length">Length of the note in units defined by time division of a MIDI file.</param>
            <param name="time">Absolute time of the note in units defined by the time division of a MIDI file.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.#ctor(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,Melanchall.DryWetMidi.Smf.Interaction.TimedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> with the specified
            Note On and Note Off timed events.
            </summary>
            <param name="timedNoteOnEvent">Wrapped <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.</param>
            <param name="timedNoteOffEvent">Wrapped <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Time">
            <summary>
            Gets absolute time of the note in units defined by the time division of a MIDI file.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Length">
            <summary>
            Gets length of the note in units defined by the time division of a MIDI file.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.NoteNumber">
            <summary>
            Gets or sets number of the note (60 is middle C).
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Velocity">
            <summary>
            Gets or sets velocity of the underlying <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.OffVelocity">
            <summary>
            Gets or sets velocity of the underlying <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Channel">
            <summary>
            Gets or sets channel to play the note on.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.NoteName">
            <summary>
            Gets name of the note.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Octave">
            <summary>
            Gets octave of the note.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.TimedNoteOnEvent">
            <summary>
            Gets Note On timed event of the note.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.Note.TimedNoteOffEvent">
            <summary>
            Gets Note Off timed event of the note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.SetNoteNameAndOctave(Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32)">
            <summary>
            Sets note name and octave for current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.
            </summary>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave in scientific pitch notation.</param>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to <paramref name="octave"/> to get the number of the middle C.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.Clone">
            <summary>
            Clones note by creating a copy of it.
            </summary>
            <returns>Copy of the note.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.Split(System.Int64)">
            <summary>
            Splits the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> by the specified time.
            </summary>
            <remarks>
            If <paramref name="time"/> is less than time of the note, the left part will be null.
            If <paramref name="time"/> is greater than end time of the note, the right part
            will be null.
            </remarks>
            <param name="time">Time to split the note by.</param>
            <returns>An object containing left and right parts of the splitted <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>.
            Both parts are instances of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> too.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.Note.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager">
            <summary>
            Provides a way to manage notes of a MIDI file.
            </summary>
            <remarks>
            This manager is wrapper for the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> that provides easy manipulation
            of <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> and <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> events through the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/>
            objects. To start manage notes you need to get an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/>. To
            finish managing you need to call the <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.SaveChanges"/> or <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.Dispose"/> method.
            Since the manager implements <see cref="T:System.IDisposable"/> it is recommended to manage notes within
            using block.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.#ctor(Melanchall.DryWetMidi.Smf.EventsCollection,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> with the specified events
            collection and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds note events to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <remarks>
            If the <paramref name="sameTimeEventsComparison"/> is not specified events with the same time
            will be placed into the underlying events collection in order of adding them through the manager.
            If you want to specify custom order of such events you need to specify appropriate comparison delegate.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.Notes">
            <summary>
            Gets the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesCollection"/> with all notes managed by the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.SaveChanges">
            <summary>
            Saves all notes that were managed with the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> updating
            underlying events collection.
            </summary>
            <remarks>
            This method will rewrite content of the events collection was used to construct the current
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.NotesManager"/> with events were managed by this manager. Also all delta-times
            of wrapped events will be recalculated according to the <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Time"/> and
            <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Length"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.NotesManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent">
            <summary>
            Represents wrapper for the <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> that provides absolute time of an event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> with the
            specified MIDI event.
            </summary>
            <param name="midiEvent">An event to wrap into <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEvent,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/> with the
            specified MIDI event and absolute time.
            </summary>
            <param name="midiEvent">An event to wrap into <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent"/>.</param>
            <param name="time">Absolute time of an event in units defined by the time division of a MIDI file.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Event">
            <summary>
            Gets wrapped MIDI event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Time">
            <summary>
            Gets absolute time of the event in units defined by the time division of a MIDI file.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Clone">
            <summary>
            Clones timed event by creating a copy of it.
            </summary>
            <returns>Copy of the timed event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager">
            <summary>
            Provides a way to manage events of a MIDI file by their absolute time.
            </summary>
            <remarks>
            To start manage events you need to get an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/>. To
            finish managing you need to call the <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.SaveChanges"/> or <see cref="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.Dispose"/> method.
            Since the manager implements <see cref="T:System.IDisposable"/> it is recommended to manage events within
            using block.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.#ctor(Melanchall.DryWetMidi.Smf.EventsCollection,System.Comparison{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> with the specified events
            collection and comparison delegate for events that have same time.
            </summary>
            <param name="eventsCollection"><see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/> that holds events to manage.</param>
            <param name="sameTimeEventsComparison">Delegate to compare events with the same absolute time.</param>
            <remarks>
            If the <paramref name="sameTimeEventsComparison"/> is not specified events with the same time
            will be placed into the underlying events collection in order of adding them through the manager.
            If you want to specify custom order of such events you need to specify appropriate comparison delegate.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventsCollection"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.Events">
            <summary>
            Gets current collection of timed events reflecting all changes made by the current
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.SaveChanges">
            <summary>
            Saves all events that were managed with the current <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> updating
            underlying events collection.
            </summary>
            <remarks>
            This method will rewrite content of the events collection was used to construct the current
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager"/> with events were managed by this manager. Also all delta-times
            of wrapped events will be recalculated according to the <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.TimedEvent.Time"/> of
            event wrappers.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedEventsManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectUtilities">
            <summary>
            Extension methods for objects that implement the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> interface.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectUtilities.TimeAs``1(Melanchall.DryWetMidi.Smf.Interaction.ITimedObject,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets time of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> as an instance of type that implements the
            <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan"/> interface.
            </summary>
            <typeparam name="TTime">Type that will represent the time of the <paramref name="obj"/>.</typeparam>
            <param name="obj">Object to get time of.</param>
            <param name="tempoMap">Tempo map to calculate time of the <paramref name="obj"/>.</param>
            <returns>Time of the specified object as an instance of <typeparamref name="TTime"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TTime"/> is not supported.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectUtilities.TimeAs(Melanchall.DryWetMidi.Smf.Interaction.ITimedObject,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets time of an <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> as an instance of time span defined by the
            specified time span type.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="timeType">The type of time span to convert the time of <paramref name="obj"/> to.</param>
            <param name="tempoMap">Tempo map to calculate time of the <paramref name="obj"/>.</param>
            <returns>Time of the specified object as an instance of time span defined by the
            <paramref name="timeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="timeType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectUtilities.AtTime``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> to return objects at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Time to filter objects by.</param>
            <returns>A collection that contains objects from the input sequence that are at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of timed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.TimedObjectUtilities.AtTime``1(System.Collections.Generic.IEnumerable{``0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Filters collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ITimedObject"/> to return objects at the specified time.
            </summary>
            <typeparam name="TObject">The type of the elements of <paramref name="objects"/>.</typeparam>
            <param name="objects">A collection to filter.</param>
            <param name="time">Time to filter objects by.</param>
            <param name="tempoMap">Tempo map to filter <paramref name="objects"/> by <paramref name="time"/>.</param>
            <returns>A collection that contains objects from the input sequence that are at the specified time.</returns>
            <remarks>
            Note that changes made on the objects returned by this method will not be saved to an underlying
            data source (events collection, track chunk, file). To change properties of timed objects and
            save them you need to use a manager appropriate for an object's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or- <paramref name="time"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid">
            <summary>
            Grid where points in time are distributed arbitrarily according to provided collection
            of times.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid"/> with the specified
            collection of times.
            </summary>
            <param name="times">Grid's times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="times"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="times"/> contains null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid"/> with the specified
            collection of times.
            </summary>
            <param name="times">Grid's times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="times"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="times"/> contains null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid.Times">
            <summary>
            Times of the current grid.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.ArbitraryGrid.GetTimes(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets points in time of the current grid.
            </summary>
            <param name="tempoMap">Tempo map used to get grid's times.</param>
            <returns>Collection of points in time of the current grid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.IGrid">
            <summary>
            Represents a time grid which is the set of points in time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.IGrid.GetTimes(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets points in time of the current grid.
            </summary>
            <param name="tempoMap">Tempo map used to get grid's times.</param>
            <returns>Collection of points in time of the current grid.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid">
            <summary>
            Grid where points in time are distributed with the specified step or
            collection of steps.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid"/> with the specified
            step so all grid's times will be distributed with equal distance between adjacent ones
            starting from zero.
            </summary>
            <param name="step">Distance between adjacent times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid"/> with the specified
            start time and step so all grid's times will be distributed with equal distance
            between adjacent ones starting from the specified start time.
            </summary>
            <param name="start">Start time of the grid.</param>
            <param name="step">Distance between adjacent times.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/> is null. -or-
            <paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid"/> with the specified
            steps so all grid's times will be stepped according to those steps.
            </summary>
            <remarks>
            Grid's times will be distributed according to provided steps. So distance between first
            adjacent times will be equal to first step, distance between second adjacent times will
            be equal to second step and so on. When last step reached, steps will go from the first one.
            </remarks>
            <param name="steps">Collection of grid's steps.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="steps"/> contains null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid"/> with the specified
            start time and steps so all grid's times will be stepped according to those steps.
            </summary>
            <remarks>
            Grid's times will be distributed according to provided steps. So distance between first
            adjacent times will be equal to first step, distance between second adjacent times will
            be equal to second step and so on. When last step reached steps will go from the first one.
            </remarks>
            <param name="start">Start time of the grid.</param>
            <param name="steps">Collection of grid's steps.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/> is null. -or-
            <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="steps"/> contains null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.Start">
            <summary>
            Start time of the current grid.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.Steps">
            <summary>
            Steps of the current grid.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.Interaction.SteppedGrid.GetTimes(Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets points in time of the current grid.
            </summary>
            <param name="tempoMap">Tempo map used to get grid's times.</param>
            <returns>Collection of points in time of the current grid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChunksConverterFactory">
            <summary>
            Provider of an implementation of the <see cref="T:Melanchall.DryWetMidi.Smf.IChunksConverter"/> interface which
            is appropriate for a specified MIDI file format.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksConverterFactory.GetConverter(Melanchall.DryWetMidi.Smf.MidiFileFormat)">
            <summary>
            Gets chunks converter which is appropriate for a passed MIDI file format.
            </summary>
            <param name="format">MIDI file format to get <see cref="T:Melanchall.DryWetMidi.Smf.IChunksConverter"/> for.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.IChunksConverter"/> appropriate for
            <paramref name="format"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="format"/> specified an invalid value.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="format"/> is not supported.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.IChunksConverter">
            <summary>
            Provides a way to convert a collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/> objects to
            another representation according to rules defined by implementation of this
            interface.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.IChunksConverter.Convert(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiChunk})">
            <summary>
            Converts collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/> objects to another representation.
            </summary>
            <param name="chunks">Chunks collection that need to be converted.</param>
            <returns>Another representation of the <paramref name="chunks"/> collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiChunk">
            <summary>
            Represents a chunk of Standard MIDI file.
            </summary>
            <remarks>
            MIDI Files are made up of chunks. Each chunk has a 4-character ASCII string ID and a 32-bit length,
            which is the number of bytes in the chunk. This structure allows future chunk types to be designed
            which may be easily be ignored if encountered by a program written before the chunk type is introduced.
            The length of the chunk refers to the number of bytes of data which follow (the eight bytes of ID and length
            are not included).Therefore, a chunk with a length of 6 would actually occupy 14 bytes in the file.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiChunk.IdLength">
            <summary>
            The length of a chunk's ID. This field is constant.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/> with the specified ID.
            </summary>
            <param name="id">The type of the chunk.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is empty, or consists only of white-space characters; or
            length of <paramref name="id"/> doesn't equal 4.
            </exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiChunk.ChunkId">
            <summary>
            Gets 4-character ID of the chunk which specifies its type.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.Clone">
            <summary>
            Clones chunk by creating a copy of it.
            </summary>
            <returns>Copy of the chunk.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.Read(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings)">
            <summary>
            Reads chunk from the <see cref="T:Melanchall.DryWetMidi.Smf.MidiReader"/>'s underlying stream according to
            specified <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>.
            </summary>
            <param name="reader">Reader to read the chunk's data with.</param>
            <param name="settings">Settings according to which the chunk's data must be read.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after <paramref name="reader"/>
            was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the <paramref name="reader"/>'s
            underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException">Actual chunk's size differs from the one declared
            in its header.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Size of the chunk cannot be read since the reader's
            underlying stream doesn't have enough bytes.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.Write(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes chunk to the <see cref="T:Melanchall.DryWetMidi.Smf.MidiWriter"/>'s underlying stream according to
            specified <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="writer">Writer to write the chunk's data with.</param>
            <param name="settings">Settings according to which the chunk's data must be written.</param>
            <exception cref="T:System.ObjectDisposedException">
            Method was called after <paramref name="writer"/> was disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred on the <paramref name="writer"/>'s underlying stream.
            </exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.UInt32)">
            <summary>
            Reads content of a chunk. Content is a part of chunk's data without its header (ID and size).
            </summary>
            <param name="reader">Reader to read the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be read.</param>
            <param name="size">Expected size of the content taken from the chunk's header.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a chunk. Content is a part of chunk's data without its header (ID and size).
            </summary>
            <param name="writer">Writer to write the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiChunk.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets size of chunk's content as number of bytes required to write it according to specified
            <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="settings">Settings according to which the chunk's content will be written.</param>
            <returns>Number of bytes required to write chunk's content.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.HeaderChunk">
            <summary>
            Represents a header chunk of a standard MIDI file.
            </summary>
            <remarks>
            The header chunk at the beginning of the file specifies some basic information about the
            data in the file: format of the file, number of track chunks and time division which specifies
            the meaning of the delta-times of events.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.HeaderChunk.Id">
            <summary>
            ID of the header chunk. This field is constsnt.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.HeaderChunk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.HeaderChunk.FileFormat">
            <summary>
            Gets or sets format of a file where current instance of the <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>
            is written or will be written.
            </summary>
            <remarks>
            MIDI file can be stored in one of the three possible formats:
            <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.SingleTrack"/> - the file contains a single multi-channel track;
            <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.MultiTrack"/> - the file contains one or more simultaneous tracks
            (or MIDI outputs) of a sequence;
            <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.MultiSequence"/> - the file contains one or more sequentially independent
            single-track patterns.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.HeaderChunk.TimeDivision">
            <summary>
            Gets or sets time division used in a file where current instance of the <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>
            is written or will be written.
            </summary>
            <remarks>
            Time division specifies the meaning of the delta-times of events. There are two types of
            the time division: ticks per quarter note and SMPTE. Time division of the first type has bit 15 set
            to 0. In this case bits 14 thru 0 represent the number of ticks which make up a quarter-note.
            Division of the second type has bit 15 set to 1. In this case bits 14 thru 8 contain one of the four
            values: -24, -25, -29, or -30, corresponding to the four standard SMPTE and MIDI Time Code formats
            (-29 corresponds to 30 drop frame), and represents the number of frames per second. Bits 7 thru 0
            (which represent a byte stored positive) is the resolution within a frame: typical values may be 4
            (MIDI Time Code resolution), 8, 10, 80 (bit resolution), or 100.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.HeaderChunk.TracksNumber">
            <summary>
            Gets or sets the number of track chunks that are stored or will be stored in a file
            follow the header chunk.
            </summary>
            <remarks>
            Number of tracks should be 1 for a file stored in <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.SingleTrack"/> format.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.HeaderChunk.Clone">
            <summary>
            Clones chunk by creating a copy of it.
            </summary>
            <returns>Copy of the chunk.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.HeaderChunk.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.UInt32)">
            <summary>
            Reads content of a <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>.
            </summary>
            <remarks>
            Content of a <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/> is format of the file, number of track chunks and time division.
            </remarks>
            <param name="reader">Reader to read the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be read.</param>
            <param name="size">Expected size of the content taken from the chunk's header.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader's underlying stream was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the reader's underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException">The header chunk contains unknown file format and
            <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownFileFormatPolicy"/> property of the <paramref name="settings"/> set to
            <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.HeaderChunk.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>.
            </summary>
            <remarks>
            Content of a <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/> is format of the file, number of track chunks and time division.
            Six bytes required to write all of this information.
            </remarks>
            <param name="writer">Writer to write the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be written.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer's underlying stream was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the writer's underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.HeaderChunk.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets size of <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>'s content as number of bytes required to write it according
            to specified <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="settings">Settings according to which the chunk's content will be written.</param>
            <returns>Number of bytes required to write <see cref="T:Melanchall.DryWetMidi.Smf.HeaderChunk"/>'s content.</returns>
            <remarks>
            This method must always return 6.
            </remarks>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChunkType">
            <summary>
            Represents a chunk's identity described by its type and corresponding ID.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkType.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChunkType"/> with the specified type and ID.
            </summary>
            <param name="type">Type of a chunk.</param>
            <param name="id">4-character ID of a chunk.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChunkType.Type">
            <summary>
            Gets the type of chunks described by this instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChunkType"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChunkType.Id">
            <summary>
            Gets the ID of chunks described by this instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChunkType"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChunkTypesCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.ChunkType"/> objects which provide identity information of a chunk.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkTypesCollection.Add(System.Type,System.String)">
            <summary>
            Adds chunk type along with the corresponding ID.
            </summary>
            <param name="type">Type of chunk.</param>
            <param name="id">ID of chunk.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null. -or- <paramref name="id"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Chunk type specified by <paramref name="type"/> and
            <paramref name="id"/> already exists in the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkTypesCollection.TryGetType(System.String,System.Type@)">
            <summary>
            Gets the chunk type associated with the specified ID.
            </summary>
            <param name="id">ID of the chunk type to get.</param>
            <param name="type">When this method returns, contains the chunk type associated with
            the specified ID, if ID is found; otherwise, null. This parameter is passed
            uninitialized.</param>
            <returns>true if the <see cref="T:Melanchall.DryWetMidi.Smf.ChunkTypesCollection"/> contains a chunk type with the
            specified ID; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkTypesCollection.TryGetId(System.Type,System.String@)">
            <summary>
            Gets the ID associated with the specified chunk type.
            </summary>
            <param name="type">Chunk type to get ID for.</param>
            <param name="id">When this method returns, contains the ID associated with the specified
            chunk type, if the type is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:Melanchall.DryWetMidi.Smf.ChunkTypesCollection"/> contains an ID for the
            specified chunk type; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkTypesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunkTypesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TrackChunk">
            <summary>
            Represents a track chunk of a standard MIDI file.
            </summary>
            <remarks>
            Track chunk contains actual MIDI data as set of events.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TrackChunk.Id">
            <summary>
            ID of the track chunk. This field is constsnt.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> with the specified events.
            </summary>
            <param name="events">Events to add to the track chunk.</param>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.#ctor(Melanchall.DryWetMidi.Smf.MidiEvent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> with the specified events.
            </summary>
            <param name="events">Events to add to the track chunk.</param>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="events"/> contain an instance of <see cref="T:Melanchall.DryWetMidi.Smf.EndOfTrackEvent"/>; or
            <paramref name="events"/> contain null.
            </exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TrackChunk.Events">
            <summary>
            Gets the collection of events contained in the track chunk.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.Clone">
            <summary>
            Clones chunk by creating a copy of it.
            </summary>
            <returns>Copy of the chunk.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.UInt32)">
            <summary>
            Reads content of a <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <remarks>
            Content of a <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> is collection of MIDI events.
            </remarks>
            <param name="reader">Reader to read the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be read.</param>
            <param name="size">Expected size of the content taken from the chunk's header.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer's underlying stream
            was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the writer's underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">Unexpected running status is encountered.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException">Reader has encountered an unknown channel event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes to read an event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">Value of a channel event's parameter just
            read is invalid.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException">Track chunk doesn't end with End Of Track event.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <remarks>
            Content of a <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> is collection of MIDI events.
            </remarks>
            <param name="writer">Writer to write the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be written.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer's underlying stream was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the writer's underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets size of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>'s content as number of bytes required to write it according
            to specified <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="settings">Settings according to which the chunk's content will be written.</param>
            <returns>Number of bytes required to write <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>'s content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunk.ReadEvent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Nullable{System.Byte}@)">
            <summary>
            Reads an event from the reader's underlying stream.
            </summary>
            <param name="reader">Reader to read an event.</param>
            <param name="settings">Settings according to which an event must be read.</param>
            <param name="channelEventStatusByte">Current channel event status byte used as running status.</param>
            <returns>Instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> representing a MIDI event.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer's underlying stream
            was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the writer's underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">Unexpected running status is encountered.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException">Reader has encountered an unknown channel event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes to read an event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">Value of a channel event's parameter just
            read is invalid.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownChunk">
            <summary>
            Represents an unknown chunk.
            </summary>
            <remarks>
            Structure of MIDI file chunks allows custom chunks be implemented and written to a MIDI file.
            Chunks DryWetMIDI doesn't know about will be read as an instances of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/> with the specified ID.
            </summary>
            <param name="id">Chunk's ID.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownChunk.Data">
            <summary>
            Gets data contained in the current <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.Clone">
            <summary>
            Clones chunk by creating a copy of it.
            </summary>
            <returns>Copy of the chunk.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.UInt32)">
            <summary>
            Reads content of a <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </summary>
            <remarks>
            Content of an <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/> is array of bytes.
            </remarks>
            <param name="reader">Reader to read the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be read.</param>
            <param name="size">Expected size of the content taken from the chunk's header.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader's underlying stream was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the reader's underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </summary>
            <remarks>
            Content of an <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/> is array of bytes.
            </remarks>
            <param name="writer">Writer to write the chunk's content with.</param>
            <param name="settings">Settings according to which the chunk's content must be written.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer's underlying stream was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the writer's underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets size of <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>'s content as number of bytes required to write it according
            to the specified <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="settings">Settings according to which the chunk's content will be written.</param>
            <returns>Number of bytes required to write <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>'s content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunk.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChunksCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/> objects.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Item(System.Int32)">
            <summary>
            Gets or sets the chunk at the specified index.
            </summary>
            <param name="index">The zero-based index of the chunk to get or set.</param>
            <returns>The chunk at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0; or <paramref name="index"/> is equal to or greater than
            <see cref="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Count">
            <summary>
            Gets the number of chunks contained in the collection.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.Add(Melanchall.DryWetMidi.Smf.MidiChunk)">
            <summary>
            Adds a chunk to the end of the collection.
            </summary>
            <param name="chunk">The chunk to be added to the end of the collection.</param>
            <remarks>
            Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.AddRange(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiChunk})">
            <summary>
            Adds chunks the end of the collection.
            </summary>
            <param name="chunks">Chunks to add to the collection.</param>
            <remarks>
            Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.Insert(System.Int32,Melanchall.DryWetMidi.Smf.MidiChunk)">
            <summary>
            Inserts a chunk into the collection at the specified index.
            </summary>
            <remarks>
            Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <param name="index">The zero-based index at which the chunk should be inserted.</param>
            <param name="chunk">The chunk to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunk"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. -or-
            <paramref name="index"/> is greater than <see cref="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiChunk})">
            <summary>
            Inserts a set of chunks into the collection at the specified index.
            </summary>
            <remarks>
            Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <param name="index">The zero-based index at which the chunk should be inserted.</param>
            <param name="chunks">The chunk to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunks"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. -or-
            <paramref name="index"/> is greater than <see cref="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.Remove(Melanchall.DryWetMidi.Smf.MidiChunk)">
            <summary>
            Removes the first occurrence of a specific chunk from the collection.
            </summary>
            <param name="chunk">The chunk to remove from the collection. The value cannot be null.</param>
            <returns>true if chunk is successfully removed; otherwise, false. This method also returns
            false if chunk was not found in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the chunk at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the chunk to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0; or <paramref name="index"/>
            is equal to or greater than <see cref="P:Melanchall.DryWetMidi.Smf.ChunksCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.RemoveAll(System.Predicate{Melanchall.DryWetMidi.Smf.MidiChunk})">
            <summary>
            Removes all the chunks that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions
            of the chunks to remove.</param>
            <returns>The number of chunks removed from the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.IndexOf(Melanchall.DryWetMidi.Smf.MidiChunk)">
            <summary>
            Searches for the specified chunk and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.
            </summary>
            <param name="chunk">The chunk to locate in the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.</param>
            <returns>The zero-based index of the first occurrence of chunk within the entire
            <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.Clear">
            <summary>
            Removes all chunks from the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChunksCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EventsCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> objects.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.EventsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the event at the specified index.
            </summary>
            <param name="index">The zero-based index of the event to get or set.</param>
            <returns>The event at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index"/> is less than 0;
            or <paramref name="index"/> is equal to or greater than <see cref="P:Melanchall.DryWetMidi.Smf.EventsCollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.EventsCollection.Count">
            <summary>
            Gets the number of events contained in the collection.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.Add(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Adds an event to the end of collection.
            </summary>
            <param name="midiEvent">The event to be added to the end of the collection.</param>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.AddRange(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Adds events to the end of collection.
            </summary>
            <param name="events">Events to be added to the end of the collection.</param>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.Insert(System.Int32,Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Inserts an event into the collection at the specified index.
            </summary>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            a MIDI file writing.
            </remarks>
            <param name="index">The zero-based index at which the event should be inserted.</param>
            <param name="midiEvent">The event to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. -or-
            <paramref name="index"/> is greater than <see cref="P:Melanchall.DryWetMidi.Smf.EventsCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Inserts a set of events into the collection at the specified index.
            </summary>
            <remarks>
            Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a
            track chunk structure. End Of Track event will be written to the track chunk automatically on
            a MIDI file writing.
            </remarks>
            <param name="index">The zero-based index at which the events should be inserted.</param>
            <param name="midiEvents">The events to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvents"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. -or-
            <paramref name="index"/> is greater than <see cref="P:Melanchall.DryWetMidi.Smf.EventsCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.Remove(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Removes the first occurrence of a specific event from the collection.
            </summary>
            <param name="midiEvent">The event to remove from the collection. The value cannot be null.</param>
            <returns>true if event is successfully removed; otherwise, false. This method also returns
            false if event was not found in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the event at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the event to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0; or <paramref name="index"/>
            is equal to or greater than <see cref="P:Melanchall.DryWetMidi.Smf.EventsCollection.Count"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.RemoveAll(System.Predicate{Melanchall.DryWetMidi.Smf.MidiEvent})">
            <summary>
            Removes all the events that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions
            of the events to remove.</param>
            <returns>The number of events removed from the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.IndexOf(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Searches for the specified event and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <param name="midiEvent">The event to locate in the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.</param>
            <returns>The zero-based index of the first occurrence of event within the entire
            <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.Clear">
            <summary>
            Removes all events from the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SystemRealTimeEvent">
            <summary>
            Represents a system real-time event.
            </summary>
            <remarks>
            MIDI system realtime messages are messages that are not specific to a MIDI channel but
            prompt all devices on the MIDI system to respond and to do so in real time.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SystemRealTimeEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SystemRealTimeEvent"/> with the specified event type.
            </summary>
            <param name="eventType">The type of event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiEventType">
            <summary>
            The type of a MIDI event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.NormalSysEx">
            <summary>
            Normal system exclusive event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.EscapeSysEx">
            <summary>
            "Escape" system exclusive event which defines an escape sequence.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SequenceNumber">
            <summary>
            Sequence Number meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Text">
            <summary>
            Text meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.CopyrightNotice">
            <summary>
            Copyright Notice meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SequenceTrackName">
            <summary>
            Sequence/Track Name meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.InstrumentName">
            <summary>
            Instrument Name meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Lyric">
            <summary>
            Lyric meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Marker">
            <summary>
            Marker meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.CuePoint">
            <summary>
            Cue Point meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ProgramName">
            <summary>
            Program Name meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.DeviceName">
            <summary>
            Device Name meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ChannelPrefix">
            <summary>
            MIDI Channel Prefix meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.PortPrefix">
            <summary>
            MIDI Port meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.EndOfTrack">
            <summary>
            End of Track meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SetTempo">
            <summary>
            Set Tempo meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SmpteOffset">
            <summary>
            SMPTE Offset meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.TimeSignature">
            <summary>
            Time Signature meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.KeySignature">
            <summary>
            Key Signature meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SequencerSpecific">
            <summary>
            Sequencer Specific meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.UnknownMeta">
            <summary>
            Unknown meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.CustomMeta">
            <summary>
            Custom meta event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.NoteOff">
            <summary>
            Note Off event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.NoteOn">
            <summary>
            Note On event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.NoteAftertouch">
            <summary>
            Polyphonic Key Pressure (Aftertouch) event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ControlChange">
            <summary>
            Control Change event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ProgramChange">
            <summary>
            Program Change event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ChannelAftertouch">
            <summary>
            Channel Pressure (Aftertouch) event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.PitchBend">
            <summary>
            Pitch Bend Change event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.TimingClock">
            <summary>
            Timing Clock event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Start">
            <summary>
            Start event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Continue">
            <summary>
            Continue event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Stop">
            <summary>
            Stop event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.ActiveSensing">
            <summary>
            Active Sensing event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.Reset">
            <summary>
            Reset event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.MidiTimeCode">
            <summary>
            MIDI Time Code (MIDI Quarter Frame) event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SongPositionPointer">
            <summary>
            Song Position Pointer event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.SongSelect">
            <summary>
            Song Select event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEventType.TuneRequest">
            <summary>
            Tune Request event.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent">
            <summary>
            Represents MIDI Time Code (MIDI Quarter Frame) event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI quarter frame message is timing information in the
            hours:minutes:seconds:frames format (similar to SMPTE) that is used to synchronize MIDI devices.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent"/> with the specified
            time code component and its value.
            </summary>
            <param name="component">MIDI time code component.</param>
            <param name="componentValue">Value of <paramref name="component"/>.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="component"/> specified an
            invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.Component">
            <summary>
            Gets or sets the MIDI time code component presented by the current <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.ComponentValue">
            <summary>
            Gets or sets value of the MIDI time code component presented by the current <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent">
            <summary>
            MIDI time code component.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.FramesLsb">
            <summary>
            LSB of frames number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.FramesMsb">
            <summary>
            MSB of frames number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.SecondsLsb">
            <summary>
            LSB of seconds number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.SecondsMsb">
            <summary>
            MSB of seconds number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.MinutesLsb">
            <summary>
            LSB of minutes number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.MinutesMsb">
            <summary>
            MSB of minutes number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.HoursLsb">
            <summary>
            LSB of hours number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent.HoursMsbAndTimeCodeType">
            <summary>
            MSB of hours number and time code type.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SongSelectEvent">
            <summary>
            Represents Song Select event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI song request message (also known as a "song select message")
            tells a MIDI device to select a sequence for playback.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongSelectEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SongSelectEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongSelectEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SongSelectEvent"/> with the specified
            song number.
            </summary>
            <param name="number">Number of the song to be chosen.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SongSelectEvent.Number">
            <summary>
            Gets or sets number of the song to be chosen.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongSelectEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongSelectEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent">
            <summary>
            Represents Song Position Pointer event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI song position pointer message tells a MIDI device
            to cue to a point in the MIDI sequence to be ready to play.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent"/> with the specified
            MSB and LSB parts of the pointer value.
            </summary>
            <param name="pointerValue">The value of a song position pointer.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent.PointerValue">
            <summary>
            Gets the song position pointer value.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SongPositionPointerEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SystemCommonEvent">
            <summary>
            Represents a system common event.
            </summary>
            <remarks>
            MIDI system common messages are those MIDI messages that prompt all devices on
            the MIDI system to respond (are not specific to a MIDI channel), but do not
            require an immediate response from the receiving MIDI devices.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SystemCommonEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SystemCommonEvent"/> with the specified event type.
            </summary>
            <param name="eventType">The type of event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeType">
            <summary>
            MIDI time code type (frames per second).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeType.TwentyFour">
            <summary>
            24 frames per second.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeType.TwentyFive">
            <summary>
            25 frames per second.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeType.ThirtyDrop">
            <summary>
            29.97 frames per second (also called "30 drop").
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiTimeCodeType.Thirty">
            <summary>
            30 frames per second.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TuneRequestEvent">
            <summary>
            Represents Tune Request event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI tune request message tells a MIDI device to tune itself.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TuneRequestEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TuneRequestEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TuneRequestEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TuneRequestEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ActiveSensingEvent">
            <summary>
            Represents Active Sensing event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI active sense message tells a MIDI device
            that the MIDI connection is still active.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ActiveSensingEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ActiveSensingEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ActiveSensingEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ActiveSensingEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ContinueEvent">
            <summary>
            Represents Continue event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI continue message tells a MIDI slave device to resume playback.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ContinueEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ContinueEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ContinueEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ContinueEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ResetEvent">
            <summary>
            Represents Reset event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI reset message tells a MIDI device to reset itself.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ResetEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ResetEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ResetEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ResetEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.StartEvent">
            <summary>
            Represents Start event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI start message tells a MIDI slave device to start playback.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StartEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.StartEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StartEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StartEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.StopEvent">
            <summary>
            Represents Stop event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI stop message tells a MIDI slave device to stop playback.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StopEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.StopEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StopEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.StopEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TimingClockEvent">
            <summary>
            Represents Timing Clock event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI clock message keeps a slave MIDI device
            synchronized with a master MIDI device. The MIDI clock message is a timing
            message that the master device sends at regular intervals to tell the slave
            device where it is in terms of time.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimingClockEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TimingClockEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimingClockEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimingClockEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoteEvent">
            <summary>
            Base class that represents a Note On or a Note Off message.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType,Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteEvent"/> with the specified
            note number and velocity.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="noteNumber">Note number.</param>
            <param name="velocity">Velocity.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NoteEvent.NoteNumber">
            <summary>
            Gets or sets note number.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NoteEvent.Velocity">
            <summary>
            Gets or sets velocity.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.BaseTextEvent">
            <summary>
            Represents a text meta event.
            </summary>
            <remarks>
            There are several meta events that have text content and the same structure. All these
            events are derived from <see cref="T:Melanchall.DryWetMidi.Smf.BaseTextEvent"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.BaseTextEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.BaseTextEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.BaseTextEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.BaseTextEvent"/> with the specified text.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="text">Text contained in the event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.BaseTextEvent.Text">
            <summary>
            Gets or sets text contained in the event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.BaseTextEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Text event cannot be read since the size is
            negative number.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.BaseTextEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.BaseTextEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">
            <summary>
            The exception that is thrown when the reading engine has encountered an invalid parameter
            of a channel event.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidChannelEventParameterValuePolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException.#ctor(System.String,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException"/> with
            the specified error message and invalid channel event's parameter value.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="value">The value of the channel event's parameter that caused this exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException.Value">
            <summary>
            Gets the value of the channel event's parameter that caused this exception.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException">
            <summary>
            The exception that is thrown when the reading engine has encountered an invalid parameter
            of a meta event.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidMetaEventParameterValuePolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException"/> with
            the specified error message and invalid meta event's parameter value.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="value">The value of the meta event's parameter that caused this exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException.Value">
            <summary>
            Gets the value of the meta event's parameter that caused this exception.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException">
            <summary>
            The exception that is thrown when the reading engine has encountered an invalid MIDI time
            code component (i.e. a value that doesn't belong to values of <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeComponent"/>)
            during reading <see cref="T:Melanchall.DryWetMidi.Smf.MidiTimeCodeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException.#ctor(System.String,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException"/> with
            the specified error message and invalid value that represents MIDI time code component.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="value">The value representing MIDI time code component that caused this exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException.Value">
            <summary>
            Gets the value representing MIDI time code component that caused this exception.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidMidiTimeCodeComponentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException">
            <summary>
            The exception that is thrown when the reading engine has encountered an invalid parameter
            of a system common event.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidSystemCommonEventParameterValuePolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException"/> with
            the specified error message and invalid value that represents an invalid parameter value.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="value">The value of the system common event's parameter that caused this exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException.Value">
            <summary>
            Gets the value of the system common event's parameter that caused this exception.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException">
            <summary>
            The exception that is thrown when a MIDI file doesn't contain a header chunk.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.NoHeaderChunkPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoHeaderChunkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoHeaderChunkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoHeaderChunkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">
            <summary>
            The exception that is thrown when a MIDI file doesn't contain enough bytes
            to read a value.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.NotEnoughBytesPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/> class with the
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/> with the
            specified error message, expected count of bytes and the actual one available in
            the reader's underlying stream.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="expectedCount">Expected count of bytes.</param>
            <param name="actualCount">Actual count of bytes available in the reader's underlying stream.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.ExpectedCount">
            <summary>
            Gets the expected count of bytes.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.ActualCount">
            <summary>
            Gets the actual count of bytes available in the reader's underlying stream.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NotEnoughBytesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException">
            <summary>
            The exception that is thrown while writing a MIDI file when the <see cref="T:Melanchall.DryWetMidi.Smf.ChunksCollection"/>
            contains more than 4294967295 track chunks which is the maximum allowed count for chunks of this type.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException"/> with the
            specified error message and actual track chunks count.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="trackChunksCount">Actual track chunks count.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException.TrackChunksCount">
            <summary>
            Gets the actual track chunks count.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">
            <summary>
            The exception that is thrown when the reading engine encountered unexpected running
            status.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException">
            <summary>
            The exception that is thrown when count of track chunks in a MIDI file differs from
            the one declared in the header chunk of this file.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnexpectedTrackChunksCountPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/> with the
            specified error message, expected count of track chunks read from the header chunk, and the
            actual one.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="expectedCount">Expected count of track chunks read from the header chunk.</param>
            <param name="actualCount">Actual count of track chunks read from a MIDI file.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.ExpectedCount">
            <summary>
            Gets the expected count of track chunks read from the header chunk.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.ActualCount">
            <summary>
            Gets the actual count of track chunks read from a MIDI file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownChunkException">
            <summary>
            The exception that is thrown when the reading engine encountered a chunk with unknown ID.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownChunkIdPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/> class with the
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/> with the
            specified error message and the ID of a chunk.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="chunkId">ID of a chunk.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownChunkException.ChunkId">
            <summary>
            Gets the ID of a chunk.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChunkException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException">
            <summary>
            The exception that is thrown when the actual size of a MIDI file chunk differs from
            the one declared in its header.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidChunkSizePolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException"/> with
            the specified expected size of a MIDI chunk and the actual one.
            </summary>
            <param name="expectedSize">Expected size of a chunk written in its header.</param>
            <param name="actualSize">Actual size of a chunk.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.ExpectedSize">
            <summary>
            Gets the expected size of a chunk written in its header.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.ActualSize">
            <summary>
            Gets the actual size of a chunk.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiException">
            <summary>
            Base MIDI exception class.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiException"/> class with the
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException">
            <summary>
            The exception that is thrown when a MIDI file chunk doesn't end with an End of Track event.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.MissedEndOfTrackPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException">
            <summary>
            The exception that is thrown when the reading engine encountered unknown channel event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.#ctor(Melanchall.DryWetMidi.Common.FourBitNumber,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException"/> with the
            specified status byte and channel.
            </summary>
            <param name="statusByte">Status byte of an unknown channel event.</param>
            <param name="channel">Channel of an unknown channel event.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.Channel">
            <summary>
            Gets the channel of an unknown channel event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.StatusByte">
            <summary>
            Gets the status byte of an unknown channel event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownChannelEventException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException">
            <summary>
            The exception that is thrown when a MIDI file format is unknown.
            </summary>
            <remarks>
            Note that this exception will be thrown only if <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownFileFormatPolicy"/>
            is set to <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort"/> for the <see cref="T:Melanchall.DryWetMidi.Smf.ReadingSettings"/>
            used for reading a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/> with the
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/> with the
            specified error message and format of a MIDI file.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileFormat">Number that represents format of a MIDI file.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/>
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.FileFormat">
            <summary>
            Gets the number that represents format of a MIDI file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownFileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChannelEvent">
            <summary>
            Represents a MIDI file channel event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.ChannelEvent._parameters">
            <summary>
            Parameters of the MIDI channel event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChannelEvent"/> with the specified parameters count.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="parametersCount">Count of the parameters for this channel event.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameters count is negative number which is unallowable.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChannelEvent.Channel">
            <summary>
            Gets or sets channel for this event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChannelEvent.Item(System.Int32)">
            <summary>
            Gets or sets the parameter's value at the specified index.
            </summary>
            <param name="index">Index of the parameter.</param>
            <returns>Value of parameter at the specified index.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelEvent.Read(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">An invalid value for channel
            event's parameter was encountered.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelEvent.Write(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelEvent.GetSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SysExEvent">
            <summary>
            Represents a MIDI file system exclusive event.
            </summary>
            <remarks>
            System exclusive events are used to specify a MIDI system exclusive message, either as one unit or in packets,
            or as an "escape" to specify any arbitrary bytes to be transmitted.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.SysExEvent.EndOfEventByte">
            <summary>
            The value indicating the end of a system exclusive event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SysExEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SysExEvent"/> with the specified event type.
            </summary>
            <param name="eventType">The type of event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SysExEvent.Completed">
            <summary>
            Gets a value indicating whether this sytem exclusive event is completed or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SysExEvent.Data">
            <summary>
            Gets or sets the event's data.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SysExEvent.Read(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SysExEvent.Write(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SysExEvent.GetSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SysExEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent">
            <summary>
            Represents a Channel Pressure (Aftertouch) message.
            </summary>
            <remarks>
            This message is most often sent by pressing down on the key after it "bottoms out".
            This message is different from polyphonic after-touch. Use this message to send the
            single greatest pressure value (of all the current depressed keys).
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent"/> with the specified
            aftertouch (pressure) value.
            </summary>
            <param name="aftertouchValue">Aftertouch (pressure) value.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent.AftertouchValue">
            <summary>
            Gets or sets aftertouch (pressure) value.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelAftertouchEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent">
            <summary>
            Represents a Control Change message.
            </summary>
            <remarks>
            This message is sent when a controller value changes. Controllers include devices
            such as pedals and levers.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlChangeEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlChangeEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/> with the specified
            controller number and controller value.
            </summary>
            <param name="controlNumber">Controller number.</param>
            <param name="controlValue">Controller value.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ControlChangeEvent.ControlNumber">
            <summary>
            Gets or sets controller number.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ControlChangeEvent.ControlValue">
            <summary>
            Gets or sets controller value.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlChangeEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent">
            <summary>
            Represents a Polyphonic Key Pressure (Aftertouch) message.
            </summary>
            <remarks>
            This message is most often sent by pressing down on the key after it "bottoms out".
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent"/> with the specified
            note number and aftertouch (pressure) value.
            </summary>
            <param name="noteNumber">Note number.</param>
            <param name="aftertouchValue">Aftertouch (pressure) value.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent.NoteNumber">
            <summary>
            Gets or sets note number.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent.AftertouchValue">
            <summary>
            Gets or sets aftertouch (pressure) value.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteAftertouchEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoteOffEvent">
            <summary>
            Represents a Note Off message.
            </summary>
            <remarks>
            This message is sent when a note is released (ended).
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOffEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOffEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> with the specified
            note number and velocity.
            </summary>
            <param name="noteNumber">Note number.</param>
            <param name="velocity">Velocity.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOffEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoteOnEvent">
            <summary>
            Represents a Note On message.
            </summary>
            <remarks>
            This message is sent when a note is depressed (start).
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOnEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOnEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> with the specified
            note number and velocity.
            </summary>
            <param name="noteNumber">Note number.</param>
            <param name="velocity">Velocity.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteOnEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.PitchBendEvent">
            <summary>
            Represents a Pitch Bend Change message.
            </summary>
            <remarks>
            This message is sent to indicate a change in the pitch bender (wheel or lever, typically).
            The pitch bender is measured by a fourteen bit value. Center (no pitch change) is 0x2000.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PitchBendEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.PitchBendEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PitchBendEvent.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.PitchBendEvent"/> with the specified
            pitch value.
            </summary>
            <param name="pitchValue">Pitch value.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.PitchBendEvent.PitchValue">
            <summary>
            Gets or sets pitch value.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PitchBendEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ProgramChangeEvent">
            <summary>
            Represents a Program Change message.
            </summary>
            <remarks>
            This message sent when the patch number changes.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramChangeEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramChangeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramChangeEvent.#ctor(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramChangeEvent"/> with the specified
            program number.
            </summary>
            <param name="programNumber">Program number.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ProgramChangeEvent.ProgramNumber">
            <summary>
            Gets or sets program (patch) number.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramChangeEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EventType">
            <summary>
            Represents an event's identity described by its type and corresponding status byte.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventType.#ctor(System.Type,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EventType"/> with the specified type and
            status byte.
            </summary>
            <param name="type">Type of an event.</param>
            <param name="statusByte">Status byte of an event.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.EventType.Type">
            <summary>
            Gets the type of events described by this instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EventType"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.EventType.StatusByte">
            <summary>
            Gets the status byte of events described by this instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EventType"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EventTypesCollection">
            <summary>
            Collection of <see cref="T:Melanchall.DryWetMidi.Smf.EventType"/> objects which provide identity information of an event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventTypesCollection.Add(System.Type,System.Byte)">
            <summary>
            Adds event type along with the corresponding status byte.
            </summary>
            <param name="type">Type of event.</param>
            <param name="statusByte">Status byte of event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Event type specified by <paramref name="type"/> and
            <paramref name="statusByte"/> already exists in the <see cref="T:Melanchall.DryWetMidi.Smf.EventsCollection"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventTypesCollection.TryGetType(System.Byte,System.Type@)">
            <summary>
            Gets the event type associated with the specified status byte.
            </summary>
            <param name="statusByte">The status byte of the event type to get.</param>
            <param name="type">When this method returns, contains the event type associated with
            the specified status byte, if the status byte is found; otherwise, null. This parameter
            is passed uninitialized.</param>
            <returns>true if the <see cref="T:Melanchall.DryWetMidi.Smf.EventTypesCollection"/> contains an event type with the
            specified status byte; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventTypesCollection.TryGetStatusByte(System.Type,System.Byte@)">
            <summary>
            Gets the status byte associated with the specified event type.
            </summary>
            <param name="type">Event type to get status byte for.</param>
            <param name="statusByte">When this method returns, contains the status byte associated with
            the specified event type, if the type is found; otherwise, 0. This parameter is passed
            uninitialized.</param>
            <returns>true if the <see cref="T:Melanchall.DryWetMidi.Smf.EventTypesCollection"/> contains a status byte for the
            specified event type; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventTypesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventTypesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiEvent">
            <summary>
            Represents a MIDI file event stored in a track chunk.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiEvent.UnknownContentSize">
            <summary>
            Constant for content's size of events that don't have size information stored.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiEvent"/> with the specified event type.
            </summary>
            <param name="eventType">The type of event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiEvent.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiEvent.DeltaTime">
            <summary>
            Gets or sets delta-time of the event.
            </summary>
            <remarks>
            Delta-time represents the amount of time before the following event. If the first event in a track
            occurs at the very beginning of a track, or if two events occur simultaneously, a delta-time of zero is used.
            Delta-time is in some fraction of a beat (or a second, for recording a track with SMPTE times), as specified
            by the file's time division.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Delta-time is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.Read(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.Write(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.GetSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiEvent.Clone">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MetaEvent">
            <summary>
            Represents a MIDI file meta event.
            </summary>
            <remarks>
            Meta event specifies non-MIDI information useful to this format or to sequencers.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.#ctor(Melanchall.DryWetMidi.Smf.MidiEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MetaEvent"/> with the specified event type.
            </summary>
            <param name="eventType">The type of event.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="eventType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.Read(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.Write(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.GetSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MetaEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EventReaderFactory">
            <summary>
            Provides a way to get <see cref="T:Melanchall.DryWetMidi.Smf.IEventReader"/> for an event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventReaderFactory.GetReader(System.Byte,System.Boolean)">
            <summary>
            Gets <see cref="T:Melanchall.DryWetMidi.Smf.IEventReader"/> for an event with the specified status byte.
            </summary>
            <param name="statusByte">Status byte to get reader for.</param>
            <param name="smfOnly">Indicates whether only reader for SMF events should be returned or not.</param>
            <returns>Reader for an event with the specified status byte.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent">
            <summary>
            Represents a MIDI Channel Prefix meta event.
            </summary>
            <remarks>
            The MIDI channel prefix meta message specifies a MIDI channel so that meta messages that
            follow are specific to a channel.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent"/> with the
            specified MIDI channel.
            </summary>
            <param name="channel">MIDI channel.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.Channel">
            <summary>
            Gets or sets MIDI channel.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ChannelPrefixEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent">
            <summary>
            Represents a Copyright Notice meta event.
            </summary>
            <remarks>
            The MIDI copyright notice meta message places a copyright notice in a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent"/> with the
            specified text of copyright notice.
            </summary>
            <param name="text">Text of copyright notice.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CopyrightNoticeEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.CuePointEvent">
            <summary>
            Represents a Cue Point meta event.
            </summary>
            <remarks>
            The MIDI cue point meta message denotes a cue in a MIDI file, usually to signify
            the beginning of an action. It can describe something that happens within a film,
            video or stage production at that point in the musical score. E.g. 'Car crashes',
            'Door opens', etc.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CuePointEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.CuePointEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CuePointEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.CuePointEvent"/> with the
            specified text of cue.
            </summary>
            <param name="text">Text of the cue.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CuePointEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.CuePointEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.DeviceNameEvent">
            <summary>
            Represents a Device Name meta event.
            </summary>
            <remarks>
            This optional event is used to identify the hardware device used to produce
            sounds for this track.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.DeviceNameEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.DeviceNameEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.DeviceNameEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.DeviceNameEvent"/> with the
            specified device name.
            </summary>
            <param name="deviceName">Name of the device.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.DeviceNameEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.DeviceNameEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EndOfTrackEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EndOfTrackEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EndOfTrackEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EndOfTrackEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EndOfTrackEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InstrumentNameEvent">
            <summary>
            Represents an Instrument Name meta event.
            </summary>
            <remarks>
            The MIDI instrument name meta message shows the name of the instrument used in the
            current track. This optional event is used to provide a textual clue regarding the
            intended instrumentation for a track (e.g. 'Piano' or 'Flute', etc). If used, it is
            reccommended to place this event near the start of a track.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InstrumentNameEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InstrumentNameEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InstrumentNameEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.InstrumentNameEvent"/> with the
            specified instrument name.
            </summary>
            <param name="instrumentName">Name of the instrument.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InstrumentNameEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.InstrumentNameEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.KeySignatureEvent">
            <summary>
            Represents a Key Signature meta event.
            </summary>
            <remarks>
            The MIDI key signature meta message specifies the key signature and scale of a MIDI file.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.KeySignatureEvent.DefaultKey">
            <summary>
            Default key (C).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.KeySignatureEvent.DefaultScale">
            <summary>
            Default scale (major).
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.KeySignatureEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.#ctor(System.SByte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.KeySignatureEvent"/> with the
            specified key and scale.
            </summary>
            <param name="key"></param>
            <param name="scale"></param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.KeySignatureEvent.Key">
            <summary>
            Gets or sets key signature in terms of number of flats (if negative) or
            sharps (if positive).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Key is out of range.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.KeySignatureEvent.Scale">
            <summary>
            Gets or sets scale (0 for major or 1 for minor).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Scale is out of range.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.KeySignatureEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.LyricEvent">
            <summary>
            Represents a Lyric meta event.
            </summary>
            <remarks>
            The MIDI lyrics meta message shows the lyrics of a song at a particular time in the MIDI sequence.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.LyricEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.LyricEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.LyricEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.LyricEvent"/> with the
            specified text of lyrics.
            </summary>
            <param name="text">Text of the lyrics.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.LyricEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.LyricEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MarkerEvent">
            <summary>
            Represents a Marker meta event.
            </summary>
            <remarks>
            The MIDI marker meta message marks a point in time for a MIDI sequence.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MarkerEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MarkerEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MarkerEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MarkerEvent"/> with the
            specified text of marker.
            </summary>
            <param name="text">Text of the marker.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MarkerEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MarkerEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.PortPrefixEvent">
            <summary>
            Represents a MIDI Port meta event.
            </summary>
            <remarks>
            This optional event specifies the MIDI output port on which data within a track chunk
            will be transmitted.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.PortPrefixEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.PortPrefixEvent"/> with the
            specified port.
            </summary>
            <param name="port">MIDI port.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.PortPrefixEvent.Port">
            <summary>
            Gets or sets MIDI port.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.PortPrefixEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ProgramNameEvent">
            <summary>
            Represents a Program Name meta event.
            </summary>
            <remarks>
            This optional event is used to embed the patch/program name that is called up by the
            immediately subsequent Bank Select and Program Change messages. It serves to aid the
            end user in making an intelligent program choice when using different hardware.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramNameEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramNameEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramNameEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramNameEvent"/> with the
            specified program name.
            </summary>
            <param name="programName">Name of the program.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramNameEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ProgramNameEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SequenceNumberEvent">
            <summary>
            Represents a Sequence Number meta event.
            </summary>
            <remarks>
            The MIDI sequence number meta message defines the number of a sequence in type 0 and 1 MIDI files,
            or the pattern number in type 2 MIDI files.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequenceNumberEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequenceNumberEvent"/> with the
            specified number of a sequence.
            </summary>
            <param name="number">The number of a sequence.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.Number">
            <summary>
            Gets or sets the number of a sequence.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceNumberEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent">
            <summary>
            Represents a Sequencer Specific meta event.
            </summary>
            <remarks>
            The MIDI sequencer specific meta message carries information that is specific to a
            MIDI sequencer produced by a certain MIDI manufacturer.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent"/> with the
            specified data.
            </summary>
            <param name="data">Sequencer specific data.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.Data">
            <summary>
            Gets or sets sequencer specific data.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Sequencer specific event cannot be read since the size is
            negative number.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequencerSpecificEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent">
            <summary>
            Represents a Sequence/Track Name meta event.
            </summary>
            <remarks>
            The MIDI track name meta message defines either the name of a MIDI sequence
            (when in MIDI type 0 or MIDI type 2 files, or when in the first track of a MIDI type 1 file),
            or the name of a MIDI track (when in other tracks of a MIDI type 1 file).
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent"/> with the
            specified sequence or track name.
            </summary>
            <param name="name">Name of a sequence or track.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SequenceTrackNameEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SetTempoEvent">
            <summary>
            Represents a Set Tempo meta event.
            </summary>
            <remarks>
            The MIDI set tempo meta message sets the tempo of a MIDI sequence in terms
            of microseconds per quarter note.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.SetTempoEvent.DefaultTempo">
            <summary>
            Default tempo.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SetTempoEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SetTempoEvent"/> with the
            specified number of microseconds per quarter note.
            </summary>
            <param name="microsecondsPerQuarterNote">Number of microseconds per quarter note.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SetTempoEvent.MicrosecondsPerQuarterNote">
            <summary>
            Gets or sets number of microseconds per quarter note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SetTempoEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent">
            <summary>
            Represents a SMPTE Offset meta event.
            </summary>
            <remarks>
            The MIDI SMPTE offset meta message specifies an offset for the starting point
            of a MIDI track from the start of a sequence in terms of SMPTE time
            (hours:minutes:seconds:frames:subframes).
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.#ctor(Melanchall.DryWetMidi.Common.SmpteFormat,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent"/> with the
            specified SMPE format, hours, minutes, seconds, number of frames and sub-frames.
            </summary>
            <param name="format">SMPTE format.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="frames">Number of frames.</param>
            <param name="subFrames">Number of sub-frames.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="format"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Hours number is out of valid range. -or-
            Minutes number is out of valid range. -or- Seconds number is out of valid range. -or-
            Frames number is out of valid range. -or- Sub-frames number is out of valid range.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Format">
            <summary>
            Gets or sets SMPTE format.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Hours">
            <summary>
            Gets or sets number of hours.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Hours number is out of valid range (0-23).</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Minutes">
            <summary>
            Gets or sets number of minutes.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Minutes number is out of valid range (0-59).</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Seconds">
            <summary>
            Gets or sets number of seconds.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Seconds number is out of valid range (0-59).</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Frames">
            <summary>
            Gets or sets number of frames.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Frames number is out of valid range.</exception>
            <remarks>
            Maximum valid value for the <see cref="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Frames"/> depends on the frame rate specified by the
            <see cref="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.Format"/>: 23 for <see cref="F:Melanchall.DryWetMidi.Common.SmpteFormat.TwentyFour"/>, 24 for <see cref="F:Melanchall.DryWetMidi.Common.SmpteFormat.TwentyFive"/>,
            28 for <see cref="F:Melanchall.DryWetMidi.Common.SmpteFormat.ThirtyDrop"/> and 29 for <see cref="F:Melanchall.DryWetMidi.Common.SmpteFormat.Thirty"/>.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.SubFrames">
            <summary>
            Gets or sets number of sub-frames.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Sub-frames number is out of valid range (0-99).</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteOffsetEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TextEvent">
            <summary>
            Represents a Text meta event.
            </summary>
            <remarks>
            The MIDI text meta message defines some text to be carried within a MIDI file.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TextEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TextEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TextEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TextEvent"/> with the
            specified text.
            </summary>
            <param name="text">Text of the message.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TextEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TextEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TimeSignatureEvent">
            <summary>
            Represents a Time Signature meta event.
            </summary>
            <remarks>
            The MIDI time signature meta message defines the musical time signature of a MIDI sequence.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.DefaultNumerator">
            <summary>
            Numerator of the default time signature.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.DefaultDenominator">
            <summary>
            Denominator of the default time signature.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.DefaultClocksPerClick">
            <summary>
            Default number of MIDI clock ticks per metronome click.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.DefaultThirtySecondNotesPerBeat">
            <summary>
            Default number of 32nd notes per beat.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TimeSignatureEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TimeSignatureEvent"/> with the
            specified numerator and denominator.
            </summary>
            <param name="numerator">Numerator of the time signature.</param>
            <param name="denominator">Denominator of the time signature.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TimeSignatureEvent"/> with the
            specified numerator, denominator, number of MIDI clocks per metronome click
            and number of 32nd notes per beat.
            </summary>
            <param name="numerator">Numerator of the time signature.</param>
            <param name="denominator">Denominator of the time signature.</param>
            <param name="clocksPerClick">Number of MIDI clocks per metronome click.</param>
            <param name="thirtySecondNotesPerBeat">Number of 32nd notes per beat.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.Numerator">
            <summary>
            Gets or sets numerator of the time signature.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.Denominator">
            <summary>
            Gets or sets denominator of the time signature.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Denominator is zero or is not a
            power of two.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.ClocksPerClick">
            <summary>
            Gets or sets number of MIDI clock ticks per metronome click.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.ThirtySecondNotesPerBeat">
            <summary>
            Gets or sets number of 32nd notes per beat.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeSignatureEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownMetaEvent">
            <summary>
            Represents an unknown meta event.
            </summary>
            <remarks>
            Structure of meta eventa allows custom ones be implemented and stored within a MIDI file.
            Any meta event DryWetMIDI doesn't know about will be read as an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.UnknownMetaEvent"/>.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownMetaEvent"/> with the
            specified status byte.
            </summary>
            <param name="statusByte">Status byte of the meta event.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownMetaEvent"/> with the
            specified status byte and data.
            </summary>
            <param name="statusByte">Status byte of the meta event.</param>
            <param name="data">Data of an unknown meta event.</param>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.StatusByte">
            <summary>
            Gets the status byte of the meta event.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.Data">
            <summary>
            Gets the content of the meta event as array of bytes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.ReadContent(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32)">
            <summary>
            Reads content of a MIDI meta event.
            </summary>
            <param name="reader">Reader to read the content with.</param>
            <param name="settings">Settings according to which the event's content must be read.</param>
            <param name="size">Size of the event's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown meta event cannot be read since the size is
            negative number.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.WriteContent(Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes content of a MIDI meta event.
            </summary>
            <param name="writer">Writer to write the content with.</param>
            <param name="settings">Settings according to which the event's content must be written.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.GetContentSize(Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Gets the size of the content of a MIDI meta event.
            </summary>
            <param name="settings">Settings according to which the event's content must be written.</param>
            <returns>Size of the event's content.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.CloneEvent">
            <summary>
            Clones event by creating a copy of it.
            </summary>
            <returns>Copy of the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.UnknownMetaEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EscapeSysExEvent">
            <summary>
            Reprsents an "escape" system exclusive event which defines an escape sequence.
            </summary>
            <remarks>
            "Escape" system exclisive events start with 0xF7 byte and don't have a terminal 0xF7
            byte that is required for normal sysex events.
            When an "escape" sysex event is encountered whilst reading a MIDI file, its interpretation
            (SysEx packet or escape sequence) is determined as follows:
            - When an event with 0xF0 status but lacking a terminal 0xF7 is encountered, then this is the
              first of a Casio-style multi-packet message, and a flag (boolean variable) should be set to
              indicate this.
            - If an event with 0xF7 status is encountered whilst this flag is set, then this is a continuation
              event (a system exclusive packet, one of many). If this event has a terminal 0xF7, then it is
              the last packet and flag should be cleared.
            - If an event with 0xF7 status is encountered whilst flag is clear, then this event is an escape sequence.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EscapeSysExEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EscapeSysExEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EscapeSysExEvent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.EscapeSysExEvent"/> with the
            specified data.
            </summary>
            <param name="data">Data of the "escape" sysex event.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EscapeSysExEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NormalSysExEvent">
            <summary>
            Represents a normal system exclusive event.
            </summary>
            <remarks>
            A MIDI event that carries the MIDI system exclusive message, also known as a "MIDI sysex message",
            carries information that is specific to the manufacturer of the MIDI device receiving the message.
            The action that this message prompts for can be anything.
            Note that although the terminal 0xF7 is redundant (strictly speaking, due to the use of a length
            parameter) it must be included.
            System exclisive events can be splitted into multiple packets. In this case the first packet uses
            the 0xF0 status (such event will be read as <see cref="T:Melanchall.DryWetMidi.Smf.NormalSysExEvent"/>), whereas the second and
            subsequent packets use the 0xF7 status (suzh events will be read as <see cref="T:Melanchall.DryWetMidi.Smf.EscapeSysExEvent"/>).
            This use of the 0xF7 status is referred to as a continuation event.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NormalSysExEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NormalSysExEvent"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NormalSysExEvent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NormalSysExEvent"/> with the
            specified data.
            </summary>
            <param name="data">Data of the sysex event.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NormalSysExEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.IEventWriter">
            <summary>
            Provides methods to write events of specific types.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.IEventWriter.Write(Melanchall.DryWetMidi.Smf.MidiEvent,Melanchall.DryWetMidi.Smf.MidiWriter,Melanchall.DryWetMidi.Smf.WritingSettings,System.Boolean)">
            <summary>
            Writes an event to the <see cref="T:Melanchall.DryWetMidi.Smf.MidiWriter"/>'s underlying stream according to specified
            <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="midiEvent">Event to write.</param>
            <param name="writer">Writer to write the event with.</param>
            <param name="settings">Settings according to which the event must be written.</param>
            <param name="writeStatusByte">True if event must write its status byte, false if it must not.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.IEventWriter.CalculateSize(Melanchall.DryWetMidi.Smf.MidiEvent,Melanchall.DryWetMidi.Smf.WritingSettings,System.Boolean)">
            <summary>
            Calculates size of an event as number of bytes required to write it according to specified
            <see cref="T:Melanchall.DryWetMidi.Smf.WritingSettings"/>.
            </summary>
            <param name="midiEvent">Event to calculate size of.</param>
            <param name="settings">Settings according to which the event will be written.</param>
            <param name="writeStatusByte">True if event will write its status byte, false if it will not.</param>
            <returns>Count of bytes required to write the event.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.IEventWriter.GetStatusByte(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Gets status byte of the passed event.
            </summary>
            <param name="midiEvent">Event to get status byte of.</param>
            <returns>Status byte of the event.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.EventWriterFactory">
            <summary>
            Provides a way to get <see cref="T:Melanchall.DryWetMidi.Smf.IEventWriter"/> for an event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.EventWriterFactory.GetWriter(Melanchall.DryWetMidi.Smf.MidiEvent)">
            <summary>
            Gets <see cref="T:Melanchall.DryWetMidi.Smf.IEventWriter"/> for an event.
            </summary>
            <param name="midiEvent">Event to get writer for.</param>
            <returns>Writer for the event.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiFile">
            <summary>
            Class that represents a MIDI file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.#ctor(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.MidiChunk})">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> with the specified chunks.
            </summary>
            <param name="chunks">Chunks to add to the file.</param>
            <remarks>
            Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.#ctor(Melanchall.DryWetMidi.Smf.MidiChunk[])">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> with the specified chunks.
            </summary>
            <param name="chunks">Chunks to add to the file.</param>
            <remarks>
            Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure.
            Header chunk with appropriate information will be written to a file automatically on
            <see cref="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="chunks"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiFile.TimeDivision">
            <summary>
            Gets or sets a time division of a MIDI file.
            </summary>
            <remarks>
            Time division specifies the meaning of the delta-times of events. There are two types of
            the time division: ticks per quarter note and SMPTE. The first type represented by
            <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> class and the second one represented by
            <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> class.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiFile.Chunks">
            <summary>
            Gets collection of chunks of a MIDI file.
            </summary>
            <remarks>
            MIDI Files are made up of chunks. Сollection returned by this property may contain chunks
            of the following types: <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>, <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>, and any custom
            chunk types you've defined.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiFile.OriginalFormat">
            <summary>
            Gets original format of the file was read. This property returns null for the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>
            created by constructor.
            </summary>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException">File format is unknown.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to get original format of the file.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.Read(System.String,Melanchall.DryWetMidi.Smf.ReadingSettings)">
            <summary>
            Reads a MIDI file specified by its full path.
            </summary>
            <param name="filePath">Path to the file to read.</param>
            <param name="settings">Settings according to which the file must be read.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> representing a MIDI file.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform. -or-
            <paramref name="filePath"/> specified a directory. -or- The caller does not have the required permission.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException">There is no header chunk in a file.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException">Actual header or track chunk's size differs from the one declared
            in its header and that should be treated as error according to the <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException">Chunk to be read has unknown ID and that
            should be treated as error accordng to the <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException">Actual track chunks
            count differs from the expected one and that should be treated as error according to
            the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException">The header chunk contains unknown file format and
            <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownFileFormatPolicy"/> property of the <paramref name="settings"/> set to
            <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">Value of a channel event's parameter
            just read is invalid.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException">Value of a meta event's parameter
            just read is invalid.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException">Reader has encountered an unknown channel event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">MIDI file cannot be read since the reader's underlying stream doesn't
            have enough bytes.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">Unexpected running status is encountered.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException">Track chunk doesn't end with End Of Track event and that
            should be treated as error accordng to the specified <paramref name="settings"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.String,System.Boolean,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes the MIDI file to location specified by full path.
            </summary>
            <param name="filePath">Full path of the file to write to.</param>
            <param name="overwriteFile">If true and file specified by <paramref name="filePath"/> already
            exists it will be overwritten; if false and the file exists exception will be thrown.</param>
            <param name="format">MIDI file format to write in.</param>
            <param name="settings">Settings according to which the file must be written.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="format"/> specified an invalid value.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or-
            <paramref name="filePath"/> specified a directory.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.InvalidOperationException">Time division is null.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException">Count of track chunks presented in the file
            exceeds maximum value allowed for MIDI file.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.Read(System.IO.Stream,Melanchall.DryWetMidi.Smf.ReadingSettings)">
            <summary>
            Reads a MIDI file from the stream.
            </summary>
            <param name="stream">Stream to read file from.</param>
            <param name="settings">Settings according to which the file must be read.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> representing a MIDI file was read from the stream.</returns>
            <remarks>
            Stream must be readable, seekable and be able to provide its position and length via <see cref="P:System.IO.Stream.Position"/>
            and <see cref="P:System.IO.Stream.Length"/> properties.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support reading. -or
            <paramref name="stream"/> doesn't support seeking. -or- <paramref name="stream"/> is already read.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading from the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed. -or-
            Underlying stream reader is disposed.</exception>
            <exception cref="T:System.NotSupportedException">Unable to get position of the <paramref name="stream"/>. -or
            Unable to get length of the <paramref name="stream"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException">There is no header chunk in a file.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException">Actual header or track chunk's size differs from the one declared
            in its header and that should be treated as error according to the <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException">Chunk to be read has unknown ID and that
            should be treated as error accordng to the <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException">Actual track chunks
            count differs from the expected one and that should be treated as error according to
            the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException">The header chunk contains unknown file format and
            <see cref="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownFileFormatPolicy"/> property of the <paramref name="settings"/> set to
            <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">MIDI file cannot be read since the reader's underlying stream doesn't
            have enough bytes.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">Unexpected running status is encountered.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException">Track chunk doesn't end with End Of Track event and that
            should be treated as error accordng to the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">Value of a channel event's parameter
            just read is invalid.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException">Value of a meta event's parameter
            just read is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.Write(System.IO.Stream,Melanchall.DryWetMidi.Smf.MidiFileFormat,Melanchall.DryWetMidi.Smf.WritingSettings)">
            <summary>
            Writes current <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to the stream.
            </summary>
            <param name="stream">Stream to write file's data to.</param>
            <param name="format">Format of the file to be written.</param>
            <param name="settings">Settings according to which the file must be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support writing.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="format"/> specified an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Time division is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing to the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed. -or-
            Underlying stream writer is disposed.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.TooManyTrackChunksException">Count of track chunks presented in the file
            exceeds maximum value allowed for MIDI file.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.Clone">
            <summary>
            Clones MIDI file by creating a copy of it.
            </summary>
            <returns>Copy of the MIDI file.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.ReadChunk(Melanchall.DryWetMidi.Smf.MidiReader,Melanchall.DryWetMidi.Smf.ReadingSettings,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Reads a chunk from a MIDI-file.
            </summary>
            <param name="reader">Reader to read a chunk with.</param>
            <param name="settings">Settings according to which a chunk must be read.</param>
            <param name="actualTrackChunksCount">Actual count of track chunks at the moment.</param>
            <param name="expectedTrackChunksCount">Expected count of track chunks.</param>
            <returns>A MIDI-file chunk.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException">Chunk to be read has unknown ID and that
            should be treated as error accordng to the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException">Actual track chunks
            count is greater than expected one and that should be treated as error according to
            the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException">Actual chunk's size differs from the one declared
            in its header and that should be treated as error according to the specified
            <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnknownChannelEventException">Reader has encountered an unknown channel event.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Value cannot be read since the reader's underlying stream
            doesn't have enough bytes.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedRunningStatusException">Unexpected running status is encountered.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException">Track chunk doesn't end with End Of Track event and that
            should be treated as error accordng to the specified <paramref name="settings"/>.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException">Value of a channel event's parameter
            just read is invalid.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException">Value of a meta event's parameter
            just read is invalid.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.ReactOnUnexpectedTrackChunksCount(Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy,System.Int32,System.Int32)">
            <summary>
            Does nothing if difference between expected track chunks count and the actual one should not
            be treated as error; or throws the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/> if this
            difference is unallowable.
            </summary>
            <param name="policy">The policy according to which the method should operate.</param>
            <param name="actualTrackChunksCount">Actual count of track chunks.</param>
            <param name="expectedTrackChunksCount">Expected count of track chunks.</param>
            <exception cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException">Difference between expected track chunks
            count and the actual one is unallowable due to the <paramref name="policy"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.ReactOnNotEnoughBytes(Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy,System.Exception)">
            <summary>
            Does nothing if lack of bytes in the reader's underlying stream needed to read a value should
            not be treated as error; or throws the <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/> if this is
            unallowable.
            </summary>
            <param name="policy">The policy according to which the method should operate.</param>
            <param name="exception">Initial exception.</param>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Lack of bytes in the reader's underlying stream needed to
            read a value is unallowable due to the <paramref name="policy"/>.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.TryCreateChunk(System.String,Melanchall.DryWetMidi.Smf.ChunkTypesCollection)">
            <summary>
            Tries to create an instance of a chunk type that has specified ID.
            </summary>
            <param name="chunkId">ID of the chunk that need to be created.</param>
            <param name="chunksTypes">Collection of the chunks types to search for the one with
            <paramref name="chunkId"/> ID.</param>
            <returns>An instance of the chunk type with the specified ID or null if <paramref name="chunksTypes"/>
            doesn't contain chunk type with it.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFile.IsChunkType(System.Type)">
            <summary>
            Checks if a type represents a MIDI-file chunk.
            </summary>
            <param name="type">Type to check whether it represents a chunk or not.</param>
            <returns>True if passed type represents a MIDI-file chunk; false - otherwise.</returns>
            <remarks>
            Type represents a chunk if it is derived from the <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/> class and has
            parameterless constructor.
            </remarks>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiFileFormat">
            <summary>
            Format of a Standard MIDI file which specifies overall structure of the file.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.SingleTrack">
            <summary>
            The file contains a single multi-channel track.
            </summary>
            <remarks>
            File of this format has a header chunk followed by one track chunk. It is the most
            interchangeable representation of data.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.MultiTrack">
            <summary>
            The file contains one or more simultaneous tracks (or MIDI outputs) of a sequence.
            </summary>
            <remarks>
            File of this format has a header chunk followed by one or more track chunks. First track
            chunk is usually reserved for tempo information (it can contain events like
            <see cref="T:Melanchall.DryWetMidi.Smf.SetTempoEvent"/>, <see cref="T:Melanchall.DryWetMidi.Smf.TimeSignatureEvent"/>, <see cref="T:Melanchall.DryWetMidi.Smf.KeySignatureEvent"/>).
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.MultiSequence">
            <summary>
            The file contains one or more sequentially independent single-track patterns.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiReader">
            <summary>
            Reader of the MIDI data types.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiReader"/> with the specified stream.
            </summary>
            <param name="stream">Stream to read MIDI file from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading,
            or is already closed.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiReader.Position">
            <summary>
            Gets or sets the position within the underlying stream.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:System.ObjectDisposedException">Property was called after the reader was disposed.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiReader.Length">
            <summary>
            Gets length of the underlying stream.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:System.ObjectDisposedException">Property was called after the reader was disposed.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.MidiReader.EndReached">
            <summary>
            Gets a value indicating whether end of the underlying stream is reached.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:System.ObjectDisposedException">Property was called after the reader was disposed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadAllBytes">
            <summary>
            Reads all remaining bytes from the underlying stream and moves the current position
            to the stream's end.
            </summary>
            <returns>All bytes read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the underlying stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadByte">
            <summary>
            Reads a byte from the underlying stream and advances the current position by one byte.
            </summary>
            <returns>The next byte read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the underlying stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadSByte">
            <summary>
            Reads a signed byte from the underlying stream and advances the current position by one byte.
            </summary>
            <returns>A signed byte read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the underlying stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the underlying stream into a byte array
            and advances the current position by that number of bytes.
            </summary>
            <param name="count">The number of bytes to read. This value must be 0 or a
            non-negative number or an exception will occur.</param>
            <returns>A byte array containing data read from the underlying stream. This might be less
            than the number of bytes requested if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadWord">
            <summary>
            Reads a WORD value (16-bit unsigned integer) from the underlying stream and
            advances the current position by two bytes.
            </summary>
            <returns>A 16-bit unsigned integer read from the underlying stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a WORD.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadDword">
            <summary>
            Reads a DWORD value (32-bit unsigned integer) from the underlying stream and
            advances the current position by four bytes.
            </summary>
            <returns>A 32-bit unsigned integer read from the underlying stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a DWORD.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadInt16">
            <summary>
            Reads an INT16 value (16-bit signed integer) from the underlying stream and
            advances the current position by two bytes.
            </summary>
            <returns>A 16-bit signed integer read from the underlying stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a INT16.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadString(System.Int32)">
            <summary>
            Reads the specified number of characters from the underlying stream, returns the
            data as string, and advances the current position by that number of characters.
            </summary>
            <param name="count">The length of string to read.</param>
            <returns>The string being read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadVlqNumber">
            <summary>
            Reads a 32-bit signed integer presented in compressed format called variable-length quantity (VLQ)
            to the underlying stream.
            </summary>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
            <returns>A 32-bit signed integer read from the underlying stream.</returns>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a variable-length quantity
            number.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.ReadVlqLongNumber">
            <summary>
            Reads a 64-bit signed integer presented in compressed format called variable-length quantity (VLQ)
            to the underlying stream.
            </summary>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
            <returns>A 64-bit signed integer read from the underlying stream.</returns>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a variable-length quantity
            number.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.Read3ByteDword">
            <summary>
            Reads a DWORD value (32-bit unsigned integer) presented by 3 bytes from the underlying
            stream and advances the current position by three bytes.
            </summary>
            <returns>A 32-bit unsigned integer read from the underlying stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Method was called after the reader was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
            <exception cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException">Not enough bytes in the stream to read a 3-byte DWORD.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiReader.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiReader"/> class.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiWriter">
            <summary>
            Writer of the MIDI data types.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiWriter"/> with the specified stream.
            </summary>
            <param name="stream">Stream to write MIDI file to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing,
            or is already closed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be
            written to the underlying file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteByte(System.Byte)">
            <summary>
            Writes an unsigned byte to the underlying stream and advances the stream position
            by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="bytes">A byte array containing the data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteSByte(System.SByte)">
            <summary>
            Writes a signed byte to the underlying stream and advances the stream position by one byte.
            </summary>
            <param name="value">The signed byte to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteWord(System.UInt16)">
            <summary>
            Writes a WORD value (16-bit unsigned integer) to the underlying stream and
            advances the current position by two bytes.
            </summary>
            <param name="value">WORD value to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteDword(System.UInt32)">
            <summary>
            Writes a DWORD value (32-bit unsigned integer) to the underlying stream and
            advances the current position by four bytes.
            </summary>
            <param name="value">DWORD value to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a INT16 value (16-bit signed integer) to the underlying stream and
            advances the current position by two bytes.
            </summary>
            <param name="value">INT16 value to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteString(System.String)">
            <summary>
            Writes a string to the underlying stream as set of ASCII bytes.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteVlqNumber(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the underlying stream in compressed format called
            variable-length quantity (VLQ).
            </summary>
            <param name="value">The value to write.</param>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.WriteVlqNumber(System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the underlying stream in compressed format called
            variable-length quantity (VLQ).
            </summary>
            <param name="value">The value to write.</param>
            <remarks>
            Numbers in VLQ format are represented 7 bits per byte, most significant bits first.
            All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the
            number is between 0 and 127, it is thus represented exactly as one byte.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.Write3ByteDword(System.UInt32)">
            <summary>
            Writes a DWORD value (32-bit unsigned integer) to the underlying stream as three bytes
            and advances the current position by three bytes.
            </summary>
            <param name="value">DWORD value to write.</param>
            <exception cref="T:System.ObjectDisposedException">Method was called after the writer was disposed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred on the underlying stream.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiWriter.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiWriter"/> class.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.DecodeTextCallback">
            <summary>
            Callback used to decode a string from the specified bytes during reading a text-based
            meta event.
            </summary>
            <param name="bytes">Bytes to decode a string from.</param>
            <param name="settings">Settings used to read MIDI data.</param>
            <returns>A string decoded from given bytes.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ExtraTrackChunkPolicy">
            <summary>
            Specifies how reading engine should react on new track chunk if already read chunks
            count greater or equals the one declared at the file header. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.ExtraTrackChunkPolicy.Read"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.ExtraTrackChunkPolicy.Read">
            <summary>
            Read the track chunk anyway.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.ExtraTrackChunkPolicy.Skip">
            <summary>
            Skip the chunk and go to the next one.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy">
            <summary>
            Specifies how reading engine should react on invalid value of a channel event's
            parameter value. Valid values are 0-127 so, for example, 128 is the invalid one
            and will be processed according with this policy. The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.ReadValid">
            <summary>
            Read byte and take its lower seven bits as the final value.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.SnapToLimits">
            <summary>
            Read value and snap it to limits of the allowable range if it is out of them.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidEventSizePolicy">
            <summary>
            Specifies how reading engine should react on invalid expected size of an event.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidEventSizePolicy.Ignore"/>.
            </summary>
            <remarks>
            Some events (at now, meta events only) are written along with the size of their content.
            For example, for the Set Tempo event 0 should be written as a size since this event has
            no parameters. If read size is not 0 and <see cref="F:Melanchall.DryWetMidi.Smf.InvalidEventSizePolicy.Abort"/> option is used, an
            exception will be thrown.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidEventSizePolicy.Ignore">
            <summary>
            Ignore invalid declared size of an event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidEventSizePolicy.Abort">
            <summary>
            Abort reading and throw an exception.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy">
            <summary>
            Specifies how reading engine should react on invalid value of a meta event's
            parameter value. For example, 255 is the invalid value for the <see cref="P:Melanchall.DryWetMidi.Smf.KeySignatureEvent.Scale"/>
            and will be processed according with this policy. The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.SnapToLimits">
            <summary>
            Read value and snap it to limits of the allowable range if it is out of them.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy">
            <summary>
            Specifies how reading engine should react on invalid value of a system common event's
            parameter value. For example, 255 is the invalid value for the <see cref="P:Melanchall.DryWetMidi.Smf.SongSelectEvent.Number"/>
            and will be processed according with this policy. The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.SnapToLimits">
            <summary>
            Read value and snap it to limits of the allowable range if it is out of them.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy">
            <summary>
            Specifies how reading engine should react on missing of the header chunk
            in the MIDI file. The default is <see cref="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Ignore">
            <summary>
            Ignore missing of the header chunk.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy">
            <summary>
            Specifies how reading engine should react on lack of bytes in the underlying stream
            that are needed to read some value (for example, DWORD requires 4 bytes available).
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Ignore">
            <summary>
            Ignore lack of bytes in the reader's underlying stream and just end reading.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy">
            <summary>
            Specifies how reading engine should react on unexpected track chunks count. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Ignore"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Ignore">
            <summary>
            Ignore unexpected track chunks count.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy">
            <summary>
            Specifies how reading engine should react on chunk with unknown ID. The default
            is <see cref="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.ReadAsUnknownChunk"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.ReadAsUnknownChunk">
            <summary>
            Read the chunk as <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.Skip">
            <summary>
            Skip this chunk and go to the next one.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy">
            <summary>
            Specifies how reading engine should react on missed End Of Track event.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Ignore"/>.
            </summary>
            <remarks>
            Although the End Of Track event is not optional and therefore missing of it
            must be treated as error, you can try to read a track chunk relying on the chunk's size only.
            </remarks>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Ignore">
            <summary>
            Ignore missing of the End Of Track event and try to read a track chunk relying on
            the chunk's size.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ReadingSettings">
            <summary>
            Settings of the reading engine.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnexpectedTrackChunksCountPolicy">
            <summary>
            Gets or sets reaction of the reading engine on unexpected track chunks count. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Ignore"/>.
            </summary>
            <remarks>
            This policy will be taken into account if actual track chunks count is less or greater than
            tracks number specified in the file's header chunk. If <see cref="F:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountPolicy.Abort"/>
            is used an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.UnexpectedTrackChunksCountException"/> will be thrown if
            track chunks count is unexpected.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.ExtraTrackChunkPolicy">
            <summary>
            Gets or sets reaction of the reading engine on new track chunk if already read
            track chunks count is greater or equals the one declared in the file's header chunk.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.ExtraTrackChunkPolicy.Read"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownChunkIdPolicy">
            <summary>
            Gets or sets reaction of the reading engine on chunk with unknown ID. The default
            is <see cref="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.ReadAsUnknownChunk"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.UnknownChunkIdPolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunkException"/> will be thrown if a chunk to be read has unknown ID.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.MissedEndOfTrackPolicy">
            <summary>
            Gets or sets reaction of the reading engine on missed End Of Track event.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Ignore"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.MissedEndOfTrackPolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.MissedEndOfTrackEventException"/> will be thrown if track chunk
            doesn't end with End Of Track event. Although this event is not optional and
            therefore missing of it must be treated as error, you can try to read a track chunk
            relying on the chunk's size only.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.SilentNoteOnPolicy">
            <summary>
            Gets or sets reaction of the reading engine on Note On events with velocity 0.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.SilentNoteOnPolicy.NoteOff"/>. Although it is recommended to treat silent
            Note On event as Note Off you can turn this behavior off to get original event stored in the file.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidChunkSizePolicy">
            <summary>
            Gets or sets reaction of the reading engine on difference between actual chunk's size and
            the one declared in its header. The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException"/> will be thrown if actual chunk's size differs from
            the one declared in chunk's header.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.UnknownFileFormatPolicy">
            <summary>
            Gets or sets reaction of the reading engine on unknown file format stored in a header chunk.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Ignore"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/> will be thrown if file format stored in a header
            chunk doesn't belong to values defined by the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFileFormat"/> enumeration.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidChannelEventParameterValuePolicy">
            <summary>
            Gets or sets reaction of the reading engine on invalid value of a channel event's
            parameter value. Valid values are 0-127 so, for example, 128 is the invalid one
            and will be processed according with this policy. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValuePolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChannelEventParameterValueException"/> will be thrown if event's parameter value
            just read is invalid.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidMetaEventParameterValuePolicy">
            <summary>
            Gets or sets reaction of the reading engine on invalid value of a meta event's
            parameter value. For example, 255 is the invalid value for the <see cref="P:Melanchall.DryWetMidi.Smf.KeySignatureEvent.Scale"/>
            and will be processed according with this policy. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValuePolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.InvalidMetaEventParameterValueException"/> will be thrown if event's parameter value
            just read is invalid.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.InvalidSystemCommonEventParameterValuePolicy">
            <summary>
            Gets or sets reaction of the reading engine on invalid value of a system common event's
            parameter value. For example, 255 is the invalid value for the <see cref="P:Melanchall.DryWetMidi.Smf.SongSelectEvent.Number"/>
            and will be processed according with this policy. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValuePolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.InvalidSystemCommonEventParameterValueException"/> will be thrown if event's parameter value
            just read is invalid.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.NotEnoughBytesPolicy">
            <summary>
            Gets or sets reaction of the reading engine on lack of bytes in the underlying stream
            that are needed to read some value (for example, DWORD requires 4 bytes available).
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.NotEnoughBytesPolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.NotEnoughBytesException"/> will be thrown if the reader's underlying stream doesn't
            have enough bytes to read a value.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.NoHeaderChunkPolicy">
            <summary>
            Gets or sets reaction of the reading engine on missing of the header chunk in the MIDI file.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Abort"/>.
            </summary>
            <remarks>
            If <see cref="F:Melanchall.DryWetMidi.Smf.NoHeaderChunkPolicy.Abort"/> is used an instance of the
            <see cref="T:Melanchall.DryWetMidi.Smf.NoHeaderChunkException"/> will be thrown if the MIDI file doesn't contain the header chunk.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.CustomChunkTypes">
            <summary>
            Gets or sets collection of custom chunks types. These types must be derived from the <see cref="T:Melanchall.DryWetMidi.Smf.MidiChunk"/>
            class and have parameterless constructor. No exception will be thrown if some types don't meet
            these requirements.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.CustomMetaEventTypes">
            <summary>
            Gets or sets collection of custom meta events types. These types must be derived from the
            <see cref="T:Melanchall.DryWetMidi.Smf.MetaEvent"/> class and have parameterless constructor. No exception will be thrown
            if some types don't meet these requirements.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.TextEncoding">
            <summary>
            Gets or sets an <see cref="T:System.Text.Encoding"/> that will be used to read the text of a
            text-based meta event. The default is <see cref="P:System.Text.Encoding.ASCII"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.ReadingSettings.DecodeTextCallback">
            <summary>
            Gets or sets a callback used to decode a string from the specified bytes during reading a text-based
            meta event. The default is null.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SilentNoteOnPolicy">
            <summary>
            Specifies how reading engine should react on Note On events with velocity 0.
            The default is <see cref="F:Melanchall.DryWetMidi.Smf.SilentNoteOnPolicy.NoteOff"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.SilentNoteOnPolicy.NoteOff">
            <summary>
            Read the event as <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.SilentNoteOnPolicy.NoteOn">
            <summary>
            Read the event as <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy">
            <summary>
            Specifies how reading engine should react on difference between actual
            chunk's size and the one declared in its header. The default is <see cref="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Abort"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.InvalidChunkSizeException"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.InvalidChunkSizePolicy.Ignore">
            <summary>
            Ignore difference between actual chunk's size and the declared one.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy">
            <summary>
            Specifies how reading engine should react on file format which doesn't belong to
            the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFileFormat"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Ignore">
            <summary>
            Ignore unknown file format and try to read chunks.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.UnknownFileFormatPolicy.Abort">
            <summary>
            Abort reading and throw an <see cref="T:Melanchall.DryWetMidi.Smf.UnknownFileFormatException"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TimeDivision">
            <summary>
            MIDI file time division.
            </summary>
            <remarks>
            Time division specifies the meaning of the delta-times of events. There are two types of
            the time division: ticks per quarter note and SMPTE. Time division of the first type has bit 15 set
            to 0. In this case bits 14 thru 0 represent the number of ticks which make up a quarter-note.
            Division of the second type has bit 15 set to 1. In this case bits 14 thru 8 contain one of the four
            values: -24, -25, -29, or -30, corresponding to the four standard SMPTE and MIDI Time Code formats
            (-29 corresponds to 30 drop frame), and represents the number of frames per second. Bits 7 thru 0
            (which represent a byte stored positive) is the resolution within a frame: typical values may be 4
            (MIDI Time Code resolution), 8, 10, 80 (bit resolution), or 100.
            </remarks>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeDivision.ToInt16">
            <summary>
            Converts this time division into 16-bit signed integer number that will be written to a file.
            </summary>
            <returns>16-bit signed integer number representing this time division.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TimeDivision.Clone">
            <summary>
            Clones time division by creating a copy of it.
            </summary>
            <returns>Copy of the time division.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision">
            <summary>
            Time division that represents subdivisions of a second, in a way consistent with
            SMPTE and MIDI time code.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.#ctor(Melanchall.DryWetMidi.Common.SmpteFormat,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> with the
            specified format (frame rate) and resoltion.
            </summary>
            <param name="format">SMPTE format representing the number of frames per second.</param>
            <param name="resolution">Resoltuion within a frame.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="format"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.Format">
            <summary>
            Gets SMPTE format (frame rate).
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.Resolution">
            <summary>
            Gets resoltion within a frame.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.op_Equality(Melanchall.DryWetMidi.Smf.SmpteTimeDivision,Melanchall.DryWetMidi.Smf.SmpteTimeDivision)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> objects are equal.
            </summary>
            <param name="timeDivision1">The first <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> to compare.</param>
            <param name="timeDivision2">The second <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> to compare.</param>
            <returns>true if the time divisions are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.op_Inequality(Melanchall.DryWetMidi.Smf.SmpteTimeDivision,Melanchall.DryWetMidi.Smf.SmpteTimeDivision)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> objects are not equal.
            </summary>
            <param name="timeDivision1">The first <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> to compare.</param>
            <param name="timeDivision2">The second <see cref="T:Melanchall.DryWetMidi.Smf.SmpteTimeDivision"/> to compare.</param>
            <returns>false if the time divisions are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.Clone">
            <summary>
            Clones time division by creating a copy of it.
            </summary>
            <returns>Copy of the time division.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.SmpteTimeDivision.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision">
            <summary>
            Time division that represents number of delta-time "ticks" which make up a quarter-note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.DefaultTicksPerQuarterNote">
            <summary>
            Default number of ticks which make up a quarter-note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> with
            the specified ticks number per a quarter-note.
            </summary>
            <param name="ticksPerQuarterNote">Number of ticks which make up a quarter-note.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticksPerQuarterNote"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.TicksPerQuarterNote">
            <summary>
            Gets or sets number of ticks which make up a quarter-note.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.op_Equality(Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision,Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> objects are equal.
            </summary>
            <param name="timeDivision1">The first <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> to compare.</param>
            <param name="timeDivision2">The second <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> to compare.</param>
            <returns>true if the time divisions are equal, false otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.op_Inequality(Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision,Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision)">
            <summary>
            Determines if two <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> objects are not equal.
            </summary>
            <param name="timeDivision1">The first <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> to compare.</param>
            <param name="timeDivision2">The second <see cref="T:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision"/> to compare.</param>
            <returns>false if the time divisions are equal, true otherwise.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.Clone">
            <summary>
            Clones time division by creating a copy of it.
            </summary>
            <returns>Copy of the time division.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TicksPerQuarterNoteTimeDivision.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.ControlUtilities">
            <summary>
            Set of extension methods for <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/> event.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlUtilities.GetControlName(Melanchall.DryWetMidi.Smf.ControlChangeEvent)">
            <summary>
            Gets name of the controller presented by an instance of <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/>.
            </summary>
            <param name="controlChangeEvent">Control Change event to get controller name of.</param>
            <returns>Controller name of the <paramref name="controlChangeEvent"/> event.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlChangeEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlUtilities.AsSevenBitNumber(Melanchall.DryWetMidi.Common.ControlName)">
            <summary>
            Converts <see cref="T:Melanchall.DryWetMidi.Common.ControlName"/> to the corresponding value of the <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> type.
            </summary>
            <param name="controlName"><see cref="T:Melanchall.DryWetMidi.Common.ControlName"/> to convert to <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing the <paramref name="controlName"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="controlName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlUtilities.GetControlChangeEvent(Melanchall.DryWetMidi.Common.ControlName,Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Gets an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/> corresponding to the specified controller.
            </summary>
            <param name="controlName"><see cref="T:Melanchall.DryWetMidi.Common.ControlName"/> to get an event for.</param>
            <param name="controlValue">Controller value to set to event.</param>
            <param name="channel">Channel an event should be created for.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ControlChangeEvent"/> corresponding to the <paramref name="controlName"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="controlName"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.ControlUtilities.GetControlName(Melanchall.DryWetMidi.Common.SevenBitNumber)">
            <summary>
            Gets name of the controller presented by control number.
            </summary>
            <param name="controlNumber">Control number to get controller name of.</param>
            <returns>Name of the controller presented by <paramref name="controlNumber"/>.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.MidiFileUtilities">
            <summary>
            Provides useful methods to manipulate an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.MidiFileUtilities.GetChannels(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets all channel numbers presented in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to get channels of.</param>
            <returns>Collection of channel numbers presented in the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.NoteEventUtilities">
            <summary>
            Set of extension methods for <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> and <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> events.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEventUtilities.GetNoteName(Melanchall.DryWetMidi.Smf.NoteEvent)">
            <summary>
            Gets name of the note presented by the specified <see cref="T:Melanchall.DryWetMidi.Smf.NoteEvent"/>.
            </summary>
            <param name="noteEvent">Note event to get note name of.</param>
            <returns>Note name of the <paramref name="noteEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEventUtilities.GetNoteOctave(Melanchall.DryWetMidi.Smf.NoteEvent)">
            <summary>
            Gets octave of the note presented by the specified <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.
            </summary>
            <param name="noteEvent">Note event to get note octave of.</param>
            <returns>Note octave of the <paramref name="noteEvent"/>.</returns>
            <remarks>
            Octave number will be returned in scientific pitch notation which means
            that 4 will be returned for 60 note number.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteEvent"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEventUtilities.SetNoteNumber(Melanchall.DryWetMidi.Smf.NoteEvent,Melanchall.DryWetMidi.MusicTheory.NoteName,System.Int32)">
            <summary>
            Sets the note number of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteEvent"/> with the specified note name and octave.
            </summary>
            <param name="noteEvent">Note event to set the note number of.</param>
            <param name="noteName">Name of the note.</param>
            <param name="octave">Number of the octave.</param>
            <remarks>
            Octave number is specified in scientific pitch notation which means that 4 must be
            passed to get the number of the middle C.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteEvent"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="noteName"/> specified an
            invalid value.</exception>
            <exception cref="T:System.ArgumentException">Note number is out of range for the specified note
            name and octave.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.NoteEventUtilities.IsNoteOnCorrespondToNoteOff(Melanchall.DryWetMidi.Smf.NoteOnEvent,Melanchall.DryWetMidi.Smf.NoteOffEvent)">
            <summary>
            Checks if the specified <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> corresponds to the specified
            <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.
            </summary>
            <remarks>
            Note On event corresponds to Note Off one if it has the same note's number and channel,
            i.e. those events make up a note.
            </remarks>
            <param name="noteOnEvent"><see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> to check <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> for.</param>
            <param name="noteOffEvent"><see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> to check <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> for.</param>
            <returns>true if <paramref name="noteOnEvent"/> corresponds to <paramref name="noteOffEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="noteOnEvent"/> is null. -or-
            <paramref name="noteOffEvent"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.SmfConstants">
            <summary>
            Constants related to Standard MIDI Files.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.SmfConstants.DefaultTextEncoding">
            <summary>
            Gets the default <see cref="T:System.Text.Encoding"/> used by Standard MIDI File to encode/decode
            text data.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.TrackChunkUtilities">
            <summary>
            Provides extension methods for <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunkUtilities.GetTrackChunks(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Gets all track chunks of a MIDI file.
            </summary>
            <param name="midiFile">MIDI file to get track chunks of.</param>
            <returns>Collection of track chunks contained in the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunkUtilities.Merge(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk})">
            <summary>
            Merges multiple track chunks into one that corresponds to <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.SingleTrack"/>.
            </summary>
            <param name="trackChunks">Track chunks to merge into one.</param>
            <returns>Track chunk that containes all events from the <paramref name="trackChunks"/>.</returns>
            <remarks>
            Note that events will be cloned so events in the result track chunk will not be equal
            by reference to events in the <paramref name="trackChunks"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunkUtilities.Explode(Melanchall.DryWetMidi.Smf.TrackChunk)">
            <summary>
            Splits a track chunk into multiple ones that correspond to <see cref="F:Melanchall.DryWetMidi.Smf.MidiFileFormat.MultiTrack"/>.
            </summary>
            <param name="trackChunk">Track chunk to split into multiple ones.</param>
            <returns>Multiple track chunks that represent <paramref name="trackChunk"/>.</returns>
            <remarks>
            Note that events will be cloned so events in the result track chunks will not be equal
            by reference to events in the <paramref name="trackChunk"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunkUtilities.GetChannels(Melanchall.DryWetMidi.Smf.TrackChunk)">
            <summary>
            Gets all channel numbers presented in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to get channels of.</param>
            <returns>Collection of channel numbers presented in the <paramref name="trackChunk"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Smf.TrackChunkUtilities.GetChannels(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk})">
            <summary>
            Gets all channel numbers presented in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to get channels of.</param>
            <returns>Collection of channel numbers presented in the <paramref name="trackChunks"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.CompressionPolicy">
            <summary>
            Specifies how writing engine should compress MIDI data. The default is <see cref="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.NoCompression"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.NoCompression">
            <summary>
            Don't use any compression on the MIDI data to write.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.Default">
            <summary>
            Use default compression on the MIDI data to write. This option turns on all options
            that don't lead to data losing (for example, unknown meta events).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.UseRunningStatus">
            <summary>
            Use 'running status' to turn off writing of the status bytes of consecutive events
            of the same type.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.NoteOffAsSilentNoteOn">
            <summary>
            Turn Note Off events into the Note On ones with zero velocity. Note that it helps to
            compress MIDI data in the case of <see cref="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.UseRunningStatus"/> is used only.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.DeleteDefaultTimeSignature">
            <summary>
            Don't write default Time Signature event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.DeleteDefaultKeySignature">
            <summary>
            Don't write default Key Signature event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.DeleteDefaultSetTempo">
            <summary>
            Don't write default Set Tempo event.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.DeleteUnknownMetaEvents">
            <summary>
            Don't write instances of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownMetaEvent"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.DeleteUnknownChunks">
            <summary>
            Don't write instances of the <see cref="T:Melanchall.DryWetMidi.Smf.UnknownChunk"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Smf.WritingSettings">
            <summary>
            Settings of the writing engine.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.WritingSettings.CompressionPolicy">
            <summary>
            Gets or sets compression rules for the writing engine. The default is
            <see cref="F:Melanchall.DryWetMidi.Smf.CompressionPolicy.NoCompression"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.WritingSettings.CustomMetaEventTypes">
            <summary>
            Gets or sets collection of custom meta events types. These types must be derived from the
            <see cref="T:Melanchall.DryWetMidi.Smf.MetaEvent"/> class and have parameterless constructor. No exception will be thrown
            while writing a MIDI file if some types don't meet these requirements.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Smf.WritingSettings.TextEncoding">
            <summary>
            Gets or sets an <see cref="T:System.Text.Encoding"/> that will be used to write the text of a
            text-based meta event. The default is <see cref="P:System.Text.Encoding.ASCII"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidi2Program">
            <summary>
            General MIDI Level 2 program (patch).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGrandPiano">
            <summary>
            'Acoustic Grand Piano' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGrandPianoWide">
            <summary>
            'Acoustic Grand Piano (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGrandPianoDark">
            <summary>
            'Acoustic Grand Piano (dark)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BrightAcousticPiano">
            <summary>
            'Bright Acoustic Piano' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BrightAcousticPianoWide">
            <summary>
            'Bright Acoustic Piano (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGrandPiano">
            <summary>
            'Electric Grand Piano' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGrandPianoWide">
            <summary>
            'Electric Grand Piano (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HonkyTonkPiano">
            <summary>
            'Honky Tonk Piano' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HonkyTonkPianoWide">
            <summary>
            'Honky Tonk Piano (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricPiano1">
            <summary>
            'Electric Piano1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DetunedElectricPiano1">
            <summary>
            'Detuned Electric Piano1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricPiano1VelocityMix">
            <summary>
            'Electric Piano1 (velocity mix)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SixtiesElectricPiano">
            <summary>
            'Sixties Electric Piano' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricPiano2">
            <summary>
            'Electric Piano2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DetunedElectricPiano2">
            <summary>
            'Detuned Electric Piano2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricPiano2VelocityMix">
            <summary>
            'Electric Piano2 (velocity mix)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.EpLegend">
            <summary>
            'Ep Legend' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.EpPhase">
            <summary>
            'Ep Phase' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Harpsichord">
            <summary>
            'Harpsichord' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HarpsichordOctaveMix">
            <summary>
            'Harpsichord (octave mix)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HarpsichordWide">
            <summary>
            'Harpsichord (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HarpsichordWithKeyOff">
            <summary>
            'Harpsichord (with key off)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Clavi">
            <summary>
            'Clavi' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PulseClavi">
            <summary>
            'Pulse Clavi' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Celesta">
            <summary>
            'Celesta' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Glockenspiel">
            <summary>
            'Glockenspiel' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MusicBox">
            <summary>
            'Music Box' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Vibraphone">
            <summary>
            'Vibraphone' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.VibraphoneWide">
            <summary>
            'Vibraphone (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Marimba">
            <summary>
            'Marimba' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MarimbaWide">
            <summary>
            'Marimba (wide)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Xylophone">
            <summary>
            'Xylophone' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TubularBells">
            <summary>
            'Tubular Bells' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ChurchBell">
            <summary>
            'Church Bell' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Carillon">
            <summary>
            'Carillon' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Dulcimer">
            <summary>
            'Dulcimer' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DrawbarOrgan">
            <summary>
            'Drawbar Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DetunedDrawbarOrgan">
            <summary>
            'Detuned Drawbar Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ItalianSixtiesOrgan">
            <summary>
            'Italian Sixties Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DrawbarOrgan2">
            <summary>
            'Drawbar Organ2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PercussiveOrgan">
            <summary>
            'Percussive Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DetunedPercussiveOrgan">
            <summary>
            'Detuned Percussive Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PercussiveOrgan2">
            <summary>
            'Percussive Organ2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.RockOrgan">
            <summary>
            'Rock Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ChurchOrgan">
            <summary>
            'Church Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ChurchOrganOctaveMix">
            <summary>
            'Church Organ (octave mix)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DetunedChurchOrgan">
            <summary>
            'Detuned Church Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ReedOrgan">
            <summary>
            'Reed Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PuffOrgan">
            <summary>
            'Puff Organ' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Accordion">
            <summary>
            'Accordion' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Accordion2">
            <summary>
            'Accordion2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Harmonica">
            <summary>
            'Harmonica' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TangoAccordion">
            <summary>
            'Tango Accordion' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGuitarNylon">
            <summary>
            'Acoustic Guitar (nylon)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Ukulele">
            <summary>
            'Ukulele' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGuitarNylonKeyOff">
            <summary>
            'Acoustic Guitar (nylon key off)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGuitarNylon2">
            <summary>
            'Acoustic Guitar (nylon2)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticGuitarSteel">
            <summary>
            'Acoustic Guitar (steel)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TwelveStringsGuitar">
            <summary>
            'Twelve Strings Guitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Mandolin">
            <summary>
            'Mandolin' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SteelGuitarWithBodySound">
            <summary>
            'Steel Guitar With Body Sound' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarJazz">
            <summary>
            'Electric Guitar (jazz)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarPedalSteel">
            <summary>
            'Electric Guitar (pedal steel)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarClean">
            <summary>
            'Electric Guitar (clean)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarDetunedClean">
            <summary>
            'Electric Guitar (detuned clean)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MidToneGuitar">
            <summary>
            'Mid Tone Guitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarMuted">
            <summary>
            'Electric Guitar (muted)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarFunkyCutting">
            <summary>
            'Electric Guitar (funky cutting)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricGuitarMutedVeloSw">
            <summary>
            'Electric Guitar (muted velo sw)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.JazzMan">
            <summary>
            'Jazz Man' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.OverdrivenGuitar">
            <summary>
            'Overdriven Guitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.GuitarPinch">
            <summary>
            'Guitar Pinch' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DistortionGuitar">
            <summary>
            'Distortion Guitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DistortionGuitarWithFeedback">
            <summary>
            'Distortion Guitar (with feedback)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DistortedRhythmGuitar">
            <summary>
            'Distorted Rhythm Guitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.GuitarHarmonics">
            <summary>
            'Guitar Harmonics' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.GuitarFeedback">
            <summary>
            'Guitar Feedback' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticBass">
            <summary>
            'Acoustic Bass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricBassFinger">
            <summary>
            'Electric Bass (finger)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.FingerSlapBass">
            <summary>
            'Finger Slap Bass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricBassPick">
            <summary>
            'Electric Bass (pick)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.FretlessBass">
            <summary>
            'Fretless Bass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SlapBass1">
            <summary>
            'Slap Bass1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SlapBass2">
            <summary>
            'Slap Bass2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBass1">
            <summary>
            'Synth Bass1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBassWarm">
            <summary>
            'Synth Bass (warm)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBass3Resonance">
            <summary>
            'Synth Bass3 (resonance)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ClaviBass">
            <summary>
            'Clavi Bass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Hammer">
            <summary>
            'Hammer' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBass2">
            <summary>
            'Synth Bass2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBass4Attack">
            <summary>
            'Synth Bass4 (attack)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBassRubber">
            <summary>
            'Synth Bass (rubber)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AttackPulse">
            <summary>
            'Attack Pulse' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Violin">
            <summary>
            'Violin' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ViolinSlowAttack">
            <summary>
            'Violin (slow attack)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Viola">
            <summary>
            'Viola' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Cello">
            <summary>
            'Cello' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Contrabass">
            <summary>
            'Contrabass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TremoloStrings">
            <summary>
            'Tremolo Strings' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PizzicatoStrings">
            <summary>
            'Pizzicato Strings' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.OrchestralHarp">
            <summary>
            'Orchestral Harp' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.YangChin">
            <summary>
            'Yang Chin' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Timpani">
            <summary>
            'Timpani' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.StringEnsembles1">
            <summary>
            'String Ensembles1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.StringsAndBrass">
            <summary>
            'Strings And Brass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SixtiesStrings">
            <summary>
            'Sixties Strings' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.StringEnsembles2">
            <summary>
            'String Ensembles2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthStrings1">
            <summary>
            'Synth Strings1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthStrings3">
            <summary>
            'Synth Strings3' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthStrings2">
            <summary>
            'Synth Strings2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ChoirAahs">
            <summary>
            'Choir Aahs' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ChoirAahs2">
            <summary>
            'Choir Aahs2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.VoiceOohs">
            <summary>
            'Voice Oohs' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Humming">
            <summary>
            'Humming' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthVoice">
            <summary>
            'Synth Voice' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AnalogVoice">
            <summary>
            'Analog Voice' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.OrchestraHit">
            <summary>
            'Orchestra Hit' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BassHitPlus">
            <summary>
            'Bass Hit Plus' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SixthHit">
            <summary>
            'Sixth Hit' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.EuroHit">
            <summary>
            'Euro Hit' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Trumpet">
            <summary>
            'Trumpet' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DarkTrumpetSoft">
            <summary>
            'Dark Trumpet Soft' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Trombone">
            <summary>
            'Trombone' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Trombone2">
            <summary>
            'Trombone2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BrightTrombone">
            <summary>
            'Bright Trombone' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Tuba">
            <summary>
            'Tuba' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MutedTrumpet">
            <summary>
            'Muted Trumpet' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MutedTrumpet2">
            <summary>
            'Muted Trumpet2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.FrenchHorn">
            <summary>
            'French Horn' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.FrenchHorn2Warm">
            <summary>
            'French Horn2 (warm)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BrassSection">
            <summary>
            'Brass Section' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BrassSection2OctaveMix">
            <summary>
            'Brass Section2 (octave mix)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBrass1">
            <summary>
            'Synth Brass1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBrass3">
            <summary>
            'Synth Brass3' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AnalogSynthBrass1">
            <summary>
            'Analog Synth Brass1' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.JumpBrass">
            <summary>
            'Jump Brass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBrass2">
            <summary>
            'Synth Brass2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthBrass4">
            <summary>
            'Synth Brass4' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AnalogSynthBrass2">
            <summary>
            'Analog Synth Brass2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SopranoSax">
            <summary>
            'Soprano Sax' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AltoSax">
            <summary>
            'Alto Sax' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TenorSax">
            <summary>
            'Tenor Sax' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BaritoneSax">
            <summary>
            'Baritone Sax' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Oboe">
            <summary>
            'Oboe' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.EnglishHorn">
            <summary>
            'English Horn' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Bassoon">
            <summary>
            'Bassoon' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Clarinet">
            <summary>
            'Clarinet' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Piccolo">
            <summary>
            'Piccolo' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Flute">
            <summary>
            'Flute' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Recorder">
            <summary>
            'Recorder' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.PanFlute">
            <summary>
            'Pan Flute' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BlownBottle">
            <summary>
            'Blown Bottle' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Shakuhachi">
            <summary>
            'Shakuhachi' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Whistle">
            <summary>
            'Whistle' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Ocarina">
            <summary>
            'Ocarina' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead1Square">
            <summary>
            'Lead1 (square)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead1ASquare2">
            <summary>
            'Lead1 A (square2)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead1BSine">
            <summary>
            'Lead1 B (sine)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead2Sawtooth">
            <summary>
            'Lead2 (sawtooth)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead2ASawtooth2">
            <summary>
            'Lead2 A (sawtooth2)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead2BSawPulse">
            <summary>
            'Lead2 B (saw pulse)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead2CDoubleSawtooth">
            <summary>
            'Lead2 C (double sawtooth)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead2DSequencedAnalog">
            <summary>
            'Lead2 D (sequenced analog)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead3Calliope">
            <summary>
            'Lead3 (calliope)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead4Chiff">
            <summary>
            'Lead4 (chiff)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead5Charang">
            <summary>
            'Lead5 (charang)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead5AWireLead">
            <summary>
            'Lead5 A (wire lead)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead6Voice">
            <summary>
            'Lead6 (voice)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead7Fifths">
            <summary>
            'Lead7 (fifths)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead8BassLead">
            <summary>
            'Lead8 (bass lead)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lead8ASoftWrl">
            <summary>
            'Lead8 A (soft wrl)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad1NewAge">
            <summary>
            'Pad1 (new age)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad2Warm">
            <summary>
            'Pad2 (warm)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad2ASinePad">
            <summary>
            'Pad2 A (sine pad)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad3Polysynth">
            <summary>
            'Pad3 (polysynth)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad4Choir">
            <summary>
            'Pad4 (choir)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad4AItopia">
            <summary>
            'Pad4 A (itopia)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad5Bowed">
            <summary>
            'Pad5 (bowed)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad6Metallic">
            <summary>
            'Pad6 (metallic)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad7Halo">
            <summary>
            'Pad7 (halo)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Pad8Sweep">
            <summary>
            'Pad8 (sweep)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx1Rain">
            <summary>
            'Fx1 (rain)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx2Soundtrack">
            <summary>
            'Fx2 (soundtrack)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx3Crystal">
            <summary>
            'Fx3 (crystal)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx3ASynthMallet">
            <summary>
            'Fx3 A (synth mallet)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx4Atmosphere">
            <summary>
            'Fx4 (atmosphere)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx5Brightness">
            <summary>
            'Fx5 (brightness)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx6Goblins">
            <summary>
            'Fx6 (goblins)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx7Echoes">
            <summary>
            'Fx7 (echoes)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx7AEchoBell">
            <summary>
            'Fx7 A (echo bell)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx7BEchoPan">
            <summary>
            'Fx7 B (echo pan)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fx8SciFi">
            <summary>
            'Fx8 (sci fi)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Sitar">
            <summary>
            'Sitar' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Sitar2Bend">
            <summary>
            'Sitar2 (bend)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Banjo">
            <summary>
            'Banjo' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Shamisen">
            <summary>
            'Shamisen' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Koto">
            <summary>
            'Koto' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TaishoKoto">
            <summary>
            'Taisho Koto' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Kalimba">
            <summary>
            'Kalimba' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BagPipe">
            <summary>
            'Bag Pipe' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Fiddle">
            <summary>
            'Fiddle' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Shanai">
            <summary>
            'Shanai' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TinkleBell">
            <summary>
            'Tinkle Bell' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Agogo">
            <summary>
            'Agogo' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SteelDrums">
            <summary>
            'Steel Drums' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Woodblock">
            <summary>
            'Woodblock' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Castanets">
            <summary>
            'Castanets' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TaikoDrum">
            <summary>
            'Taiko Drum' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ConcertBassDrum">
            <summary>
            'Concert Bass Drum' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MelodicTom">
            <summary>
            'Melodic Tom' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MelodicTom2Power">
            <summary>
            'Melodic Tom2 (power)' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.SynthDrum">
            <summary>
            'Synth Drum' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.RhythmBoxTom">
            <summary>
            'Rhythm Box Tom' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ElectricDrum">
            <summary>
            'Electric Drum' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.ReverseCymbal">
            <summary>
            'Reverse Cymbal' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.GuitarFretNoise">
            <summary>
            'Guitar Fret Noise' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.GuitarCuttingNoise">
            <summary>
            'Guitar Cutting Noise' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.AcousticBassStringSlap">
            <summary>
            'Acoustic Bass String Slap' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BreathNoise">
            <summary>
            'Breath Noise' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.FluteKeyClick">
            <summary>
            'Flute Key Click' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Seashore">
            <summary>
            'Seashore' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Rain">
            <summary>
            'Rain' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Thunder">
            <summary>
            'Thunder' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Wind">
            <summary>
            'Wind' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Stream">
            <summary>
            'Stream' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Bubble">
            <summary>
            'Bubble' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BirdTweet">
            <summary>
            'Bird Tweet' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Dog">
            <summary>
            'Dog' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HorseGallop">
            <summary>
            'Horse Gallop' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BirdTweet2">
            <summary>
            'Bird Tweet2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TelephoneRing">
            <summary>
            'Telephone Ring' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.TelephoneRing2">
            <summary>
            'Telephone Ring2' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.DoorCreaking">
            <summary>
            'Door Creaking' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Door">
            <summary>
            'Door' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Scratch">
            <summary>
            'Scratch' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.WindChime">
            <summary>
            'Wind Chime' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Helicopter">
            <summary>
            'Helicopter' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.CarEngine">
            <summary>
            'Car Engine' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.CarStop">
            <summary>
            'Car Stop' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.CarPass">
            <summary>
            'Car Pass' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.CarCrash">
            <summary>
            'Car Crash' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Siren">
            <summary>
            'Siren' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Train">
            <summary>
            'Train' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Jetplane">
            <summary>
            'Jetplane' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Starship">
            <summary>
            'Starship' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.BurstNoise">
            <summary>
            'Burst Noise' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Applause">
            <summary>
            'Applause' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Laughing">
            <summary>
            'Laughing' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Screaming">
            <summary>
            'Screaming' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Punch">
            <summary>
            'Punch' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.HeartBeat">
            <summary>
            'Heart Beat' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Footsteps">
            <summary>
            'Footsteps' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Gunshot">
            <summary>
            'Gunshot' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.MachineGun">
            <summary>
            'Machine Gun' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Lasergun">
            <summary>
            'Lasergun' General MIDI 2 program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi2Program.Explosion">
            <summary>
            'Explosion' General MIDI 2 program.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities">
            <summary>
            Provides utilities for General MIDI Level 2.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities.GetProgramEvents(Melanchall.DryWetMidi.Standards.GeneralMidi2Program,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Gets MIDI events sequence to switch to the specified General MIDI Level 2 program.
            </summary>
            <param name="program"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidi2Program"/> to get events for.</param>
            <param name="channel">Channel events should be created for.</param>
            <returns>MIDI events sequence to switch to the <paramref name="program"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="program"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidi">
            <summary>
            The class which provides information about the General MIDI Level 1 standard.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidi.PercussionChannel">
            <summary>
            Channel reserved for percussion according to the General MIDI Level 1 standard.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion">
            <summary>
            General MIDI Level 1 percussion notes.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.AcousticBassDrum">
            <summary>
            'Acoustic Bass Drum' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.BassDrum1">
            <summary>
            'Bass Drum 1' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.SideStick">
            <summary>
            'Side Stick' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.AcousticSnare">
            <summary>
            'Acoustic Snare' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HandClap">
            <summary>
            'Hand Clap' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.ElectricSnare">
            <summary>
            'Electric Snare' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowFloorTom">
            <summary>
            'Low Floor Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.ClosedHiHat">
            <summary>
            'Closed Hi-Hat' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HighFloorTom">
            <summary>
            'High Floor Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.PedalHiHat">
            <summary>
            'Pedal Hi-Hat' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowTom">
            <summary>
            'Low Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.OpenHiHat">
            <summary>
            'Open Hi-Hat' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowMidTom">
            <summary>
            'Low-Mid Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HiMidTom">
            <summary>
            'Hi-Mid Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.CrashCymbal1">
            <summary>
            'Crash Cymbal 1' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HighTom">
            <summary>
            'High Tom' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.RideCymbal1">
            <summary>
            'Ride Cymbal 1' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.ChineseCymbal">
            <summary>
            'Chinese Cymbal' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.RideBell">
            <summary>
            'Ride Bell' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Tambourine">
            <summary>
            'Tambourine' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.SplashCymbal">
            <summary>
            'Splash Cymbal' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Cowbell">
            <summary>
            'Cowbell' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.CrashCymbal2">
            <summary>
            'Crash Cymbal 2' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Vibraslap">
            <summary>
            'Vibraslap' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.RideCymbal2">
            <summary>
            'Ride Cymbal 2' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HiBongo">
            <summary>
            'Hi Bongo' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowBongo">
            <summary>
            'Low Bongo' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.MuteHiConga">
            <summary>
            'Mute Hi Conga' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.OpenHiConga">
            <summary>
            'Open Hi Conga' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowConga">
            <summary>
            'Low Conga' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HighTimbale">
            <summary>
            'High Timbale' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowTimbale">
            <summary>
            'Low Timbale' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HighAgogo">
            <summary>
            'High Agogo' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowAgogo">
            <summary>
            'Low Agogo' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Cabasa">
            <summary>
            'Cabasa' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Maracas">
            <summary>
            'Maracas' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.ShortWhistle">
            <summary>
            'Short Whistle' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LongWhistle">
            <summary>
            'Long Whistle' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.ShortGuiro">
            <summary>
            'Short Guiro' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LongGuiro">
            <summary>
            'Long Guiro' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.Claves">
            <summary>
            'Claves' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.HiWoodBlock">
            <summary>
            'Hi Wood Block' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.LowWoodBlock">
            <summary>
            'Low Wood Block' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.MuteCuica">
            <summary>
            'Mute Cuica' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.OpenCuica">
            <summary>
            'Open Cuica' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.MuteTriangle">
            <summary>
            'Mute Triangle' General MIDI percussion note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.OpenTriangle">
            <summary>
            'Open Triangle' General MIDI percussion note.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidiProgram">
            <summary>
            General MIDI Level 1 program (patch).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.AcousticGrandPiano">
            <summary>
            'Acoustic Grand Piano' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BrightAcousticPiano">
            <summary>
            'Bright Acoustic Piano' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricGrandPiano">
            <summary>
            'Electric Grand Piano' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.HonkyTonkPiano">
            <summary>
            'Honky-tonk Piano' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricPiano1">
            <summary>
            'Electric Piano 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricPiano2">
            <summary>
            'Electric Piano 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Harpsichord">
            <summary>
            'Harpsichord' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Clavi">
            <summary>
            'Clavi' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Celesta">
            <summary>
            'Celesta' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Glockenspiel">
            <summary>
            'Glockenspiel' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.MusicBox">
            <summary>
            'Music Box' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Vibraphone">
            <summary>
            'Vibraphone' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Marimba">
            <summary>
            'Marimba' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Xylophone">
            <summary>
            'Xylophone' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TubularBells">
            <summary>
            'Tubular Bells' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Dulcimer">
            <summary>
            'Dulcimer' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.DrawbarOrgan">
            <summary>
            'Drawbar Organ' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.PercussiveOrgan">
            <summary>
            'Percussive Organ' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.RockOrgan">
            <summary>
            'Rock Organ' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ChurchOrgan">
            <summary>
            'Church Organ' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ReedOrgan">
            <summary>
            'Reed Organ' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Accordion">
            <summary>
            'Accordion' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Harmonica">
            <summary>
            'Harmonica' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TangoAccordion">
            <summary>
            'Tango Accordion' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.AcousticGuitar1">
            <summary>
            'Acoustic Guitar (nylon)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.AcousticGuitar2">
            <summary>
            'Acoustic Guitar (steel)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricGuitar1">
            <summary>
            'Electric Guitar (jazz)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricGuitar2">
            <summary>
            'Electric Guitar (clean)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricGuitar3">
            <summary>
            'Electric Guitar (muted)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.OverdrivenGuitar">
            <summary>
            'Overdriven Guitar' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.DistortionGuitar">
            <summary>
            'Distortion Guitar' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.GuitarHarmonics">
            <summary>
            'Guitar harmonics' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.AcousticBass">
            <summary>
            'Acoustic Bass' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricBass1">
            <summary>
            'Electric Bass (finger)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ElectricBass2">
            <summary>
            'Electric Bass (pick)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.FretlessBass">
            <summary>
            'Fretless Bass' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SlapBass1">
            <summary>
            'Slap Bass 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SlapBass2">
            <summary>
            'Slap Bass 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthBass1">
            <summary>
            'Synth Bass 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthBass2">
            <summary>
            'Synth Bass 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Violin">
            <summary>
            'Violin' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Viola">
            <summary>
            'Viola' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Cello">
            <summary>
            'Cello' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Contrabass">
            <summary>
            'Contrabass' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TremoloStrings">
            <summary>
            'Tremolo Strings' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.PizzicatoStrings">
            <summary>
            'Pizzicato Strings' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.OrchestralHarp">
            <summary>
            'Orchestral Harp' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Timpani">
            <summary>
            'Timpani' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.StringEnsemble1">
            <summary>
            'String Ensemble 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.StringEnsemble2">
            <summary>
            'String Ensemble 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthStrings1">
            <summary>
            'SynthStrings 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthStrings2">
            <summary>
            'SynthStrings 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ChoirAahs">
            <summary>
            'Choir Aahs' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.VoiceOohs">
            <summary>
            'Voice Oohs' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthVoice">
            <summary>
            'Synth Voice' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.OrchestraHit">
            <summary>
            'Orchestra Hit' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Trumpet">
            <summary>
            'Trumpet' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Trombone">
            <summary>
            'Trombone' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Tuba">
            <summary>
            'Tuba' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.MutedTrumpet">
            <summary>
            'Muted Trumpet' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.FrenchHorn">
            <summary>
            'French Horn' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BrassSection">
            <summary>
            'Brass Section' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthBrass1">
            <summary>
            'SynthBrass 1' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthBrass2">
            <summary>
            'SynthBrass 2' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SopranoSax">
            <summary>
            'Soprano Sax' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.AltoSax">
            <summary>
            'Alto Sax' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TenorSax">
            <summary>
            'Tenor Sax' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BaritoneSax">
            <summary>
            'Baritone Sax' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Oboe">
            <summary>
            'Oboe' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.EnglishHorn">
            <summary>
            'English Horn' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Bassoon">
            <summary>
            'Bassoon' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Clarinet">
            <summary>
            'Clarinet' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Piccolo">
            <summary>
            'Piccolo' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Flute">
            <summary>
            'Flute' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Recorder">
            <summary>
            'Recorder' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.PanFlute">
            <summary>
            'Pan Flute' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BlownBottle">
            <summary>
            'Blown Bottle' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Shakuhachi">
            <summary>
            'Shakuhachi' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Whistle">
            <summary>
            'Whistle' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Ocarina">
            <summary>
            'Ocarina' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead1">
            <summary>
            'Lead 1 (square)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead2">
            <summary>
            'Lead 2 (sawtooth)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead3">
            <summary>
            'Lead 3 (calliope)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead4">
            <summary>
            'Lead 4 (chiff)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead5">
            <summary>
            'Lead 5 (charang)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead6">
            <summary>
            'Lead 6 (voice)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead7">
            <summary>
            'Lead 7 (fifths)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Lead8">
            <summary>
            'Lead 8 (bass + lead)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad1">
            <summary>
            'Pad 1 (new age)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad2">
            <summary>
            'Pad 2 (warm)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad3">
            <summary>
            'Pad 3 (polysynth)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad4">
            <summary>
            'Pad 4 (choir)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad5">
            <summary>
            'Pad 5 (bowed)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad6">
            <summary>
            'Pad 6 (metallic)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad7">
            <summary>
            'Pad 7 (halo)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Pad8">
            <summary>
            'Pad 8 (sweep)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx1">
            <summary>
            'FX 1 (rain)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx2">
            <summary>
            'FX 2 (soundtrack)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx3">
            <summary>
            'FX 3 (crystal)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx4">
            <summary>
            'FX 4 (atmosphere)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx5">
            <summary>
            'FX 5 (brightness)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx6">
            <summary>
            'FX 6 (goblins)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx7">
            <summary>
            'FX 7 (echoes)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fx8">
            <summary>
            'FX 8 (sci-fi)' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Sitar">
            <summary>
            'Sitar' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Banjo">
            <summary>
            'Banjo' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Shamisen">
            <summary>
            'Shamisen' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Koto">
            <summary>
            'Koto' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Kalimba">
            <summary>
            'Kalimba' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BagPipe">
            <summary>
            'Bag pipe' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Fiddle">
            <summary>
            'Fiddle' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Shanai">
            <summary>
            'Shanai' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TinkleBell">
            <summary>
            'Tinkle Bell' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Agogo">
            <summary>
            'Agogo' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SteelDrums">
            <summary>
            'Steel Drums' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Woodblock">
            <summary>
            'Woodblock' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TaikoDrum">
            <summary>
            'Taiko Drum' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.MelodicTom">
            <summary>
            'Melodic Tom' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.SynthDrum">
            <summary>
            'Synth Drum' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.ReverseCymbal">
            <summary>
            'Reverse Cymbal' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.GuitarFretNoise">
            <summary>
            'Guitar Fret Noise' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BreathNoise">
            <summary>
            'Breath Noise' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Seashore">
            <summary>
            'Seashore' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.BirdTweet">
            <summary>
            'Bird Tweet' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.TelephoneRing">
            <summary>
            'Telephone Ring' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Helicopter">
            <summary>
            'Helicopter' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Applause">
            <summary>
            'Applause' General MIDI program.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Standards.GeneralMidiProgram.Gunshot">
            <summary>
            'Gunshot' General MIDI program.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities">
            <summary>
            Provides utilities for General MIDI Level 1.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.AsSevenBitNumber(Melanchall.DryWetMidi.Standards.GeneralMidiProgram)">
            <summary>
            Converts <see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiProgram"/> to the corresponding value of the
            <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> type.
            </summary>
            <param name="program"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiProgram"/> to convert to <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing the <paramref name="program"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="program"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.AsSevenBitNumber(Melanchall.DryWetMidi.Standards.GeneralMidiPercussion)">
            <summary>
            Converts <see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion"/> to the corresponding value of the
            <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> type.
            </summary>
            <param name="percussion"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion"/> to convert to <see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/>.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Common.SevenBitNumber"/> representing the <paramref name="percussion"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="percussion"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.GetProgramEvent(Melanchall.DryWetMidi.Standards.GeneralMidiProgram,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Gets an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramChangeEvent"/> corresponding to the specified
            General MIDI Level 1 program.
            </summary>
            <param name="program"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiProgram"/> to get an event for.</param>
            <param name="channel">Channel an event should be created for.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.ProgramChangeEvent"/> corresponding to the <paramref name="program"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="program"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.GetNoteOnEvent(Melanchall.DryWetMidi.Standards.GeneralMidiPercussion,Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Gets an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> corresponding to the specified
            General MIDI Level 1 percussion.
            </summary>
            <param name="percussion"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion"/> to get an event for.</param>
            <param name="velocity">Velocity of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/>.</param>
            <param name="channel">Channel an event should be created for.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOnEvent"/> corresponding to the specified
            <paramref name="percussion"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="percussion"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.GetNoteOffEvent(Melanchall.DryWetMidi.Standards.GeneralMidiPercussion,Melanchall.DryWetMidi.Common.SevenBitNumber,Melanchall.DryWetMidi.Common.FourBitNumber)">
            <summary>
            Gets an instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> corresponding to the specified
            General MIDI Level 1 percussion.
            </summary>
            <param name="percussion"><see cref="T:Melanchall.DryWetMidi.Standards.GeneralMidiPercussion"/> to get an event for.</param>
            <param name="velocity">Velocity of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/>.</param>
            <param name="channel">Channel an event should be created for.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.NoteOffEvent"/> corresponding to the specified
            <paramref name="percussion"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="percussion"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectTarget">
            <summary>
            Target of an object that should be processed by a tool.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.LengthedObjectTarget.Start">
            <summary>
            Start time of a lengthed object.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.LengthedObjectTarget.End">
            <summary>
            End time of a lengthed object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction">
            <summary>
            Holds the new time that will be set to an object is being processed and action
            indicating whether quantizing should be cancelled or not.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.Skip">
            <summary>
            Indicates that object should be skipped and new time shouldn't be set.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction"/> with the
            specified time. This time will be set to an object is being processed.
            </summary>
            <param name="time">The new time of an object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> is negative.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.Action">
            <summary>
            Gets an action indicating whether processing should be cancelled or not.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.Time">
            <summary>
            Gets the new time of an object.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimeProcessingAction">
            <summary>
            Indicates whether an object is being processed should be skipped or not.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.TimeProcessingAction.Apply"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.TimeProcessingAction.Apply">
            <summary>
            Set new time to an object.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.TimeProcessingAction.Skip">
            <summary>
            Skip an object and leave its time untouched.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout">
            <summary>
            Layout (format) of CSV data representing a MIDI file. The default value is <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.DryWetMidi"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.DryWetMidi">
            <summary>
            Format used by DryWetMIDI which gives more compact and human readable CSV
            representation.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.MidiCsv">
            <summary>
            Format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings">
            <summary>
            Settings according to which instances of the <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> must be read from or written to
            CSV representation.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.CsvDelimiter">
            <summary>
            Gets or sets delimiter used to separate values in CSV representation. The default value is comma.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.TimeType">
            <summary>
            Gets or sets format of timestamps inside CSV representation. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.NoteLengthType">
            <summary>
            Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to
            write to or read from CSV. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.NoteNumberFormat">
            <summary>
            Gets or sets the format which should be used to write a note's number to or read it from CSV.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.NoteNumberFormat.NoteNumber"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NoteFormat">
            <summary>
            The format which should be used to write notes to or read them from CSV.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.NoteFormat.Note">
            <summary>
            Notes are presented in CSV as note objects.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.NoteFormat.Events">
            <summary>
            Notes are presented in CSV as Note On/Note Off events.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NoteNumberFormat">
            <summary>
            Defines how a note's number is presented in CSV representation: either a number or
            a letter (for example, A#5).
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.NoteNumberFormat.NoteNumber">
            <summary>
            A note's number is presented as just a number.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.NoteNumberFormat.Letter">
            <summary>
            A note's number is presented as a letter.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsSplitter">
            <summary>
            Provides methods for splitting chords.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitter.CloneObject(Melanchall.DryWetMidi.Smf.Interaction.Chord)">
            <summary>
            Clones an object by creating a copy of it.
            </summary>
            <param name="obj">Object to clone.</param>
            <returns>Copy of the <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitter.SplitObject(Melanchall.DryWetMidi.Smf.Interaction.Chord,System.Int64)">
            <summary>
            Splits an object by the specified time.
            </summary>
            <param name="obj">Object to split.</param>
            <param name="time">Time to split <paramref name="obj"/> by.</param>
            <returns>An object containing left and right parts of the splitted object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities">
            <summary>
            Provides methods for splitting chords.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByStep(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified step so
            every chord will be splitted at points equally distanced from each other starting from
            the chord's start time.
            </summary>
            <remarks>
            Chords with zero length and chords with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="step">Step to split chords by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="step"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByStep(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified step so every chord will be splitted at points equally distanced from each
            other starting from the chord's start time.
            </summary>
            <remarks>
            Chords with zero length and chords with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="step">Step to split chords by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="step"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByStep(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified
            step so every chord will be splitted at points equally distanced from each other
            starting from the chord's start time.
            </summary>
            <remarks>
            Chords with zero length and chords with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split chords in.</param>
            <param name="step">Step to split chords by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="step"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByPartsNumber(Melanchall.DryWetMidi.Smf.TrackChunk,System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> into the specified number
            of parts of the equal length.
            </summary>
            <remarks>
            If a chord has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="partsNumber">The number of parts to split chords into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByPartsNumber(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> into the
            specified number of parts of the equal length.
            </summary>
            <remarks>
            If a chord has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="partsNumber">The number of parts to split chords into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByPartsNumber(Melanchall.DryWetMidi.Smf.MidiFile,System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> into the specified number of
            parts of the equal length.
            </summary>
            <remarks>
            If a chord has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split chords in.</param>
            <param name="partsNumber">The number of parts to split chords into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByGrid(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified grid.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="grid">Grid to split chords by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByGrid(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified grid.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="grid">Grid to split chords by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsByGrid(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified grid.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split chords in.</param>
            <param name="grid">Grid to split chords by.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="grid"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> at the specified distance
            from a chord's start or end.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="distance">Distance to split chords at.</param>
            <param name="from">Point of a chord <paramref name="distance"/> should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> at the specified
            distance from a chord's start or end.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="distance">Distance to split chords at.</param>
            <param name="from">Point of a chord <paramref name="distance"/> should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> at the specified distance
            from a chord's start or end.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split chords in.</param>
            <param name="distance">Distance to split chords at.</param>
            <param name="from">Point of a chord <paramref name="distance"/> should be measured from.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="distance"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(Melanchall.DryWetMidi.Smf.TrackChunk,System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified ratio of a
            chord's length measuring it from the chord's start or end. For example, 0.5 means splitting
            at the center of a chord.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="ratio">Ratio of a chord's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a chord's length should be processed according to.</param>
            <param name="from">Point of a chord distance should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64)">
            <summary>
            Splits chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified ratio of a chord's length measuring it from the chord's start or end.
            For example, 0.5 means splitting at the center of a chord.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split chords in.</param>
            <param name="ratio">Ratio of a chord's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a chord's length should be processed according to.</param>
            <param name="from">Point of a chord distance should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.SplitChordsAtDistance(Melanchall.DryWetMidi.Smf.MidiFile,System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,System.Int64)">
            <summary>
            Splits chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified ratio of a
            chord's length measuring it from the chord's start or end. For example, 0.5 means splitting
            at the center of a chord.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split chords in.</param>
            <param name="ratio">Ratio of a chord's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a chord's length should be processed according to.</param>
            <param name="from">Point of a chord distance should be measured from.</param>
            <param name="notesTolerance">Notes tolerance that defines maximum distance of notes from the
            start of the first note of a chord. Notes within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range. -or-
            <paramref name="notesTolerance"/> is negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1">
            <summary>
            Provides methods for splitting lengthed objects.
            </summary>
            <typeparam name="TObject">The type of objects to split.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitByStep(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits objects by the specified step so every object will be splitted at points
            equally distanced from each other starting from the object's start time.
            </summary>
            <remarks>
            Nulls, objects with zero length and objects with length smaller than <paramref name="step"/>
            will not be splitted and will be returned as clones of the input objects.
            </remarks>
            <param name="objects">Objects to split.</param>
            <param name="step">Step to split objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <returns>Objects that are result of splitting <paramref name="objects"/> going in the same
            order as elements of <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="step"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitByPartsNumber(System.Collections.Generic.IEnumerable{`0},System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits objects into the specified number of parts of the equal length.
            </summary>
            <remarks>
            Nulls will not be splitted and will be returned as nulls. If an object has zero length,
            it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="objects">Objects to split.</param>
            <param name="partsNumber">The number of parts to split objects into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <returns>Objects that are result of splitting <paramref name="objects"/> going in the same
            order as elements of <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitByGrid(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits objects by the specified grid.
            </summary>
            <remarks>
            Nulls will not be splitted and will be returned as nulls.
            </remarks>
            <param name="objects">Objects to split.</param>
            <param name="grid">Grid to split objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <returns>Objects that are result of splitting <paramref name="objects"/> going in the same
            order as elements of <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitAtDistance(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits objects at the specified distance from an object's start or end.
            </summary>
            <param name="objects">Objects to split.</param>
            <param name="distance">Distance to split objects at.</param>
            <param name="from">Point of an object <paramref name="distance"/> should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <returns>Objects that are result of splitting <paramref name="objects"/> going in the same
            order as elements of <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitAtDistance(System.Collections.Generic.IEnumerable{`0},System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits objects by the specified ratio of an object's length measuring it from
            the object's start or end. For example, 0.5 means splitting at the center of an object.
            </summary>
            <param name="objects">Objects to split.</param>
            <param name="ratio">Ratio of an object's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type an object's length should be processed according to.</param>
            <param name="from">Point of an object distance should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <returns>Objects that are result of splitting <paramref name="objects"/> going in the same
            order as elements of <paramref name="objects"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.CloneObject(`0)">
            <summary>
            Clones an object by creating a copy of it.
            </summary>
            <param name="obj">Object to clone.</param>
            <returns>Copy of the <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter`1.SplitObject(`0,System.Int64)">
            <summary>
            Splits an object by the specified time.
            </summary>
            <param name="obj">Object to split.</param>
            <param name="time">Time to split <paramref name="obj"/> by.</param>
            <returns>An object containing left and right parts of the splitted object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities">
            <summary>
            Provides methods for splitting notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByStep(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified step so
            every note will be splitted at points equally distanced from each other starting from
            the note's start time.
            </summary>
            <remarks>
            Notes with zero length and notes with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="step">Step to split notes by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="step"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByStep(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified step so every note will be splitted at points equally distanced from each
            other starting from the note's start time.
            </summary>
            <remarks>
            Notes with zero length and notes with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="step">Step to split notes by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="step"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByStep(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified
            step so every note will be splitted at points equally distanced from each other
            starting from the note's start time.
            </summary>
            <remarks>
            Notes with zero length and notes with length smaller than <paramref name="step"/>
            will not be splitted.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split notes in.</param>
            <param name="step">Step to split notes by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="step"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByPartsNumber(Melanchall.DryWetMidi.Smf.TrackChunk,System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> into the specified number
            of parts of the equal length.
            </summary>
            <remarks>
            If a note has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="partsNumber">The number of parts to split notes into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByPartsNumber(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> into the
            specified number of parts of the equal length.
            </summary>
            <remarks>
            If a note has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="partsNumber">The number of parts to split notes into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByPartsNumber(Melanchall.DryWetMidi.Smf.MidiFile,System.Int32,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> into the specified number of
            parts of the equal length.
            </summary>
            <remarks>
            If a note has zero length, it will be splitted into the specified number of parts of zero length.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split notes in.</param>
            <param name="partsNumber">The number of parts to split notes into.</param>
            <param name="lengthType">Type of a part's length.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="partsNumber"/> is zero or negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByGrid(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified grid.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="grid">Grid to split notes by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByGrid(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified grid.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="grid">Grid to split notes by.</param>
            <param name="tempoMap">Tempo map used to calculate times to split by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesByGrid(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified grid.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split notes in.</param>
            <param name="grid">Grid to split notes by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="grid"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> at the specified distance
            from a note's start or end.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="distance">Distance to split notes at.</param>
            <param name="from">Point of a note <paramref name="distance"/> should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> at the specified
            distance from a note's start or end.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="distance">Distance to split notes at.</param>
            <param name="from">Point of a note <paramref name="distance"/> should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="distance"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.LengthedObjectTarget)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> at the specified distance
            from a note's start or end.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split notes in.</param>
            <param name="distance">Distance to split notes at.</param>
            <param name="from">Point of a note <paramref name="distance"/> should be measured from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="distance"/> is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(Melanchall.DryWetMidi.Smf.TrackChunk,System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the specified ratio of a
            note's length measuring it from the note's start or end. For example, 0.5 means splitting
            at the center of a note.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="ratio">Ratio of a note's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a note's length should be processed according to.</param>
            <param name="from">Point of a note distance should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Splits notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> by the
            specified ratio of a note's length measuring it from the note's start or end.
            For example, 0.5 means splitting at the center of a note.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to split notes in.</param>
            <param name="ratio">Ratio of a note's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a note's length should be processed according to.</param>
            <param name="from">Point of a note distance should be measured from.</param>
            <param name="tempoMap">Tempo map used for distances calculations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.SplitNotesAtDistance(Melanchall.DryWetMidi.Smf.MidiFile,System.Double,Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType,Melanchall.DryWetMidi.Tools.LengthedObjectTarget)">
            <summary>
            Splits notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified ratio of a
            note's length measuring it from the note's start or end. For example, 0.5 means splitting
            at the center of a note.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split notes in.</param>
            <param name="ratio">Ratio of a note's length to split by. Valid values are from 0 to 1.</param>
            <param name="lengthType">The type a note's length should be processed according to.</param>
            <param name="from">Point of a note distance should be measured from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ratio"/> is out of valid range.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="lengthType"/> specified an invalid value. -or-
            <paramref name="from"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesSplitter">
            <summary>
            Provides methods for splitting notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitter.CloneObject(Melanchall.DryWetMidi.Smf.Interaction.Note)">
            <summary>
            Clones an object by creating a copy of it.
            </summary>
            <param name="obj">Object to clone.</param>
            <returns>Copy of the <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesSplitter.SplitObject(Melanchall.DryWetMidi.Smf.Interaction.Note,System.Int64)">
            <summary>
            Splits an object by the specified time.
            </summary>
            <param name="obj">Object to split.</param>
            <param name="time">Time to split <paramref name="obj"/> by.</param>
            <returns>An object containing left and right parts of the splitted object.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings">
            <summary>
            Settings according to which <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> must be read from or written to
            CSV representation.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.CsvLayout">
            <summary>
            Gets or sets layout of CSV representation of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>. The default value is
            <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.DryWetMidi"/>.
            </summary>
            <remarks>
            At now there are two layouts: <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.DryWetMidi"/> and
            <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.MidiCsv"/> which produces slightly different CSV representations.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.DryWetMidi"/> that gives more compact and more
            human readable CSV data.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.TimeType">
            <summary>
            Gets or sets format of timestamps inside CSV representation. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>
            </summary>
            <remarks>
            Note that it is recommended to use <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/> if you use
            <see cref="F:Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.MidiCsv"/> CSV layout to ensure produced CSV data can be read
            by other readers that supports format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.CsvDelimiter">
            <summary>
            Gets or sets delimiter used to separate values in CSV representation. The default value is comma.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.NoteLengthType">
            <summary>
            Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to
            write to or read from CSV. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.NoteFormat">
            <summary>
            Gets or sets the format which should be used to write notes to or read them from CSV.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.NoteFormat.Events"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.NoteNumberFormat">
            <summary>
            Gets or sets the format which should be used to write a note's number to or read it from CSV.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.NoteNumberFormat.NoteNumber"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.CsvConverter">
            <summary>
            Provides methods to convert MIDI objects to CSV representation and vice versa.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertMidiFileToCsv(Melanchall.DryWetMidi.Smf.MidiFile,System.String,System.Boolean,Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings)">
            <summary>
            Converts the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to CSV represenattion and writes it to a file.
            </summary>
            <remarks>
            Note that <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> can be converted to different CSV representations. You can specify desired
            CSV layout via <paramref name="settings"/> using <see cref="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.CsvLayout"/> property.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to convert to CSV.</param>
            <param name="filePath">Path of the output CSV file.</param>
            <param name="overwriteFile">If true and file specified by <paramref name="filePath"/> already
            exists it will be overwritten; if false and the file exists, exception will be thrown.</param>
            <param name="settings">Settings according to which <paramref name="midiFile"/> must be converted.
            Pass null to use default settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or-
            <paramref name="filePath"/> specified a directory.-or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertMidiFileToCsv(Melanchall.DryWetMidi.Smf.MidiFile,System.IO.Stream,Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings)">
            <summary>
            Converts the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to CSV represenattion and writes it to a stream.
            </summary>
            <remarks>
            Note that <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> can be converted to different CSV representations. You can specify desired
            CSV layout via <paramref name="settings"/> using <see cref="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.CsvLayout"/> property.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to convert to CSV.</param>
            <param name="stream">Stream to write CSV representation to.</param>
            <param name="settings">Settings according to which <paramref name="midiFile"/> must be converted.
            Pass null to use default settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support writing.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing to the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertCsvToMidiFile(System.String,Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings)">
            <summary>
            Converts CSV representation of a MIDI file to <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> reading CSV data from a file.
            </summary>
            <remarks>
            Note that CSV representation of a MIDI file can be different. You can specify expected CSV layout
            via <paramref name="settings"/> using <see cref="P:Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.CsvLayout"/> property.
            </remarks>
            <param name="filePath">Path of the file with CSV representation of a MIDI file.</param>
            <param name="settings">Settings according to which CSV data must be converted. Pass null to
            use default settings.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> representing a MIDI file written in CSV format.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform. -or-
            <paramref name="filePath"/> specified a directory. -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertCsvToMidiFile(System.IO.Stream,Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings)">
            <summary>
            Converts CSV representation of a MIDI file to <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> reading CSV data from a stream.
            </summary>
            <param name="stream">Stream to read MIDI file from.</param>
            <param name="settings">Settings according to which CSV data must be converted. Pass null to
            use default settings.</param>
            <returns>An instance of the <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> representing a MIDI file written in CSV format.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading from the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertNotesToCsv(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.String,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Boolean,Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings)">
            <summary>
            Converts the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to CSV represenattion and writes it to a file.
            </summary>
            <param name="notes">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to convert to CSV.</param>
            <param name="filePath">Path of the output CSV file.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="notes"/> to CSV.</param>
            <param name="overwriteFile">If true and file specified by <paramref name="filePath"/> already
            exists it will be overwritten; if false and the file exists, exception will be thrown.</param>
            <param name="settings">Settings according to which <paramref name="notes"/> must be converted.
            Pass null to use default settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or-
            <paramref name="filePath"/> specified a directory.-or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertNotesToCsv(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},System.IO.Stream,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings)">
            <summary>
            Converts the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to CSV represenattion and writes it to a stream.
            </summary>
            <param name="notes">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> to convert to CSV.</param>
            <param name="stream">Stream to write CSV representation to.</param>
            <param name="tempoMap">Tempo map used to convert <paramref name="notes"/> to CSV.</param>
            <param name="settings">Settings according to which <paramref name="notes"/> must be converted.
            Pass null to use default settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null. -or-
            <paramref name="stream"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support writing.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while writing to the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertCsvToNotes(System.String,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings)">
            <summary>
            Converts CSV representation of notes to collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> reading CSV data from a file.
            </summary>
            <param name="filePath">Path of the file with CSV representation of notes.</param>
            <param name="tempoMap">Tempo map used to convert notes from CSV.</param>
            <param name="settings">Settings according to which CSV data must be converted. Pass null to
            use default settings.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> representing notes written in CSV format.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is a zero-length string,
            contains only white space, or contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform. -or-
            <paramref name="filePath"/> specified a directory. -or- The caller does not have the required permission.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.CsvConverter.ConvertCsvToNotes(System.IO.Stream,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings)">
            <summary>
            Converts CSV representation of notes to collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> reading CSV data from a stream.
            </summary>
            <param name="stream">Stream to read notes from.</param>
            <param name="tempoMap">Tempo map used to convert notes from CSV.</param>
            <param name="settings">Settings according to which CSV data must be converted. Pass null to
            use default settings.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.Interaction.Note"/> representing notes written in CSV format.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> doesn't support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while reading from the stream.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="stream"/> is disposed.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.MidiFileSplitter">
            <summary>
            Provides methods to split a MIDI file.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.SplitByChannel(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Splits <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by channel.
            </summary>
            <remarks>
            Channel events will be separated by channel and copied to corresponding new files. All
            meta and system exclusive events will be copied to all the new files. Non-track chunks
            will not be copied to any of the new files.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> where each file contains events for single channel.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.SplitByNotes(Melanchall.DryWetMidi.Smf.MidiFile)">
            <summary>
            Splits <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by notes.
            </summary>
            <remarks>
            Note events will be separated by note number and copied to corresponding new files. All other
            channel events, meta and system exclusive events will be copied to all the new files. Non-track
            chunks will not be copied to any of the new files.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> where each file contains events for single note number.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.SplitByGrid(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Tools.SliceMidiFileSettings)">
            <summary>
            Splits <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> by the specified grid.
            </summary>
            <remarks>
            Non-track chunks will not be copied to any of the new files.
            </remarks>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to split.</param>
            <param name="grid">Grid to split <paramref name="midiFile"/> by.</param>
            <param name="settings">Settings according to which file should be splitted.</param>
            <returns>Collection of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> produced during splitting the input file by grid.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="grid"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.SkipPart(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.SliceMidiFileSettings)">
            <summary>
            Skips part of the specified length of MIDI file and returns remaining part as
            an instance of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to skip part of.</param>
            <param name="partLength">The length of part to skip.</param>
            <param name="settings">Settings according to which <paramref name="midiFile"/>
            should be splitted.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> which is result of skipping a part of the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="partLength"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.TakePart(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.SliceMidiFileSettings)">
            <summary>
            Takes part of the specified length of a MIDI file (starting at the beginning of the file)
            and returns it as an instance of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to take part of.</param>
            <param name="partLength">The length of part to take.</param>
            <param name="settings">Settings according to which <paramref name="midiFile"/>
            should be splitted.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> which is part of the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="partLength"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.MidiFileSplitter.TakePart(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Tools.SliceMidiFileSettings)">
            <summary>
            Takes part of the specified length of a MIDI file (starting at the specified time within the file)
            and returns it as an instance of <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to take part of.</param>
            <param name="partStart">The start time of part to take.</param>
            <param name="partLength">The length of part to take.</param>
            <param name="settings">Settings according to which <paramref name="midiFile"/>
            should be splitted.</param>
            <returns><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> which is part of the <paramref name="midiFile"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="partStart"/> is null. -or- <paramref name="partLength"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.SliceMidiFileSettings">
            <summary>
            Settings according to which a <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> should be splitted.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.SplitNotes">
            <summary>
            Gets or sets a value indicating whether notes should be splitted in points of
            grid intersection or not. The default value is true.
            </summary>
            <remarks>
            False means notes treated as just Note On / Note Off events rather than note objects
            for true. Splitting notes produces new Note On / Note Off events at points of grid
            intersecting notes.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.PreserveTimes">
            <summary>
            Gets or sets a value indicating whether original times of events should be saved or not.
            The default value is false.
            </summary>
            <remarks>
            If false used, events will be moved to the start of a new file. If true used, events
            will be placed in new files at the same times as in the input file.
            </remarks>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.PreserveTrackChunks">
            <summary>
            Gets or sets a value indicating whether track chunks in new files should correspond
            to those in the input file or not, so empty track chunks can be presented in new files.
            The default value is false.
            </summary>
            <remarks>
            If false used, track chunks without events will be removed from the result.
            </remarks>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesMerger">
            <summary>
            Provides methods to merge nearby notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesMerger.Merge(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.Note},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesMergingSettings)">
            <summary>
            Merges nearby notes in the specified collection of notes.
            </summary>
            <param name="notes">Collection of notes to merge notes in.</param>
            <param name="tempoMap">Tempo map used to calculate distances between notes.</param>
            <param name="settings">Settings according to which notes should be merged.</param>
            <returns>Collection of notes which produced from the input one by merging nearby notes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="notes"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesMergerUtilities">
            <summary>
            Provides methods to merge nearby notes.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesMergerUtilities.MergeNotes(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesMergingSettings,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Merges nearby notes in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to merge nearby notes in.</param>
            <param name="tempoMap">Tempo map used to calculate distances between notes.</param>
            <param name="settings">Settings according to which notes should be merged.</param>
            <param name="filter">Filter for notes to merge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesMergerUtilities.MergeNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesMergingSettings,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Merges nearby notes in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to merge nearby notes in.</param>
            <param name="tempoMap">Tempo map used to calculate distances between notes.</param>
            <param name="settings">Settings according to which notes should be merged.</param>
            <param name="filter">Filter for notes to merge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesMergerUtilities.MergeNotes(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Tools.NotesMergingSettings,System.Predicate{Melanchall.DryWetMidi.Smf.Interaction.Note})">
            <summary>
            Merges nearby notes in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to merge nearby notes in.</param>
            <param name="settings">Settings according to which notes should be merged.</param>
            <param name="filter">Filter for notes to merge.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesMergingSettings">
            <summary>
            Settings according to which nearby notes should be merged.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NotesMergingSettings.VelocityMergingPolicy">
            <summary>
            Gets or sets a policy which determines how <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.Velocity"/> of notes should be merged.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.First"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NotesMergingSettings.OffVelocityMergingPolicy">
            <summary>
            Gets or sets a policy which determines how <see cref="P:Melanchall.DryWetMidi.Smf.Interaction.Note.OffVelocity"/> of notes should be merged.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.Last"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.NotesMergingSettings.Tolerance">
            <summary>
            Gets or sets maximum distance between two notes to consider them as nearby. The default value
            is time span of zero length.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy">
            <summary>
            Determines how velocities should be merged during notes merging. The default value is <see cref="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.First"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.First">
            <summary>
            Take velocity of first note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.Last">
            <summary>
            Take velocity of last note.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.Min">
            <summary>
            Take minimum velocity.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.Max">
            <summary>
            Take maximum velocity.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.Average">
            <summary>
            Take average velocity.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.QuantizedTime">
            <summary>
            Holds information about new time for an object that was calculated during quantizing.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizedTime.NewTime">
            <summary>
            Gets the new time of an object.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizedTime.GridTime">
            <summary>
            Gets a grid time that was selected for an object as the nearest one.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizedTime.Shift">
            <summary>
            Gets the distance an object is going to be moved toward the new time.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizedTime.DistanceToGridTime">
            <summary>
            Gets the distance between an object's current time and the nearest grid time.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizedTime.ConvertedDistanceToGridTime">
            <summary>
            Gets the distance between an object's current time and the nearest grid time as time span
            of the type specified by <see cref="P:Melanchall.DryWetMidi.Tools.QuantizingSettings.DistanceCalculationType"/>.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.QuantizingSettings">
            <summary>
            Settings according to which quantizing should be performed.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizingSettings.DistanceCalculationType">
            <summary>
            Gets or sets the type of distance calculation used to find a time to snap an object to.
            The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.QuantizingSettings.QuantizingLevel">
            <summary>
            Gets or sets the level of quantizing from 0.0 (no quantizing) to 1.0 (full quantizng).
            </summary>
            <remarks>
            This setting specifies how close an object should be moved to nearest grid time. For example,
            0.5 will lead to an object will be moved half the distance between its time and the nearest
            grid time.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is out of valid range.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings">
            <summary>
            Settings according to which chords should be quantized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsQuantizer">
            <summary>
            Provides methods to quantize chords time.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities">
            <summary>
            Provides methods to quantize chords time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.QuantizeChords(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64,Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings)">
            <summary>
            Quantizes chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize chords in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which chords should be quantized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Chord is going to be moved beyond zero. -or-
            Chord's end is going to be moved beyond the chord's fixed end.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.QuantizeChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64,Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings)">
            <summary>
            Quantizes chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize chords in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which chords should be quantized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Chord is going to be moved beyond zero. -or-
            Chord's end is going to be moved beyond the chord's fixed end.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.QuantizeChords(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid,System.Int64,Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings)">
            <summary>
            Quantizes chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to quantize chords in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="settings">Settings according to which chords should be quantized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="grid"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Chord is going to be moved beyond zero. -or-
            Chord's end is going to be moved beyond the chord's fixed end.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings">
            <summary>
            Settings according to which timed events should be quantized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsQuantizer">
            <summary>
            Provides methods to quantize timed events time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.Quantize(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Quantizes objects time using the specified grid and settings.
            </summary>
            <param name="objects">Objects to quantize.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which objects should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.GetObjectTime(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Gets the time of an object that should be quantized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be quantized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.SetObjectTime(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,System.Int64,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after quantizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.OnObjectQuantizing(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,Melanchall.DryWetMidi.Tools.QuantizedTime,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or quantizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to quantize.</param>
            <param name="quantizedTime">Holds information about new time for an object.</param>
            <param name="grid">Grid to quantize object by.</param>
            <param name="tempoMap">Tempo map used to quantize object.</param>
            <param name="settings">Settings according to which object should be quantized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2">
            <summary>
            Provides methods to quantize lengthed objects time.
            </summary>
            <typeparam name="TObject">The type of objects to quantize.</typeparam>
            <typeparam name="TSettings">The type of quantizer's settings.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2.Quantize(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Quantizes objects time using the specified grid and settings.
            </summary>
            <param name="objects">Objects to quantize.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which objects should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2.GetObjectTime(`0,`1)">
            <summary>
            Gets the time of an object that should be quantized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be quantized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2.SetObjectTime(`0,System.Int64,`1)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after quantizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer`2.OnObjectQuantizing(`0,Melanchall.DryWetMidi.Tools.QuantizedTime,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or quantizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to quantize.</param>
            <param name="quantizedTime">Holds information about new time for an object.</param>
            <param name="grid">Grid to quantize object by.</param>
            <param name="tempoMap">Tempo map used to quantize object.</param>
            <param name="settings">Settings according to which object should be quantized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings">
            <summary>
            Settings according to which lengthed objects should be quantized.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings.LengthType">
            <summary>
            Gets or sets the type of an object's length that should be kept in case the opposite
            side is not fixed. The default value is <see cref="F:Melanchall.DryWetMidi.Smf.Interaction.TimeSpanType.Midi"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings.QuantizingTarget">
            <summary>
            Gets or sets the side of an object that should be quantized.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.LengthedObjectTarget.Start"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings.QuantizingBeyondZeroPolicy">
            <summary>
            Gets or sets policy according to which a quantizer should act in case of an object is going
            to be moved beyond zero. The default value is <see cref="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.FixAtZero"/>.
            </summary>
            <remarks>
            When the start time of an object is not fixed, there is a chance that the object's end time
            will be quantized in a such way that the start time will be negative due to the object is
            moved to the left. Negative time is invalid so this policy provides options to prevent this
            situation.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings.QuantizingBeyondFixedEndPolicy">
            <summary>
            Gets or sets policy according to which a quantizer should act in case of object's side
            is going to be moved beyond an opposite one that is fixed. The default value is
            <see cref="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.CollapseAndFix"/>.
            </summary>
            <remarks>
            When one end of an object is fixed, there is a chance that the object's opposite end
            will be quantized in a such way that the object will be reversed resulting to negative length.
            This policy provides options to prevent this situation.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings.FixOppositeEnd">
            <summary>
            Gets or sets a value indicating whether an opposite side of an object should be fixed or not.
            The default value is false.
            </summary>
            <remarks>
            When an object's side is fixed the length can be changed during quantizing.
            </remarks>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy">
            <summary>
            Policy which defines how a quantizer should act in case of object's side
            is going to be moved beyond an opposite one that is fixed. The default value is
            <see cref="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.CollapseAndFix"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.CollapseAndFix">
            <summary>
            Object will be collapsed and fixed at fixed end's time.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.CollapseAndMove">
            <summary>
            Object will be collapsed and moved to the new time calculated by a quantizer.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.SwapEnds">
            <summary>
            Ends of an object will be swapped.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.Skip">
            <summary>
            Object will be skipped so quantizing will not be applied to it.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.Abort">
            <summary>
            Throw an exception aborting quantizing.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy">
            <summary>
            Policy which defines how a quantizer should act in case of an object is going
            to be moved beyond zero. The default value is <see cref="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.FixAtZero"/>.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.FixAtZero">
            <summary>
            Object will be shrinked due to end time quantizing and fixed at zero.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.Skip">
            <summary>
            Object will be skipped so quantizing will not be applied to it.
            </summary>
        </member>
        <member name="F:Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.Abort">
            <summary>
            Throw an exception aborting quantizing.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesQuantizingSettings">
            <summary>
            Settings according to which notes should be quantized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesQuantizer">
            <summary>
            Provides methods to quantize notes time.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.Quantizer`2">
            <summary>
            Provides methods to quantize objects time.
            </summary>
            <typeparam name="TObject">The type of objects to quantize.</typeparam>
            <typeparam name="TSettings">The type of quantizer's settings.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Quantizer`2.QuantizeInternal(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Quantizes objects time using the specified grid and settings.
            </summary>
            <param name="objects">Objects to quantize.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which objects should be quantized.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Quantizer`2.GetObjectTime(`0,`1)">
            <summary>
            Gets the time of an object that should be quantized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be quantized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Quantizer`2.SetObjectTime(`0,System.Int64,`1)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after quantizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Quantizer`2.OnObjectQuantizing(`0,Melanchall.DryWetMidi.Tools.QuantizedTime,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or quantizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to quantize.</param>
            <param name="quantizedTime">Holds information about new time for an object.</param>
            <param name="grid">Grid to quantize object by.</param>
            <param name="tempoMap">Tempo map used to quantize object.</param>
            <param name="settings">Settings according to which object should be quantized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities">
            <summary>
            Provides methods to quantize notes time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.QuantizeNotes(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesQuantizingSettings)">
            <summary>
            Quantizes notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize notes in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which notes should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Note is going to be moved beyond zero. -or-
            Note's end is going to be moved beyond the note's fixed end.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.QuantizeNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesQuantizingSettings)">
            <summary>
            Quantizes notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize notes in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which notes should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Note is going to be moved beyond zero. -or-
            Note's end is going to be moved beyond the note's fixed end.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.QuantizeNotes(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Tools.NotesQuantizingSettings)">
            <summary>
            Quantizes notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to quantize notes in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="settings">Settings according to which notes should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="grid"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Note is going to be moved beyond zero. -or-
            Note's end is going to be moved beyond the note's fixed end.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities">
            <summary>
            Provides methods to quantize timed events time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.QuantizeTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Quantizes timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize timed events in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which timed events should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.QuantizeTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Quantizes timed events contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to quantize timed events in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="tempoMap">Tempo map used to calculate times to quantize by.</param>
            <param name="settings">Settings according to which timed events should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="grid"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.QuantizeTimedEvents(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Smf.Interaction.IGrid,Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)">
            <summary>
            Quantizes timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to quantize timed events in.</param>
            <param name="grid">Grid to quantize objects by.</param>
            <param name="settings">Settings according to which timed events should be quantized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="grid"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.Randomizer`2">
            <summary>
            Provides methods to randomize objects time.
            </summary>
            <typeparam name="TObject">The type of objects to quantize.</typeparam>
            <typeparam name="TSettings">The type of quantizer's settings.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Randomizer`2.RandomizeInternal(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Randomizes objects time using the specified bounds and settings.
            </summary>
            <param name="objects">Objects to randomize.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which objects should be randomized.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Randomizer`2.GetObjectTime(`0,`1)">
            <summary>
            Gets the time of an object that should be randomized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be randomized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Randomizer`2.SetObjectTime(`0,System.Int64,`1)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after randomizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.Randomizer`2.OnObjectRandomizing(`0,System.Int64,`1)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or randomizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to randomize.</param>
            <param name="time">The new time that is going to be set to the object. Can be changed
            inside this method.</param>
            <param name="settings">Settings according to which object should be randomized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.RandomizingSettings">
            <summary>
            Settings according to which objects should be randomized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ConstantBounds">
            <summary>
            Time range which is constant for each object to be processed.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ConstantBounds.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Tools.ConstantBounds"/> with the specified size
            so time range will span for equal length to the left and to the right from time
            to calculate bounds relative to.
            </summary>
            <param name="size">Size of the time range. The length of time range will be 2 * <paramref name="size"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="size"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ConstantBounds.#ctor(Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan,Melanchall.DryWetMidi.Smf.Interaction.ITimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Melanchall.DryWetMidi.Tools.ConstantBounds"/> with the specified size of left
            and right parts so time range will span for different length to the left and to the right from time
            to calculate bounds relative to.
            </summary>
            <param name="leftSize">Left part's size of the time range.</param>
            <param name="rightSize">Right part's size of the time range.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="leftSize"/> is null. -or-
            <paramref name="rightSize"/> is null.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.ConstantBounds.LeftSize">
            <summary>
            Gets the size of left part of the time range represented by the current <see cref="T:Melanchall.DryWetMidi.Tools.ConstantBounds"/>.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.ConstantBounds.RightSize">
            <summary>
            Gets the size of right part of the time range represented by the current <see cref="T:Melanchall.DryWetMidi.Tools.ConstantBounds"/>.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ConstantBounds.GetBounds(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets minimum and maximum times in MIDI ticks for the current time range.
            </summary>
            <param name="time">Time bounds should be calculated relative to.</param>
            <param name="tempoMap">Tempo map used to calculate bounds.</param>
            <returns>Pair where first item is minimum time and the second one is maximum time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings">
            <summary>
            Settings according to which chords should be randomized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsRandomizer">
            <summary>
            Provides methods to randomize chords time.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.IBounds">
            <summary>
            Represents time range used in time processing tools.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.IBounds.GetBounds(System.Int64,Melanchall.DryWetMidi.Smf.Interaction.TempoMap)">
            <summary>
            Gets minimum and maximum times in MIDI ticks for the current time range.
            </summary>
            <param name="time">Time bounds should be calculated relative to.</param>
            <param name="tempoMap">Tempo map used to calculate bounds.</param>
            <returns>Pair where first item is minimum time and the second one is maximum time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2">
            <summary>
            Provides methods to randomize lengthed objects time.
            </summary>
            <typeparam name="TObject">The type of objects to quantize.</typeparam>
            <typeparam name="TSettings">The type of quantizer's settings.</typeparam>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2.Randomize(System.Collections.Generic.IEnumerable{`0},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,`1)">
            <summary>
            Randomizes objects time using the specified bounds and settings.
            </summary>
            <param name="objects">Objects to randomize.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which objects should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2.GetObjectTime(`0,`1)">
            <summary>
            Gets the time of an object that should be randomized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be randomized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2.SetObjectTime(`0,System.Int64,`1)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after randomizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer`2.OnObjectRandomizing(`0,System.Int64,`1)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or randomizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to randomize.</param>
            <param name="time">The new time that is going to be set to the object. Can be changed
            inside this method.</param>
            <param name="settings">Settings according to which object should be randomized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings">
            <summary>
            Settings according to which lengthed objects should be randomized.
            </summary>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings.RandomizingTarget">
            <summary>
            Gets or sets the side of an object that should be randomized.
            The default value is <see cref="F:Melanchall.DryWetMidi.Tools.LengthedObjectTarget.Start"/>.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/> specified an invalid value.</exception>
        </member>
        <member name="P:Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings.FixOppositeEnd">
            <summary>
            Gets or sets a value indicating whether an opposite side of an object should be fixed or not.
            The default value is false.
            </summary>
            <remarks>
            When an object's side is fixed the length can be changed during randomizing.
            </remarks>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesRandomizingSettings">
            <summary>
            Settings according to which notes should be randomized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesRandomizer">
            <summary>
            Provides methods to randomize notes time.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings">
            <summary>
            Settings according to which timed events should be randomized.
            </summary>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsRandomizer">
            <summary>
            Provides methods to randomize timed events time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.Randomize(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.Interaction.TimedEvent},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Randomizes objects time using the specified bounds and settings.
            </summary>
            <param name="objects">Objects to randomize.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which objects should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.GetObjectTime(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Gets the time of an object that should be randomized.
            </summary>
            <param name="obj">Object to get time of.</param>
            <param name="settings">Settings according to which the object's time should be gotten.</param>
            <returns>The time of <paramref name="obj"/> that should be randomized.</returns>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.SetObjectTime(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,System.Int64,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Sets the new time of an object.
            </summary>
            <param name="obj">Object to set time for.</param>
            <param name="time">New time after randomizing.</param>
            <param name="settings">Settings according to which the object's time should be set.</param>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.OnObjectRandomizing(Melanchall.DryWetMidi.Smf.Interaction.TimedEvent,System.Int64,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Performs additional actions before the new time will be set to an object.
            </summary>
            <remarks>
            Inside this method the new time can be changed or randomizing of an object can be cancelled.
            </remarks>
            <param name="obj">Object to randomize.</param>
            <param name="time">The new time that is going to be set to the object. Can be changed
            inside this method.</param>
            <param name="settings">Settings according to which object should be randomized.</param>
            <returns>An object indicating whether the new time should be set to the object
            or not. Also returned object contains that new time.</returns>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities">
            <summary>
            Provides methods to randomize chords time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.RandomizeChords(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64,Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings)">
            <summary>
            Randomizes chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize chords in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which chords should be randomized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.RandomizeChords(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,System.Int64,Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings)">
            <summary>
            Randomizes chords contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize chords in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which chords should be randomized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.RandomizeChords(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Tools.IBounds,System.Int64,Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings)">
            <summary>
            Randomizes chords contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to randomize chords in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="settings">Settings according to which chords should be randomized.</param>
            <param name="notesTolerance">Chords tolerance that defines maximum distance of chords from the
            start of the first chord of a chord. Chords within this tolerance will be considered as a chord.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="bounds"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="notesTolerance"/> is negative.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities">
            <summary>
            Provides methods to randomize notes time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.RandomizeNotes(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesRandomizingSettings)">
            <summary>
            Randomizes notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize notes in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which notes should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.RandomizeNotes(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.NotesRandomizingSettings)">
            <summary>
            Randomizes notes contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize notes in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which notes should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.RandomizeNotes(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Tools.NotesRandomizingSettings)">
            <summary>
            Randomizes notes contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to randomize notes in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="settings">Settings according to which notes should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="bounds"/> is null.</exception>
        </member>
        <member name="T:Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities">
            <summary>
            Provides methods to randomize timed events time.
            </summary>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.RandomizeTimedEvents(Melanchall.DryWetMidi.Smf.TrackChunk,Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Randomizes timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunk"><see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize timed events in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which timed events should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunk"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.RandomizeTimedEvents(System.Collections.Generic.IEnumerable{Melanchall.DryWetMidi.Smf.TrackChunk},Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Smf.Interaction.TempoMap,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Randomizes timed events contained in the specified collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/>.
            </summary>
            <param name="trackChunks">Collection of <see cref="T:Melanchall.DryWetMidi.Smf.TrackChunk"/> to randomize timed events in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="tempoMap">Tempo map used to calculate time bounds to randomize within.</param>
            <param name="settings">Settings according to which timed events should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackChunks"/> is null. -or-
            <paramref name="bounds"/> is null. -or- <paramref name="tempoMap"/> is null.</exception>
        </member>
        <member name="M:Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.RandomizeTimedEvents(Melanchall.DryWetMidi.Smf.MidiFile,Melanchall.DryWetMidi.Tools.IBounds,Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)">
            <summary>
            Randomizes timed events contained in the specified <see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/>.
            </summary>
            <param name="midiFile"><see cref="T:Melanchall.DryWetMidi.Smf.MidiFile"/> to randomize timed events in.</param>
            <param name="bounds">Bounds to randomize time within.</param>
            <param name="settings">Settings according to which timed events should be randomized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="midiFile"/> is null. -or-
            <paramref name="bounds"/> is null.</exception>
        </member>
    </members>
</doc>
